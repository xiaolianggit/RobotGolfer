
RoboGolfer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000280e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000007c  00800060  00800060  00002882  2**0
                  ALLOC
  2 .debug_aranges 000001c0  00000000  00000000  00002882  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00002393  00000000  00000000  00002a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004d05  00000000  00000000  00004dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ed2  00000000  00000000  00009ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003a41  00000000  00000000  0000a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000760  00000000  00000000  0000e3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000a3b  00000000  00000000  0000eb50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b83  00000000  00000000  0000f58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  0001010e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_5>
      18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_6>
      1c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_7>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 3d       	cpi	r26, 0xDC	; 220
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
      74:	0c 94 05 14 	jmp	0x280a	; 0x280a <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <IO_init>:
///----------------------------     FUNCTIONS   ---------------------------------------------------------///
///------------------------------------------------------------------------------------------------------///

void IO_init(void)
{
	DDRA = 0b00000000;
      7c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0b10011111;
      7e:	8f e9       	ldi	r24, 0x9F	; 159
      80:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b11111111;
      82:	8f ef       	ldi	r24, 0xFF	; 255
      84:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11110010;
      86:	82 ef       	ldi	r24, 0xF2	; 242
      88:	81 bb       	out	0x11, r24	; 17

	PORTA = 0b00000000;
      8a:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0b00000000;
      8c:	18 ba       	out	0x18, r1	; 24
	PORTC = 0b00000000;
      8e:	15 ba       	out	0x15, r1	; 21
	PORTD = 0b00000001;
      90:	81 e0       	ldi	r24, 0x01	; 1
      92:	82 bb       	out	0x12, r24	; 18
}
      94:	08 95       	ret

00000096 <inherent_function>:

//Call this function for controlling the robot manually
void inherent_function(void)
{
	ADC_update();
      96:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	

	if(!SW_IN_2 && !SW_IN_1)		//enter the line following mode when button S5 and S6 are pressed together
      9a:	b6 99       	sbic	0x16, 6	; 22
      9c:	0a c0       	rjmp	.+20     	; 0xb2 <inherent_function+0x1c>
      9e:	b5 99       	sbic	0x16, 5	; 22
      a0:	08 c0       	rjmp	.+16     	; 0xb2 <inherent_function+0x1c>
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <inherent_function+0x12>
	{
		while(!SW_IN_2 || !SW_IN_1)
		{
			test_mode();
      a4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <test_mode>
	ADC_update();
	

	if(!SW_IN_2 && !SW_IN_1)		//enter the line following mode when button S5 and S6 are pressed together
	{
		while(!SW_IN_2 || !SW_IN_1)
      a8:	b6 9b       	sbis	0x16, 6	; 22
      aa:	fc cf       	rjmp	.-8      	; 0xa4 <inherent_function+0xe>
      ac:	b5 9b       	sbis	0x16, 5	; 22
      ae:	fa cf       	rjmp	.-12     	; 0xa4 <inherent_function+0xe>
      b0:	08 95       	ret
		{
			test_mode();
		}
		
	}
	else if(!SW_IN_1)				//enter the manual control mode when button S6 is pressed
      b2:	b5 99       	sbic	0x16, 5	; 22
      b4:	04 c0       	rjmp	.+8      	; 0xbe <inherent_function+0x28>
	{
		while(!SW_IN_1);
      b6:	b5 9b       	sbis	0x16, 5	; 22
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <inherent_function+0x20>
		
		test_mode();
      ba:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <test_mode>
      be:	08 95       	ret

000000c0 <main>:
	}
}

int main(void)
{
	IO_init();
      c0:	0e 94 3e 00 	call	0x7c	; 0x7c <IO_init>
	Timer1_init();
      c4:	0e 94 70 00 	call	0xe0	; 0xe0 <Timer1_init>
	ADC_init();
      c8:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_init>

	Motor_stop();
      cc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	Servo_init();
      d0:	0e 94 4a 04 	call	0x894	; 0x894 <Servo_init>
	LCD_init();
      d4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_init>

	sei();
      d8:	78 94       	sei

	while(1)
	{
		inherent_function();
      da:	0e 94 4b 00 	call	0x96	; 0x96 <inherent_function>
      de:	fd cf       	rjmp	.-6      	; 0xda <main+0x1a>

000000e0 <Timer1_init>:
//set the prescaler to clk/8
//enable the timer1 overflow interrupt and output compare match A interrupt
//please read p.67 to p.80 of ATMega16 datasheet for details
void Timer1_init(void)
{
	TCCR1A = 0b00100000;
      e0:	80 e2       	ldi	r24, 0x20	; 32
      e2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00011010;
      e4:	8a e1       	ldi	r24, 0x1A	; 26
      e6:	8e bd       	out	0x2e, r24	; 46

	ICR1 = 	9216;					// trigger the overflow interrupt for every 2ms 4608
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	94 e2       	ldi	r25, 0x24	; 36
      ec:	97 bd       	out	0x27, r25	; 39
      ee:	86 bd       	out	0x26, r24	; 38
	OCR1A = MOTOR_PWM_PERIOD;		// trigger the output compare match A interrupt
      f0:	8e e2       	ldi	r24, 0x2E	; 46
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	9b bd       	out	0x2b, r25	; 43
      f6:	8a bd       	out	0x2a, r24	; 42
	OCR1B = PWM_1_5ms;					// initialize PWM Generation
      f8:	80 e8       	ldi	r24, 0x80	; 128
      fa:	9d e0       	ldi	r25, 0x0D	; 13
      fc:	99 bd       	out	0x29, r25	; 41
      fe:	88 bd       	out	0x28, r24	; 40

	TIMSK |= 0b00111000;			// enable Interrupt, please read p.109 of ATMega 16 datasheet for details
     100:	89 b7       	in	r24, 0x39	; 57
     102:	88 63       	ori	r24, 0x38	; 56
     104:	89 bf       	out	0x39, r24	; 57
}
     106:	08 95       	ret

00000108 <set_motor_dir>:
///----------------------------     FUNCTIONS   ---------------------------------------------------------///
///------------------------------------------------------------------------------------------------------///

void set_motor_dir(u08 L_motor, u08 R_motor)
{
	motor_dir = (L_motor<<6);
     108:	82 95       	swap	r24
     10a:	88 0f       	add	r24, r24
     10c:	88 0f       	add	r24, r24
     10e:	80 7c       	andi	r24, 0xC0	; 192
     110:	80 93 c1 00 	sts	0x00C1, r24
	motor_dir |= (R_motor<<2);
     114:	80 91 c1 00 	lds	r24, 0x00C1
     118:	66 0f       	add	r22, r22
     11a:	66 0f       	add	r22, r22
     11c:	86 2b       	or	r24, r22
     11e:	80 93 c1 00 	sts	0x00C1, r24
	motor_dir &= 0xCC;
     122:	80 91 c1 00 	lds	r24, 0x00C1
     126:	8c 7c       	andi	r24, 0xCC	; 204
     128:	80 93 c1 00 	sts	0x00C1, r24

	D_Flip_Flop &= 0x33;
     12c:	80 91 63 00 	lds	r24, 0x0063
     130:	83 73       	andi	r24, 0x33	; 51
     132:	80 93 63 00 	sts	0x0063, r24
	D_Flip_Flop |= motor_dir;
     136:	90 91 63 00 	lds	r25, 0x0063
     13a:	80 91 c1 00 	lds	r24, 0x00C1
     13e:	89 2b       	or	r24, r25
     140:	80 93 63 00 	sts	0x0063, r24
}
     144:	08 95       	ret

00000146 <Motor_forward>:
	delay_ms(100);
}

//Call this function to set the RoboGolfer moves forward with respective speeds
void Motor_forward(u08 L_motor, u08 R_motor)
{
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	18 2f       	mov	r17, r24
     14c:	06 2f       	mov	r16, r22
	set_motor_dir(MOTOR_FORWARD, MOTOR_BACKWARD);
     14e:	82 e0       	ldi	r24, 0x02	; 2
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	0e 94 84 00 	call	0x108	; 0x108 <set_motor_dir>
	L_motor_speed = L_motor;
     156:	10 93 bf 00 	sts	0x00BF, r17
	R_motor_speed = R_motor;
     15a:	00 93 a7 00 	sts	0x00A7, r16

}
     15e:	1f 91       	pop	r17
     160:	0f 91       	pop	r16
     162:	08 95       	ret

00000164 <Motor_backward>:

//Call this function to set the RoboGolfer moves backward with respective speeds
void Motor_backward(u08 L_motor, u08 R_motor)
{
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	18 2f       	mov	r17, r24
     16a:	06 2f       	mov	r16, r22
	set_motor_dir(MOTOR_BACKWARD, MOTOR_FORWARD);
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	62 e0       	ldi	r22, 0x02	; 2
     170:	0e 94 84 00 	call	0x108	; 0x108 <set_motor_dir>
	L_motor_speed = L_motor;
     174:	10 93 bf 00 	sts	0x00BF, r17
	R_motor_speed = R_motor;
     178:	00 93 a7 00 	sts	0x00A7, r16
}
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	08 95       	ret

00000182 <Motor_TurnLeft>:

//Call this function to set the RoboGolfer turns left with respective speeds
void Motor_TurnLeft(u08 L_motor, u08 R_motor)
{
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	18 2f       	mov	r17, r24
     188:	06 2f       	mov	r16, r22
	set_motor_dir(MOTOR_BACKWARD, MOTOR_BACKWARD);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	0e 94 84 00 	call	0x108	; 0x108 <set_motor_dir>
	L_motor_speed = L_motor;
     192:	10 93 bf 00 	sts	0x00BF, r17
	R_motor_speed = R_motor;
     196:	00 93 a7 00 	sts	0x00A7, r16
}
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	08 95       	ret

000001a0 <Motor_TurnRight>:

void Motor_TurnRight(u08 L_motor, u08 R_motor)
{
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	18 2f       	mov	r17, r24
     1a6:	06 2f       	mov	r16, r22
	set_motor_dir(MOTOR_FORWARD, MOTOR_FORWARD);
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	62 e0       	ldi	r22, 0x02	; 2
     1ac:	0e 94 84 00 	call	0x108	; 0x108 <set_motor_dir>
	L_motor_speed = L_motor;
     1b0:	10 93 bf 00 	sts	0x00BF, r17
	R_motor_speed = R_motor;
     1b4:	00 93 a7 00 	sts	0x00A7, r16
}
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	08 95       	ret

000001be <Motor_adjust>:

//Call this function to set the RoboGolfer turns right with respective speeds
void Motor_adjust(void)
{
	;
}
     1be:	08 95       	ret

000001c0 <__vector_6>:
///------------------------------------------------------------------------------------------------------///
///-----------------------     Software Generated PWM ISR   ---------------------------------------------///
///------------------------------------------------------------------------------------------------------///

ISR (TIMER1_COMPA_vect)
{
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
     1dc:	bf 93       	push	r27
     1de:	ef 93       	push	r30
     1e0:	ff 93       	push	r31
	static u08 time_tick = 0;

	OCR1A += MOTOR_PWM_PERIOD;
     1e2:	8a b5       	in	r24, 0x2a	; 42
     1e4:	9b b5       	in	r25, 0x2b	; 43
     1e6:	8e 96       	adiw	r24, 0x2e	; 46
     1e8:	9b bd       	out	0x2b, r25	; 43
     1ea:	8a bd       	out	0x2a, r24	; 42
	if(OCR1A >= ICR1)
     1ec:	2a b5       	in	r18, 0x2a	; 42
     1ee:	3b b5       	in	r19, 0x2b	; 43
     1f0:	86 b5       	in	r24, 0x26	; 38
     1f2:	97 b5       	in	r25, 0x27	; 39
     1f4:	28 17       	cp	r18, r24
     1f6:	39 07       	cpc	r19, r25
     1f8:	20 f0       	brcs	.+8      	; 0x202 <__vector_6+0x42>
		OCR1A = MOTOR_PWM_PERIOD;
     1fa:	8e e2       	ldi	r24, 0x2E	; 46
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	9b bd       	out	0x2b, r25	; 43
     200:	8a bd       	out	0x2a, r24	; 42

	if(++time_tick >= MOTOR_TICK)
     202:	90 91 60 00 	lds	r25, 0x0060
     206:	9f 5f       	subi	r25, 0xFF	; 255
     208:	90 93 60 00 	sts	0x0060, r25
     20c:	94 36       	cpi	r25, 0x64	; 100
     20e:	08 f1       	brcs	.+66     	; 0x252 <__vector_6+0x92>
	{
		time_tick = 0;
     210:	10 92 60 00 	sts	0x0060, r1

		D_Flip_Flop &= 0x33;
     214:	80 91 63 00 	lds	r24, 0x0063
     218:	83 73       	andi	r24, 0x33	; 51
     21a:	80 93 63 00 	sts	0x0063, r24
		D_Flip_Flop |= motor_dir;
     21e:	90 91 63 00 	lds	r25, 0x0063
     222:	80 91 c1 00 	lds	r24, 0x00C1
     226:	89 2b       	or	r24, r25
     228:	80 93 63 00 	sts	0x0063, r24

		if(L_motor_speed == 0)
     22c:	80 91 bf 00 	lds	r24, 0x00BF
     230:	88 23       	and	r24, r24
     232:	29 f4       	brne	.+10     	; 0x23e <__vector_6+0x7e>
			D_Flip_Flop &= 0x3F;		//stop
     234:	80 91 63 00 	lds	r24, 0x0063
     238:	8f 73       	andi	r24, 0x3F	; 63
     23a:	80 93 63 00 	sts	0x0063, r24
		if(R_motor_speed == 0)
     23e:	80 91 a7 00 	lds	r24, 0x00A7
     242:	88 23       	and	r24, r24
     244:	f1 f4       	brne	.+60     	; 0x282 <__vector_6+0xc2>
			D_Flip_Flop &= 0xF3;
     246:	80 91 63 00 	lds	r24, 0x0063
     24a:	83 7f       	andi	r24, 0xF3	; 243
     24c:	80 93 63 00 	sts	0x0063, r24
     250:	18 c0       	rjmp	.+48     	; 0x282 <__vector_6+0xc2>
		MOTOR_EN = 1;
		MOTOR_EN = 0;
	}
	else
	{
		u08 temp = D_Flip_Flop;
     252:	20 91 63 00 	lds	r18, 0x0063
		if(L_motor_speed <= time_tick)
     256:	80 91 bf 00 	lds	r24, 0x00BF
     25a:	98 17       	cp	r25, r24
     25c:	28 f0       	brcs	.+10     	; 0x268 <__vector_6+0xa8>
			D_Flip_Flop &= 0x3F;
     25e:	80 91 63 00 	lds	r24, 0x0063
     262:	8f 73       	andi	r24, 0x3F	; 63
     264:	80 93 63 00 	sts	0x0063, r24
		if(R_motor_speed <= time_tick)
     268:	80 91 a7 00 	lds	r24, 0x00A7
     26c:	98 17       	cp	r25, r24
     26e:	28 f0       	brcs	.+10     	; 0x27a <__vector_6+0xba>
			D_Flip_Flop &= 0xF3;
     270:	80 91 63 00 	lds	r24, 0x0063
     274:	83 7f       	andi	r24, 0xF3	; 243
     276:	80 93 63 00 	sts	0x0063, r24

		if(D_Flip_Flop != temp)
     27a:	80 91 63 00 	lds	r24, 0x0063
     27e:	82 17       	cp	r24, r18
     280:	49 f0       	breq	.+18     	; 0x294 <__vector_6+0xd4>
		{
			Databus_clear();				//motor update
     282:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Databus_clear>
			DATA_DIR = PORT_OUTPUT;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	84 bb       	out	0x14, r24	; 20
			PORTC = D_Flip_Flop;
     28a:	80 91 63 00 	lds	r24, 0x0063
     28e:	85 bb       	out	0x15, r24	; 21
			MOTOR_EN = 1;
     290:	97 9a       	sbi	0x12, 7	; 18
			MOTOR_EN = 0;
     292:	97 98       	cbi	0x12, 7	; 18
		}
	}	
}
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	0f 90       	pop	r0
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	0f 90       	pop	r0
     2b2:	1f 90       	pop	r1
     2b4:	18 95       	reti

000002b6 <Motor_stop>:
	D_Flip_Flop |= motor_dir;
}

void Motor_stop(void)	// Delay for a while before return the function
{
	set_motor_dir(MOTOR_STOP, MOTOR_STOP);
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	0e 94 84 00 	call	0x108	; 0x108 <set_motor_dir>
	L_motor_speed = R_motor_speed = 0;
     2be:	10 92 a7 00 	sts	0x00A7, r1
     2c2:	80 91 a7 00 	lds	r24, 0x00A7
     2c6:	80 93 bf 00 	sts	0x00BF, r24
	delay_ms(100);
     2ca:	84 e6       	ldi	r24, 0x64	; 100
     2cc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     2d0:	08 95       	ret

000002d2 <Databus_clear>:
#include "Global.h"


void Databus_clear(void)
{
	PORTB &= 0xFC;						//disable all floor sensors
     2d2:	88 b3       	in	r24, 0x18	; 24
     2d4:	8c 7f       	andi	r24, 0xFC	; 252
     2d6:	88 bb       	out	0x18, r24	; 24
	PORTD &= 0x1F;
     2d8:	82 b3       	in	r24, 0x12	; 18
     2da:	8f 71       	andi	r24, 0x1F	; 31
     2dc:	82 bb       	out	0x12, r24	; 18
}
     2de:	08 95       	ret

000002e0 <Motor_update>:
#include "Global.h"


void Databus_clear(void)
{
	PORTB &= 0xFC;						//disable all floor sensors
     2e0:	88 b3       	in	r24, 0x18	; 24
     2e2:	8c 7f       	andi	r24, 0xFC	; 252
     2e4:	88 bb       	out	0x18, r24	; 24
	PORTD &= 0x1F;
     2e6:	82 b3       	in	r24, 0x12	; 18
     2e8:	8f 71       	andi	r24, 0x1F	; 31
     2ea:	82 bb       	out	0x12, r24	; 18
}

void Motor_update(void)
{
	Databus_clear();					//free databus
	DATA_DIR = PORT_OUTPUT;				//set the databus direction to output
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	84 bb       	out	0x14, r24	; 20
	PORTC = motor_dir;
     2f0:	80 91 c1 00 	lds	r24, 0x00C1
     2f4:	85 bb       	out	0x15, r24	; 21
	MOTOR_EN = 0;						//a pulse for enable
     2f6:	97 98       	cbi	0x12, 7	; 18
	MOTOR_EN = 1;
     2f8:	97 9a       	sbi	0x12, 7	; 18
	MOTOR_EN = 0;
     2fa:	97 98       	cbi	0x12, 7	; 18
}
     2fc:	08 95       	ret

000002fe <Sensor_front_update>:

void Sensor_front_update(void)
{
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
	DATA_DIR = PORT_INPUT;				//enable front floor sensor
     30a:	14 ba       	out	0x14, r1	; 20
	FLOOR_FRONT = 0;
     30c:	b9 98       	cbi	0x17, 1	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     30e:	86 e0       	ldi	r24, 0x06	; 6
     310:	8a 95       	dec	r24
     312:	f1 f7       	brne	.-4      	; 0x310 <Sensor_front_update+0x12>
	_delay_us(1);
	front_sensor = DATA_IN;
     314:	83 b3       	in	r24, 0x13	; 19
     316:	80 93 aa 00 	sts	0x00AA, r24
	FLOOR_FRONT = 1;
     31a:	b9 9a       	sbi	0x17, 1	; 23
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	a0 e0       	ldi	r26, 0x00	; 0
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	c7 e0       	ldi	r28, 0x07	; 7
     324:	d0 e0       	ldi	r29, 0x00	; 0
    u08 i, temp = 0b00000000, mask_1 = 0b00000001, mask_2 = 0b10000000;
    for (i = 0; i < 4; i++)				//switch the sequence of front_sensor
    {
        temp |= ((front_sensor & (mask_1 << i)) << (7 - 2 * i));
        temp |= ((front_sensor & (mask_2 >> i)) >> (7 - 2 * i));
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	e8 2e       	mov	r14, r24
     32a:	f1 2c       	mov	r15, r1
     32c:	00 e8       	ldi	r16, 0x80	; 128
     32e:	10 e0       	ldi	r17, 0x00	; 0
	front_sensor = DATA_IN;
	FLOOR_FRONT = 1;
    u08 i, temp = 0b00000000, mask_1 = 0b00000001, mask_2 = 0b10000000;
    for (i = 0; i < 4; i++)				//switch the sequence of front_sensor
    {
        temp |= ((front_sensor & (mask_1 << i)) << (7 - 2 * i));
     330:	40 91 aa 00 	lds	r20, 0x00AA
        temp |= ((front_sensor & (mask_2 >> i)) >> (7 - 2 * i));
     334:	60 91 aa 00 	lds	r22, 0x00AA
     338:	c7 01       	movw	r24, r14
     33a:	0a 2e       	mov	r0, r26
     33c:	02 c0       	rjmp	.+4      	; 0x342 <Sensor_front_update+0x44>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <Sensor_front_update+0x40>
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	84 23       	and	r24, r20
     34a:	95 23       	and	r25, r21
     34c:	0c 2e       	mov	r0, r28
     34e:	02 c0       	rjmp	.+4      	; 0x354 <Sensor_front_update+0x56>
     350:	88 0f       	add	r24, r24
     352:	99 1f       	adc	r25, r25
     354:	0a 94       	dec	r0
     356:	e2 f7       	brpl	.-8      	; 0x350 <Sensor_front_update+0x52>
     358:	a8 01       	movw	r20, r16
     35a:	0a 2e       	mov	r0, r26
     35c:	02 c0       	rjmp	.+4      	; 0x362 <Sensor_front_update+0x64>
     35e:	55 95       	asr	r21
     360:	47 95       	ror	r20
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <Sensor_front_update+0x60>
     366:	9a 01       	movw	r18, r20
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	26 23       	and	r18, r22
     36c:	37 23       	and	r19, r23
     36e:	0c 2e       	mov	r0, r28
     370:	02 c0       	rjmp	.+4      	; 0x376 <Sensor_front_update+0x78>
     372:	35 95       	asr	r19
     374:	27 95       	ror	r18
     376:	0a 94       	dec	r0
     378:	e2 f7       	brpl	.-8      	; 0x372 <Sensor_front_update+0x74>
     37a:	82 2b       	or	r24, r18
     37c:	f8 2b       	or	r31, r24
     37e:	11 96       	adiw	r26, 0x01	; 1
     380:	22 97       	sbiw	r28, 0x02	; 2
	FLOOR_FRONT = 0;
	_delay_us(1);
	front_sensor = DATA_IN;
	FLOOR_FRONT = 1;
    u08 i, temp = 0b00000000, mask_1 = 0b00000001, mask_2 = 0b10000000;
    for (i = 0; i < 4; i++)				//switch the sequence of front_sensor
     382:	a4 30       	cpi	r26, 0x04	; 4
     384:	b1 05       	cpc	r27, r1
     386:	a1 f6       	brne	.-88     	; 0x330 <Sensor_front_update+0x32>
    {
        temp |= ((front_sensor & (mask_1 << i)) << (7 - 2 * i));
        temp |= ((front_sensor & (mask_2 >> i)) >> (7 - 2 * i));
    }
    front_sensor = temp;
     388:	f0 93 aa 00 	sts	0x00AA, r31
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	08 95       	ret

0000039a <Sensor_back_update>:

void Sensor_back_update(void)
{
	DATA_DIR = PORT_INPUT;				//enable back floor sensor
     39a:	14 ba       	out	0x14, r1	; 20
	FLOOR_BACK = 0;
     39c:	b8 98       	cbi	0x17, 0	; 23
     39e:	86 e0       	ldi	r24, 0x06	; 6
     3a0:	8a 95       	dec	r24
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <Sensor_back_update+0x6>
	_delay_us(1);
	back_sensor = DATA_IN;
     3a4:	83 b3       	in	r24, 0x13	; 19
     3a6:	80 93 a5 00 	sts	0x00A5, r24
	FLOOR_BACK = 1;
     3aa:	b8 9a       	sbi	0x17, 0	; 23
}
     3ac:	08 95       	ret

000003ae <Sensor_middle_update>:

void Sensor_middle_update(void)			//enable on board sensor
{
	DATA_DIR = PORT_INPUT;
     3ae:	14 ba       	out	0x14, r1	; 20
	FLOOR_MID = 0;
     3b0:	8e 98       	cbi	0x11, 6	; 17
     3b2:	86 e0       	ldi	r24, 0x06	; 6
     3b4:	8a 95       	dec	r24
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <Sensor_middle_update+0x6>
	_delay_us(1);
	middle_sensor = DATA_IN;
     3b8:	83 b3       	in	r24, 0x13	; 19
     3ba:	80 93 98 00 	sts	0x0098, r24
	FLOOR_MID = 1;
     3be:	8e 9a       	sbi	0x11, 6	; 17
}
     3c0:	08 95       	ret

000003c2 <delay_us>:
#include "Global.h"


//delay for micro-second
void delay_us(u08 delay_time)
{
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	36 e0       	ldi	r19, 0x06	; 6
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <delay_us+0xe>
     3c8:	93 2f       	mov	r25, r19
     3ca:	9a 95       	dec	r25
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <delay_us+0x8>
	u08 time = 0;
	while(time < delay_time)
	{
		_delay_us(1);
		time++;
     3ce:	2f 5f       	subi	r18, 0xFF	; 255

//delay for micro-second
void delay_us(u08 delay_time)
{
	u08 time = 0;
	while(time < delay_time)
     3d0:	28 17       	cp	r18, r24
     3d2:	d0 f3       	brcs	.-12     	; 0x3c8 <delay_us+0x6>
	{
		_delay_us(1);
		time++;
	}
}
     3d4:	08 95       	ret

000003d6 <delay_ms>:


//delay for mili-second
void delay_ms(u08 delay_time)
{
     3d6:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	32 e1       	ldi	r19, 0x12	; 18
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <delay_ms+0x10>
     3de:	f9 01       	movw	r30, r18
     3e0:	31 97       	sbiw	r30, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <delay_ms+0xa>
	u08 time = 0;
	while(time < delay_time)
	{
		_delay_ms(1);
		time++;
     3e4:	9f 5f       	subi	r25, 0xFF	; 255

//delay for mili-second
void delay_ms(u08 delay_time)
{
	u08 time = 0;
	while(time < delay_time)
     3e6:	98 17       	cp	r25, r24
     3e8:	d0 f3       	brcs	.-12     	; 0x3de <delay_ms+0x8>
	{
		_delay_ms(1);
		time++;
	}
}
     3ea:	08 95       	ret

000003ec <delay_250ms>:

//delay for 250ms
void delay_250ms(u08 delay_time)
{
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	52 e1       	ldi	r21, 0x12	; 18
     3f2:	08 c0       	rjmp	.+16     	; 0x404 <delay_250ms+0x18>
	u08 time = 0;
	while(time < delay_time)
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fa 01       	movw	r30, r20
     3f8:	31 97       	sbiw	r30, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <delay_250ms+0xc>
{
	u08 time = 0;
	while(time < delay_time)
	{
		_delay_ms(1);
		time++;
     3fc:	9f 5f       	subi	r25, 0xFF	; 255

//delay for mili-second
void delay_ms(u08 delay_time)
{
	u08 time = 0;
	while(time < delay_time)
     3fe:	9a 3f       	cpi	r25, 0xFA	; 250
     400:	d1 f7       	brne	.-12     	; 0x3f6 <delay_250ms+0xa>
{
	u08 time = 0;
	while(time < delay_time)
	{
		delay_ms(250);
		time++;
     402:	2f 5f       	subi	r18, 0xFF	; 255

//delay for 250ms
void delay_250ms(u08 delay_time)
{
	u08 time = 0;
	while(time < delay_time)
     404:	28 17       	cp	r18, r24
     406:	b0 f3       	brcs	.-20     	; 0x3f4 <delay_250ms+0x8>
	{
		delay_ms(250);
		time++;
	}
}
     408:	08 95       	ret

0000040a <ADC_init>:
//initialize the adc when power up
//Enable ADC and set the division to 128
//please read p.198 to p.215 of ATMega 16 datasheet for details
void ADC_init(void)
{	
	ADMUX = 0b00100000;
     40a:	80 e2       	ldi	r24, 0x20	; 32
     40c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000111;
     40e:	87 e8       	ldi	r24, 0x87	; 135
     410:	86 b9       	out	0x06, r24	; 6
}
     412:	08 95       	ret

00000414 <ADC_update>:
void ADC_update(void)
{
	u08 adc_wait=1;

	
	ADMUX = 0b00100000;				//select channel IR
     414:	80 e2       	ldi	r24, 0x20	; 32
     416:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC);			//start conversion of adc
     418:	36 9a       	sbi	0x06, 6	; 6
	do {
		adc_wait = ADCSRA;
		adc_wait &= 0b01000000;
	} while(adc_wait != 0);			//wait until the conversion finish
     41a:	36 99       	sbic	0x06, 6	; 6
     41c:	fe cf       	rjmp	.-4      	; 0x41a <ADC_update+0x6>
	IR = ADCH;	
     41e:	85 b1       	in	r24, 0x05	; 5
     420:	80 93 c3 00 	sts	0x00C3, r24

	adc_wait = 1;
	ADMUX = 0b00100011;				//select channel
     424:	83 e2       	ldi	r24, 0x23	; 35
     426:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC);			//start conversion of adc
     428:	36 9a       	sbi	0x06, 6	; 6
	do {
		adc_wait = ADCSRA;
		adc_wait &= 0b01000000;
	} while(adc_wait != 0);			//wait until the conversion finish
     42a:	36 99       	sbic	0x06, 6	; 6
     42c:	fe cf       	rjmp	.-4      	; 0x42a <ADC_update+0x16>
	VR[1] = ADCH;					//store the value to adc_value
     42e:	85 b1       	in	r24, 0x05	; 5
     430:	80 93 9b 00 	sts	0x009B, r24

	adc_wait = 1;
	
	ADMUX = 0b00100010;				//select channel
     434:	82 e2       	ldi	r24, 0x22	; 34
     436:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC);			//start conversion of adc
     438:	36 9a       	sbi	0x06, 6	; 6
	do {
		adc_wait = ADCSRA;
		adc_wait &= 0b01000000;
	} while(adc_wait != 0);			//wait until the conversion finish
     43a:	36 99       	sbic	0x06, 6	; 6
     43c:	fe cf       	rjmp	.-4      	; 0x43a <ADC_update+0x26>
	VR[0] = ADCH;					//store the value to adc_value
     43e:	85 b1       	in	r24, 0x05	; 5
     440:	80 93 9a 00 	sts	0x009A, r24


}
     444:	08 95       	ret

00000446 <IR_update>:
void IR_update(void)
{
	u08 adc_wait=1;

	
	ADMUX = 0b00100000;				//select channel IR
     446:	80 e2       	ldi	r24, 0x20	; 32
     448:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= _BV(ADSC);			//start conversion of adc
     44a:	36 9a       	sbi	0x06, 6	; 6
	do {
		adc_wait = ADCSRA;
		adc_wait &= 0b01000000;
	} while(adc_wait != 0);			//wait until the conversion finish
     44c:	36 99       	sbic	0x06, 6	; 6
     44e:	fe cf       	rjmp	.-4      	; 0x44c <IR_update+0x6>
	IR = ADCH;	
     450:	85 b1       	in	r24, 0x05	; 5
     452:	80 93 c3 00 	sts	0x00C3, r24
}
     456:	08 95       	ret

00000458 <lcd_write_4b>:

//write data to lcd through 4 bit communication
//the timing diagram can refer to LCD datasheet
void lcd_write_4b(u08 data, u08 data_type)
{
	LCDBUS_DIR = 0xFF;
     458:	9f ef       	ldi	r25, 0xFF	; 255
     45a:	94 bb       	out	0x14, r25	; 20
	LCDBUS = 0;
     45c:	15 ba       	out	0x15, r1	; 21
	LCD_RS = data_type;
     45e:	61 70       	andi	r22, 0x01	; 1
     460:	62 95       	swap	r22
     462:	66 0f       	add	r22, r22
     464:	60 7e       	andi	r22, 0xE0	; 224
     466:	95 b3       	in	r25, 0x15	; 21
     468:	9f 7d       	andi	r25, 0xDF	; 223
     46a:	96 2b       	or	r25, r22
     46c:	95 bb       	out	0x15, r25	; 21
	LCD_RW = LCD_WRITE;
     46e:	ac 98       	cbi	0x15, 4	; 21
    LCD_EN = LCD_DISABLE;
     470:	95 98       	cbi	0x12, 5	; 18
	LCD_EN = LCD_ENABLE;
     472:	95 9a       	sbi	0x12, 5	; 18
	LCDBUS |= (data&0x0F);	   
     474:	95 b3       	in	r25, 0x15	; 21
     476:	8f 70       	andi	r24, 0x0F	; 15
     478:	89 2b       	or	r24, r25
     47a:	85 bb       	out	0x15, r24	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     47c:	8d e3       	ldi	r24, 0x3D	; 61
     47e:	8a 95       	dec	r24
     480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
	LCD_write_delay();
	LCD_EN = LCD_DISABLE;
     482:	95 98       	cbi	0x12, 5	; 18
}
     484:	08 95       	ret

00000486 <u08tobinary>:
	LCD_data_delay();
}

//convert the unsigned char variable into binary format
void u08tobinary(u08 data)
{
     486:	28 2f       	mov	r18, r24
     488:	e4 ed       	ldi	r30, 0xD4	; 212
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	90 e8       	ldi	r25, 0x80	; 128
	for (i=0;i<8;i++)
	{
	    if((data&bit_pos) !=0)
			lcd_binary_data[i] = '1';
		else
			lcd_binary_data[i] = '0';
     48e:	40 e3       	ldi	r20, 0x30	; 48
{
	u08 i, bit_pos=0x80;
	for (i=0;i<8;i++)
	{
	    if((data&bit_pos) !=0)
			lcd_binary_data[i] = '1';
     490:	31 e3       	ldi	r19, 0x31	; 49
void u08tobinary(u08 data)
{
	u08 i, bit_pos=0x80;
	for (i=0;i<8;i++)
	{
	    if((data&bit_pos) !=0)
     492:	89 2f       	mov	r24, r25
     494:	82 23       	and	r24, r18
     496:	11 f0       	breq	.+4      	; 0x49c <u08tobinary+0x16>
			lcd_binary_data[i] = '1';
     498:	30 83       	st	Z, r19
     49a:	01 c0       	rjmp	.+2      	; 0x49e <u08tobinary+0x18>
		else
			lcd_binary_data[i] = '0';
     49c:	40 83       	st	Z, r20
     49e:	31 96       	adiw	r30, 0x01	; 1

//convert the unsigned char variable into binary format
void u08tobinary(u08 data)
{
	u08 i, bit_pos=0x80;
	for (i=0;i<8;i++)
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	ec 3d       	cpi	r30, 0xDC	; 220
     4a4:	f8 07       	cpc	r31, r24
     4a6:	11 f0       	breq	.+4      	; 0x4ac <u08tobinary+0x26>
	    if((data&bit_pos) !=0)
			lcd_binary_data[i] = '1';
		else
			lcd_binary_data[i] = '0';

		bit_pos=bit_pos>>1;
     4a8:	96 95       	lsr	r25
     4aa:	f3 cf       	rjmp	.-26     	; 0x492 <u08tobinary+0xc>
     4ac:	08 95       	ret

000004ae <u08toStr>:
	}	
}

//convert the unsigned char variable into string format
void u08toStr(u08 value)
{
     4ae:	28 2f       	mov	r18, r24
	lcd_binary_data[0] = value/100+'0';
     4b0:	64 e6       	ldi	r22, 0x64	; 100
     4b2:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
     4b6:	80 5d       	subi	r24, 0xD0	; 208
     4b8:	80 93 d4 00 	sts	0x00D4, r24
	value = value%100;
     4bc:	82 2f       	mov	r24, r18
     4be:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
     4c2:	29 2f       	mov	r18, r25
	lcd_binary_data[1] = value/10+'0';
     4c4:	89 2f       	mov	r24, r25
     4c6:	6a e0       	ldi	r22, 0x0A	; 10
     4c8:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
     4cc:	80 5d       	subi	r24, 0xD0	; 208
     4ce:	80 93 d5 00 	sts	0x00D5, r24
	value = value%10;
	lcd_binary_data[2] = value+'0';
     4d2:	82 2f       	mov	r24, r18
     4d4:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
     4d8:	90 5d       	subi	r25, 0xD0	; 208
     4da:	90 93 d6 00 	sts	0x00D6, r25
	u08 i;
	for(i=3;i<8;i++)
	{
		lcd_binary_data[i] = ' ';
     4de:	80 e2       	ldi	r24, 0x20	; 32
     4e0:	80 93 d7 00 	sts	0x00D7, r24
     4e4:	80 93 d8 00 	sts	0x00D8, r24
     4e8:	80 93 d9 00 	sts	0x00D9, r24
     4ec:	80 93 da 00 	sts	0x00DA, r24
     4f0:	80 93 db 00 	sts	0x00DB, r24
	}
}
     4f4:	08 95       	ret

000004f6 <u16toStr>:

//convert the unsigned int variable into string format
void u16toStr(u16 value)
{
     4f6:	9c 01       	movw	r18, r24
	lcd_binary_data[0] = value/10000+'0';
     4f8:	60 e1       	ldi	r22, 0x10	; 16
     4fa:	77 e2       	ldi	r23, 0x27	; 39
     4fc:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     500:	60 5d       	subi	r22, 0xD0	; 208
     502:	60 93 d4 00 	sts	0x00D4, r22
	value = value%10000;
     506:	c9 01       	movw	r24, r18
     508:	60 e1       	ldi	r22, 0x10	; 16
     50a:	77 e2       	ldi	r23, 0x27	; 39
     50c:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     510:	9c 01       	movw	r18, r24
	lcd_binary_data[1] = value/1000+'0';
     512:	68 ee       	ldi	r22, 0xE8	; 232
     514:	73 e0       	ldi	r23, 0x03	; 3
     516:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     51a:	60 5d       	subi	r22, 0xD0	; 208
     51c:	60 93 d5 00 	sts	0x00D5, r22
	value = value%1000;
     520:	c9 01       	movw	r24, r18
     522:	68 ee       	ldi	r22, 0xE8	; 232
     524:	73 e0       	ldi	r23, 0x03	; 3
     526:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     52a:	9c 01       	movw	r18, r24
	lcd_binary_data[2] = value/100+'0';
     52c:	64 e6       	ldi	r22, 0x64	; 100
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     534:	60 5d       	subi	r22, 0xD0	; 208
     536:	60 93 d6 00 	sts	0x00D6, r22
	value = value%100;
     53a:	c9 01       	movw	r24, r18
     53c:	64 e6       	ldi	r22, 0x64	; 100
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     544:	9c 01       	movw	r18, r24
	lcd_binary_data[3] = value/10+'0';
     546:	6a e0       	ldi	r22, 0x0A	; 10
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     54e:	60 5d       	subi	r22, 0xD0	; 208
     550:	60 93 d7 00 	sts	0x00D7, r22
	value = value%10;
	lcd_binary_data[4] = value+'0';
     554:	c9 01       	movw	r24, r18
     556:	6a e0       	ldi	r22, 0x0A	; 10
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	0e 94 de 13 	call	0x27bc	; 0x27bc <__udivmodhi4>
     55e:	80 5d       	subi	r24, 0xD0	; 208
     560:	80 93 d8 00 	sts	0x00D8, r24
	u08 i;
	for(i=5;i<8;i++)
	{
		lcd_binary_data[i] = ' ';
     564:	80 e2       	ldi	r24, 0x20	; 32
     566:	80 93 d9 00 	sts	0x00D9, r24
     56a:	80 93 da 00 	sts	0x00DA, r24
     56e:	80 93 db 00 	sts	0x00DB, r24
	}
}
     572:	08 95       	ret

00000574 <LCD_write>:
}


//convert the 8 bit data to 4 bit data and send to lcd
void LCD_write(u08 data, u08 data_type)
{
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	18 2f       	mov	r17, r24
     57a:	06 2f       	mov	r16, r22
	Databus_clear();
     57c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Databus_clear>
	lcd_write_4b( ((data&0xF0)>>4), data_type);
     580:	81 2f       	mov	r24, r17
     582:	82 95       	swap	r24
     584:	8f 70       	andi	r24, 0x0F	; 15
     586:	60 2f       	mov	r22, r16
     588:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_write_4b>
	lcd_write_4b( (data&0x0F), data_type);
     58c:	81 2f       	mov	r24, r17
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	60 2f       	mov	r22, r16
     592:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_write_4b>
}
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	08 95       	ret

0000059c <LCD_menu2_line2>:
	LCD_data_delay();
	LCD_write(' ', LCD_DATA); 
}

void LCD_menu2_line2(void)
{
     59c:	1f 93       	push	r17
	LCD_write(LCD_LINE2_HOME, LCD_COMMAND);
     59e:	80 ec       	ldi	r24, 0xC0	; 192
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     5a6:	18 eb       	ldi	r17, 0xB8	; 184
     5a8:	81 2f       	mov	r24, r17
     5aa:	8a 95       	dec	r24
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCD_menu2_line2+0xe>
	LCD_data_delay();
	LCD_write('V', LCD_DATA);  
     5ae:	86 e5       	ldi	r24, 0x56	; 86
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     5b6:	81 2f       	mov	r24, r17
     5b8:	8a 95       	dec	r24
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <LCD_menu2_line2+0x1c>
	LCD_data_delay();
	LCD_write('R', LCD_DATA);
     5bc:	82 e5       	ldi	r24, 0x52	; 82
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     5c4:	81 2f       	mov	r24, r17
     5c6:	8a 95       	dec	r24
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <LCD_menu2_line2+0x2a>
	LCD_data_delay();
	LCD_write('0', LCD_DATA);
     5ca:	80 e3       	ldi	r24, 0x30	; 48
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     5d2:	1a 95       	dec	r17
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_menu2_line2+0x36>
	LCD_data_delay();
	LCD_write(' ', LCD_DATA); 
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
//	LCD_write('R', LCD_DATA);
//	LCD_data_delay();
//	LCD_write(':', LCD_DATA);
//	LCD_data_delay();
//	LCD_write(' ', LCD_DATA); 
}
     5de:	1f 91       	pop	r17
     5e0:	08 95       	ret

000005e2 <LCD_menu2_line1>:
	LCD_data_delay();
	LCD_write(' ', LCD_DATA); 
}

void LCD_menu2_line1(void)
{
     5e2:	1f 93       	push	r17
	LCD_write(LCD_LINE1_HOME, LCD_COMMAND);
     5e4:	80 e8       	ldi	r24, 0x80	; 128
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     5ec:	18 eb       	ldi	r17, 0xB8	; 184
     5ee:	81 2f       	mov	r24, r17
     5f0:	8a 95       	dec	r24
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <LCD_menu2_line1+0xe>
	LCD_data_delay();
	LCD_write('M', LCD_DATA);   
     5f4:	8d e4       	ldi	r24, 0x4D	; 77
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     5fc:	81 2f       	mov	r24, r17
     5fe:	8a 95       	dec	r24
     600:	f1 f7       	brne	.-4      	; 0x5fe <LCD_menu2_line1+0x1c>
	LCD_data_delay();
	LCD_write(':', LCD_DATA); 
     602:	8a e3       	ldi	r24, 0x3A	; 58
     604:	61 e0       	ldi	r22, 0x01	; 1
     606:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     60a:	1a 95       	dec	r17
     60c:	f1 f7       	brne	.-4      	; 0x60a <LCD_menu2_line1+0x28>
	LCD_data_delay();
	LCD_write(' ', LCD_DATA); 
     60e:	80 e2       	ldi	r24, 0x20	; 32
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
}
     616:	1f 91       	pop	r17
     618:	08 95       	ret

0000061a <LCD_menu1_line2>:
	LCD_data_delay();
	LCD_write(' ', LCD_DATA); 
}

void LCD_menu1_line2(void)
{
     61a:	1f 93       	push	r17
	LCD_write(LCD_LINE2_HOME, LCD_COMMAND);
     61c:	80 ec       	ldi	r24, 0xC0	; 192
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     624:	18 eb       	ldi	r17, 0xB8	; 184
     626:	81 2f       	mov	r24, r17
     628:	8a 95       	dec	r24
     62a:	f1 f7       	brne	.-4      	; 0x628 <LCD_menu1_line2+0xe>
	LCD_data_delay();
	LCD_write('L', LCD_DATA);   
     62c:	8c e4       	ldi	r24, 0x4C	; 76
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     634:	81 2f       	mov	r24, r17
     636:	8a 95       	dec	r24
     638:	f1 f7       	brne	.-4      	; 0x636 <LCD_menu1_line2+0x1c>
	LCD_data_delay();
	LCD_write(':', LCD_DATA);
     63a:	8a e3       	ldi	r24, 0x3A	; 58
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     642:	1a 95       	dec	r17
     644:	f1 f7       	brne	.-4      	; 0x642 <LCD_menu1_line2+0x28>
	LCD_data_delay();
	LCD_write(' ', LCD_DATA); 
     646:	80 e2       	ldi	r24, 0x20	; 32
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
}
     64e:	1f 91       	pop	r17
     650:	08 95       	ret

00000652 <LCD_menu1_line1>:
///------------------------------------------------------------------------------------------------------///
///----------------------------     MENU FUNCTIONS   ----------------------------------------------------///
///------------------------------------------------------------------------------------------------------///

void LCD_menu1_line1(void)
{
     652:	1f 93       	push	r17
	LCD_write(LCD_LINE1_HOME, LCD_COMMAND);
     654:	80 e8       	ldi	r24, 0x80	; 128
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     65c:	18 eb       	ldi	r17, 0xB8	; 184
     65e:	81 2f       	mov	r24, r17
     660:	8a 95       	dec	r24
     662:	f1 f7       	brne	.-4      	; 0x660 <LCD_menu1_line1+0xe>
	LCD_data_delay();
	LCD_write('C', LCD_DATA);   
     664:	83 e4       	ldi	r24, 0x43	; 67
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     66c:	81 2f       	mov	r24, r17
     66e:	8a 95       	dec	r24
     670:	f1 f7       	brne	.-4      	; 0x66e <LCD_menu1_line1+0x1c>
	LCD_data_delay();
	LCD_write(':', LCD_DATA); 
     672:	8a e3       	ldi	r24, 0x3A	; 58
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     67a:	1a 95       	dec	r17
     67c:	f1 f7       	brne	.-4      	; 0x67a <LCD_menu1_line1+0x28>
	LCD_data_delay();
	LCD_write(' ', LCD_DATA); 
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
}
     686:	1f 91       	pop	r17
     688:	08 95       	ret

0000068a <LCD_menu_update>:

//update the lcd menu
//this function would be called whenever the button S2 is pressed
void LCD_menu_update(void)
{
	if(LCD_menu_selection == LCD_MENU_PAGE_ONE)					//check whether the lcd menu selection is page one
     68a:	80 91 c0 00 	lds	r24, 0x00C0
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	91 f4       	brne	.+36     	; 0x6b6 <LCD_menu_update+0x2c>
	{
		if(task_schedule == 6)
     692:	80 91 61 00 	lds	r24, 0x0061
     696:	86 30       	cpi	r24, 0x06	; 6
     698:	19 f4       	brne	.+6      	; 0x6a0 <LCD_menu_update+0x16>
		{
			LCD_menu2_line1();								//lcd menu two line 1 is updated
     69a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_menu2_line1>
     69e:	11 c0       	rjmp	.+34     	; 0x6c2 <LCD_menu_update+0x38>
			LCD_menu_update_flag = LCD_MENU_UPDATING;
		}
		else if(task_schedule == 7)
     6a0:	80 91 61 00 	lds	r24, 0x0061
     6a4:	87 30       	cpi	r24, 0x07	; 7
     6a6:	e9 f4       	brne	.+58     	; 0x6e2 <LCD_menu_update+0x58>
		{
			LCD_menu2_line2();								//lcd menu two line 2 is updated
     6a8:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_menu2_line2>
			LCD_menu_selection = LCD_MENU_PAGE_TWO;
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	80 93 c0 00 	sts	0x00C0, r24
			LCD_menu_update_flag = LCD_MENU_UPDATED;
     6b2:	8f e0       	ldi	r24, 0x0F	; 15
     6b4:	07 c0       	rjmp	.+14     	; 0x6c4 <LCD_menu_update+0x3a>
		}
	}
	else														//the lcd menu selection is page two
	{
		if(task_schedule == 6)
     6b6:	80 91 61 00 	lds	r24, 0x0061
     6ba:	86 30       	cpi	r24, 0x06	; 6
     6bc:	31 f4       	brne	.+12     	; 0x6ca <LCD_menu_update+0x40>
		{
			LCD_menu1_line1();								//lcd menu one line 1 is updated
     6be:	0e 94 29 03 	call	0x652	; 0x652 <LCD_menu1_line1>
			LCD_menu_update_flag = LCD_MENU_UPDATING;
     6c2:	80 ef       	ldi	r24, 0xF0	; 240
     6c4:	80 93 a6 00 	sts	0x00A6, r24
     6c8:	08 95       	ret
		}
		else if(task_schedule == 7)
     6ca:	80 91 61 00 	lds	r24, 0x0061
     6ce:	87 30       	cpi	r24, 0x07	; 7
     6d0:	41 f4       	brne	.+16     	; 0x6e2 <LCD_menu_update+0x58>
		{
			LCD_menu1_line2();								//lcd menu one line 2 is updated
     6d2:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_menu1_line2>
			LCD_menu_selection = LCD_MENU_PAGE_ONE;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 c0 00 	sts	0x00C0, r24
			LCD_menu_update_flag = LCD_MENU_UPDATED;
     6dc:	8f e0       	ldi	r24, 0x0F	; 15
     6de:	80 93 a6 00 	sts	0x00A6, r24
     6e2:	08 95       	ret

000006e4 <print_data>:
	}
}

//Display the data to the lcd, for specific start position and end position
void print_data(u08 start_pos, u08 stop_pos)
{
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
	u08 i, number_of_display;
	if(stop_pos >= start_pos)
     6ee:	68 17       	cp	r22, r24
     6f0:	d0 f0       	brcs	.+52     	; 0x726 <print_data+0x42>
		number_of_display = stop_pos - start_pos + 1;
     6f2:	68 1b       	sub	r22, r24
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	8c 01       	movw	r16, r24
     6fa:	0c 53       	subi	r16, 0x3C	; 60
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
	else
		return;
	for(i=0;i<number_of_display;i++)
     6fe:	ec 01       	movw	r28, r24
     700:	c6 0f       	add	r28, r22
     702:	d1 1d       	adc	r29, r1
     704:	cc 53       	subi	r28, 0x3C	; 60
     706:	df 4f       	sbci	r29, 0xFF	; 255
     708:	88 eb       	ldi	r24, 0xB8	; 184
     70a:	f8 2e       	mov	r15, r24
     70c:	09 c0       	rjmp	.+18     	; 0x720 <print_data+0x3c>
	{
		LCD_write(lcd_print_data[start_pos+i], LCD_DATA);
     70e:	f8 01       	movw	r30, r16
     710:	81 91       	ld	r24, Z+
     712:	8f 01       	movw	r16, r30
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     71a:	8f 2d       	mov	r24, r15
     71c:	8a 95       	dec	r24
     71e:	f1 f7       	brne	.-4      	; 0x71c <print_data+0x38>
	u08 i, number_of_display;
	if(stop_pos >= start_pos)
		number_of_display = stop_pos - start_pos + 1;
	else
		return;
	for(i=0;i<number_of_display;i++)
     720:	0c 17       	cp	r16, r28
     722:	1d 07       	cpc	r17, r29
     724:	a1 f7       	brne	.-24     	; 0x70e <print_data+0x2a>
	{
		LCD_write(lcd_print_data[start_pos+i], LCD_DATA);
		LCD_data_delay();
	}
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	08 95       	ret

00000732 <LCD_data_update>:

//update part one of the lcd data
void LCD_data_update(u08 start_pos, u16 data, u08 type)
{
     732:	1f 93       	push	r17
     734:	18 2f       	mov	r17, r24
	if(type == LCD_SHOW_BINARY)
     736:	41 30       	cpi	r20, 0x01	; 1
     738:	21 f4       	brne	.+8      	; 0x742 <LCD_data_update+0x10>
	{
		u08tobinary(data);
     73a:	86 2f       	mov	r24, r22
     73c:	0e 94 43 02 	call	0x486	; 0x486 <u08tobinary>
     740:	0b c0       	rjmp	.+22     	; 0x758 <LCD_data_update+0x26>
	}
	else if(type == LCD_SHOW_U08)
     742:	43 30       	cpi	r20, 0x03	; 3
     744:	21 f4       	brne	.+8      	; 0x74e <LCD_data_update+0x1c>
	{
		u08toStr(data);
     746:	86 2f       	mov	r24, r22
     748:	0e 94 57 02 	call	0x4ae	; 0x4ae <u08toStr>
     74c:	05 c0       	rjmp	.+10     	; 0x758 <LCD_data_update+0x26>
	}
	else if(type == LCD_SHOW_U16)
     74e:	44 30       	cpi	r20, 0x04	; 4
     750:	e9 f4       	brne	.+58     	; 0x78c <LCD_data_update+0x5a>
	{
		u16toStr(data);
     752:	cb 01       	movw	r24, r22
     754:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <u16toStr>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
		return;
	}
	u08 i;
	for(i=0;i<8;i++)
	{
		lcd_print_data[i] = lcd_binary_data[i];
     75c:	f9 01       	movw	r30, r18
     75e:	ec 53       	subi	r30, 0x3C	; 60
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	d9 01       	movw	r26, r18
     764:	ac 52       	subi	r26, 0x2C	; 44
     766:	bf 4f       	sbci	r27, 0xFF	; 255
     768:	8c 91       	ld	r24, X
     76a:	80 83       	st	Z, r24
     76c:	2f 5f       	subi	r18, 0xFF	; 255
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
	else
	{
		return;
	}
	u08 i;
	for(i=0;i<8;i++)
     770:	28 30       	cpi	r18, 0x08	; 8
     772:	31 05       	cpc	r19, r1
     774:	99 f7       	brne	.-26     	; 0x75c <LCD_data_update+0x2a>
	{
		lcd_print_data[i] = lcd_binary_data[i];
	}
	LCD_write(start_pos, LCD_COMMAND);
     776:	81 2f       	mov	r24, r17
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     77e:	88 eb       	ldi	r24, 0xB8	; 184
     780:	8a 95       	dec	r24
     782:	f1 f7       	brne	.-4      	; 0x780 <LCD_data_update+0x4e>
	LCD_data_delay();
	print_data(0, 7);
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	67 e0       	ldi	r22, 0x07	; 7
     788:	0e 94 72 03 	call	0x6e4	; 0x6e4 <print_data>
}
     78c:	1f 91       	pop	r17
     78e:	08 95       	ret

00000790 <LCD_update>:

//update the lcd data, which is periodically called from schedular
void LCD_update(void)
{
	if(LCD_menu_selection == LCD_MENU_PAGE_ONE)					//check whether the lcd menu selection is page one
     790:	80 91 c0 00 	lds	r24, 0x00C0
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	79 f4       	brne	.+30     	; 0x7b6 <LCD_update+0x26>
	{
		if(task_schedule == 4)				//check whether part 1 is updated
     798:	80 91 61 00 	lds	r24, 0x0061
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	19 f4       	brne	.+6      	; 0x7a6 <LCD_update+0x16>
		{
		//	LCD_data_update(0x84, shooted_ball, LCD_SHOW_U08);
		//  LCD_data_update(0x84, sequence, LCD_SHOW_U08);
		//	LCD_data_update(0x84, position_x, LCD_SHOW_U08);	//update line 1 part 1
		//	LCD_data_update(0x84, position_y, LCD_SHOW_U08);
			LCD_data_update(0x84, front_sensor, LCD_SHOW_BINARY);
     7a0:	60 91 aa 00 	lds	r22, 0x00AA
     7a4:	0e c0       	rjmp	.+28     	; 0x7c2 <LCD_update+0x32>
		//	LCD_data_update(0x84, result, LCD_SHOW_U08);

		}
		else if(task_schedule == 5)			//part 2 will be updated after part 1 is updated
     7a6:	80 91 61 00 	lds	r24, 0x0061
     7aa:	85 30       	cpi	r24, 0x05	; 5
     7ac:	d9 f4       	brne	.+54     	; 0x7e4 <LCD_update+0x54>
		{
		//	LCD_data_update(0xC4, Map_set, LCD_SHOW_U08);
		//	LCD_data_update(0xC4, position_x, LCD_SHOW_U08);
			LCD_data_update(0xC4, back_sensor, LCD_SHOW_BINARY);
     7ae:	60 91 a5 00 	lds	r22, 0x00A5
     7b2:	84 ec       	ldi	r24, 0xC4	; 196
     7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <LCD_update+0x34>
		//	LCD_data_update(0xC4, Ball, LCD_SHOW_U08);
		}
	}
	else														//update page two if the lcd menu selection is page two
	{
		if(task_schedule == 4)				//check whether part 1 is updated
     7b6:	80 91 61 00 	lds	r24, 0x0061
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	41 f4       	brne	.+16     	; 0x7ce <LCD_update+0x3e>
		{
		//	LCD_data_update(0x84, position_x, LCD_SHOW_U08);													//update part 1
		//	LCD_data_update(0x84, step, LCD_SHOW_U08);
			LCD_data_update(0x84, middle_sensor, LCD_SHOW_BINARY);
     7be:	60 91 98 00 	lds	r22, 0x0098
     7c2:	84 e8       	ldi	r24, 0x84	; 132
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	0e 94 99 03 	call	0x732	; 0x732 <LCD_data_update>
     7cc:	08 95       	ret
		//	LCD_data_update(0x84, Ball_left, LCD_SHOW_U08);

		}
		else if(task_schedule == 5)			//part 2 will be updated after part 1 is updated
     7ce:	80 91 61 00 	lds	r24, 0x0061
     7d2:	85 30       	cpi	r24, 0x05	; 5
     7d4:	39 f4       	brne	.+14     	; 0x7e4 <LCD_update+0x54>
		{
		//LCD_data_update(0xC4, middle_sensor, LCD_SHOW_BINARY);
		//	LCD_data_update(0xC4, position_y, LCD_SHOW_U08);
		//	LCD_data_update(0xC4, STEP, LCD_SHOW_U08);
			LCD_data_update(0xC4, IR, LCD_SHOW_U08);
     7d6:	60 91 c3 00 	lds	r22, 0x00C3
     7da:	84 ec       	ldi	r24, 0xC4	; 196
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	43 e0       	ldi	r20, 0x03	; 3
     7e0:	0e 94 99 03 	call	0x732	; 0x732 <LCD_data_update>
     7e4:	08 95       	ret

000007e6 <LCD_home>:
///----------------------------     CONTROL FUNCTIONS   -------------------------------------------------///
///------------------------------------------------------------------------------------------------------///

void LCD_home(u08 line)
{
	LCD_write(line, LCD_COMMAND);
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     7ec:	88 eb       	ldi	r24, 0xB8	; 184
     7ee:	8a 95       	dec	r24
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <LCD_home+0x8>
	LCD_data_delay();
}
     7f2:	08 95       	ret

000007f4 <LCD_init>:
}

//initialize the lcd when power up
//the initialize sequence can be refered to the LCD datasheet
void LCD_init(void)
{
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
    Databus_clear();
     7f8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Databus_clear>
	LCDBUS = PORT_OUTPUT;
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	85 bb       	out	0x15, r24	; 21
	delay_ms(50);       				// Wait VCC is rise
     800:	82 e3       	ldi	r24, 0x32	; 50
     802:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	LCD_write(0x00, LCD_COMMAND);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     80e:	1a e7       	ldi	r17, 0x7A	; 122
     810:	81 2f       	mov	r24, r17
     812:	8a 95       	dec	r24
     814:	f1 f7       	brne	.-4      	; 0x812 <LCD_init+0x1e>
	LCD_startup_delay();
	LCD_write(0x00, LCD_COMMAND);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     81e:	81 2f       	mov	r24, r17
     820:	8a 95       	dec	r24
     822:	f1 f7       	brne	.-4      	; 0x820 <LCD_init+0x2c>
	LCD_startup_delay();
	LCD_write(0x00, LCD_COMMAND);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     82c:	81 2f       	mov	r24, r17
     82e:	8a 95       	dec	r24
     830:	f1 f7       	brne	.-4      	; 0x82e <LCD_init+0x3a>
	LCD_startup_delay();
	LCD_write(0x00, LCD_COMMAND);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     83a:	1a 95       	dec	r17
     83c:	f1 f7       	brne	.-4      	; 0x83a <LCD_init+0x46>
	LCD_startup_delay();

	LCD_write(0x28, LCD_COMMAND);       // Function Set
     83e:	88 e2       	ldi	r24, 0x28	; 40
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     846:	00 e0       	ldi	r16, 0x00	; 0
     848:	14 eb       	ldi	r17, 0xB4	; 180
     84a:	c8 01       	movw	r24, r16
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <LCD_init+0x58>
	LCD_com_delay();
	LCD_write(0x0C, LCD_COMMAND);       // Display ON/OFF	
     850:	8c e0       	ldi	r24, 0x0C	; 12
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     858:	c8 01       	movw	r24, r16
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <LCD_init+0x66>
	LCD_com_delay();
	LCD_write(0x06, LCD_COMMAND);       // Entry Mode set
     85e:	86 e0       	ldi	r24, 0x06	; 6
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     866:	c8 01       	movw	r24, r16
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <LCD_init+0x74>
	LCD_com_delay();
	LCD_write(0x01, LCD_COMMAND);       // Display Clear
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_write>
     874:	c8 01       	movw	r24, r16
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <LCD_init+0x82>
	LCD_com_delay();

	LCD_menu_selection = LCD_MENU_PAGE_ONE;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 c0 00 	sts	0x00C0, r24
	LCD_menu1_line1();				//display line 1 of lcd menu 1
     880:	0e 94 29 03 	call	0x652	; 0x652 <LCD_menu1_line1>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     884:	88 eb       	ldi	r24, 0xB8	; 184
     886:	8a 95       	dec	r24
     888:	f1 f7       	brne	.-4      	; 0x886 <LCD_init+0x92>
	_delay_us(30);
	LCD_menu1_line2();				//display line 2 of lcd menu 1
     88a:	0e 94 0d 03 	call	0x61a	; 0x61a <LCD_menu1_line2>
}
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	08 95       	ret

00000894 <Servo_init>:
///------------------------------------------------------------------------------------------------------///
///----------------------------     FUNCTIONS   ---------------------------------------------------------///
///------------------------------------------------------------------------------------------------------///

void Servo_init(void)
{
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
	for(u08 i=0; i<8; i++)
		pwm_duty[i] = PWM_1_5ms;
     898:	20 e8       	ldi	r18, 0x80	; 128
     89a:	3d e0       	ldi	r19, 0x0D	; 13
     89c:	fc 01       	movw	r30, r24
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	e2 55       	subi	r30, 0x52	; 82
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	31 83       	std	Z+1, r19	; 0x01
     8a8:	20 83       	st	Z, r18
     8aa:	01 96       	adiw	r24, 0x01	; 1
///----------------------------     FUNCTIONS   ---------------------------------------------------------///
///------------------------------------------------------------------------------------------------------///

void Servo_init(void)
{
	for(u08 i=0; i<8; i++)
     8ac:	88 30       	cpi	r24, 0x08	; 8
     8ae:	91 05       	cpc	r25, r1
     8b0:	a9 f7       	brne	.-22     	; 0x89c <Servo_init+0x8>
		pwm_duty[i] = PWM_1_5ms;

	rotate_cannon_servo_duty = ROTATE_CANNON_INIT;
     8b2:	2e ed       	ldi	r18, 0xDE	; 222
     8b4:	3d e0       	ldi	r19, 0x0D	; 13
     8b6:	30 93 b5 00 	sts	0x00B5, r19
     8ba:	20 93 b4 00 	sts	0x00B4, r18
	rotate_hands_servo_duty = ROTATE_HANDS_INIT;
     8be:	8e e9       	ldi	r24, 0x9E	; 158
     8c0:	97 e0       	ldi	r25, 0x07	; 7
     8c2:	90 93 b3 00 	sts	0x00B3, r25
     8c6:	80 93 b2 00 	sts	0x00B2, r24
	right_hand_duty = HAND_RIGHT_INIT;
     8ca:	8c e3       	ldi	r24, 0x3C	; 60
     8cc:	9f e0       	ldi	r25, 0x0F	; 15
     8ce:	90 93 b1 00 	sts	0x00B1, r25
     8d2:	80 93 b0 00 	sts	0x00B0, r24
	left_hand_duty = HAND_LEFT_INIT;
     8d6:	88 e2       	ldi	r24, 0x28	; 40
     8d8:	9a e0       	ldi	r25, 0x0A	; 10
     8da:	90 93 af 00 	sts	0x00AF, r25
     8de:	80 93 ae 00 	sts	0x00AE, r24
	cannon_servo_duty = CANNON_STOP;
     8e2:	30 93 b7 00 	sts	0x00B7, r19
     8e6:	20 93 b6 00 	sts	0x00B6, r18
}
     8ea:	08 95       	ret

000008ec <Cannon_shoot_only>:
	delay_ms(100);
}

void Cannon_shoot_only(void)
{
	cannon_servo_duty = CANNON_SHOOT;
     8ec:	82 e5       	ldi	r24, 0x52	; 82
     8ee:	9d e0       	ldi	r25, 0x0D	; 13
     8f0:	90 93 b7 00 	sts	0x00B7, r25
     8f4:	80 93 b6 00 	sts	0x00B6, r24
}
     8f8:	08 95       	ret

000008fa <__vector_7>:
}
///------------------------------------------------------------------------------------------------------///
///-----------------------     3-8 Decoder PWM Generation ISR   -----------------------------------------///
///------------------------------------------------------------------------------------------------------///
ISR(TIMER1_COMPB_vect)
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
	sei();
     908:	78 94       	sei

	PORTB &= 0xE3;				//clear 3 decoder address bits
     90a:	88 b3       	in	r24, 0x18	; 24
     90c:	83 7e       	andi	r24, 0xE3	; 227
     90e:	88 bb       	out	0x18, r24	; 24
	PORTB |= (channel << 2);	//select channel
     910:	98 b3       	in	r25, 0x18	; 24
     912:	80 91 62 00 	lds	r24, 0x0062
     916:	88 0f       	add	r24, r24
     918:	88 0f       	add	r24, r24
     91a:	89 2b       	or	r24, r25
     91c:	88 bb       	out	0x18, r24	; 24

	TIMSK &= 0xF7;				//disable COMPB
     91e:	89 b7       	in	r24, 0x39	; 57
     920:	87 7f       	andi	r24, 0xF7	; 247
     922:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0x30;				//Set OC1B on compare match (Setoutput to high level)
     924:	80 e3       	ldi	r24, 0x30	; 48
     926:	8f bd       	out	0x2f, r24	; 47
	OCR1B = ICR1;
     928:	86 b5       	in	r24, 0x26	; 38
     92a:	97 b5       	in	r25, 0x27	; 39
     92c:	99 bd       	out	0x29, r25	; 41
     92e:	88 bd       	out	0x28, r24	; 40
}
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <Hand_up_special2>:
	delay_ms(250);
}

void Hand_up_special2(void)
{
	rotate_hands_servo_duty = ROTATE_HANDS_UP_SPECIAL_2;
     93e:	8a e1       	ldi	r24, 0x1A	; 26
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	90 93 b3 00 	sts	0x00B3, r25
     946:	80 93 b2 00 	sts	0x00B2, r24
	delay_ms(DELAY_PERIOD);
     94a:	84 e6       	ldi	r24, 0x64	; 100
     94c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     950:	08 95       	ret

00000952 <Hand_up_special>:
	delay_ms(DELAY_PERIOD);
}

void Hand_up_special(void)
{
	rotate_hands_servo_duty = ROTATE_HANDS_UP_SPECIAL;
     952:	86 e4       	ldi	r24, 0x46	; 70
     954:	95 e0       	ldi	r25, 0x05	; 5
     956:	90 93 b3 00 	sts	0x00B3, r25
     95a:	80 93 b2 00 	sts	0x00B2, r24
	delay_ms(DELAY_PERIOD);
     95e:	84 e6       	ldi	r24, 0x64	; 100
     960:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(DELAY_PERIOD);
     964:	84 e6       	ldi	r24, 0x64	; 100
     966:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(250);
     96a:	8a ef       	ldi	r24, 0xFA	; 250
     96c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     970:	08 95       	ret

00000972 <Hand_ready1>:

}

void Hand_ready1(void)			//for temp
{
	rotate_hands_servo_duty = ROTATE_HANDS_READY;
     972:	8a ec       	ldi	r24, 0xCA	; 202
     974:	98 e0       	ldi	r25, 0x08	; 8
     976:	90 93 b3 00 	sts	0x00B3, r25
     97a:	80 93 b2 00 	sts	0x00B2, r24
	delay_ms(DELAY_PERIOD);
     97e:	84 e6       	ldi	r24, 0x64	; 100
     980:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     984:	08 95       	ret

00000986 <Cannon_stop>:
	cannon_servo_duty = CANNON_SHOOT;
}

void Cannon_stop(void)
{
	cannon_servo_duty = CANNON_STOP;
     986:	8e ed       	ldi	r24, 0xDE	; 222
     988:	9d e0       	ldi	r25, 0x0D	; 13
     98a:	90 93 b7 00 	sts	0x00B7, r25
     98e:	80 93 b6 00 	sts	0x00B6, r24
	delay_ms(DELAY_PERIOD);
     992:	84 e6       	ldi	r24, 0x64	; 100
     994:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

}
     998:	08 95       	ret

0000099a <Cannon_move>:
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     99a:	90 93 b5 00 	sts	0x00B5, r25
     99e:	80 93 b4 00 	sts	0x00B4, r24
	delay_ms(8);			///
     9a2:	88 e0       	ldi	r24, 0x08	; 8
     9a4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

}
     9a8:	08 95       	ret

000009aa <Cannon_up_special>:
	rotate_hands_servo_duty = ROTATE_HANDS_UP_SPECIAL_2;
	delay_ms(DELAY_PERIOD);
}

void Cannon_up_special(void)
{
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	ce ed       	ldi	r28, 0xDE	; 222
     9b0:	dd e0       	ldi	r29, 0x0D	; 13
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     9b2:	d0 93 b5 00 	sts	0x00B5, r29
     9b6:	c0 93 b4 00 	sts	0x00B4, r28
	delay_ms(8);			///
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}

void Cannon_up_special(void)
{
	u16 i;
	for(i = ROTATE_CANNON_INIT; i > (ROTATE_CANNON_SPECIAL - 10); i-= 10)
     9c0:	2a 97       	sbiw	r28, 0x0a	; 10
     9c2:	8c e0       	ldi	r24, 0x0C	; 12
     9c4:	c4 34       	cpi	r28, 0x44	; 68
     9c6:	d8 07       	cpc	r29, r24
     9c8:	a1 f7       	brne	.-24     	; 0x9b2 <Cannon_up_special+0x8>
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     9ca:	8e e4       	ldi	r24, 0x4E	; 78
     9cc:	9c e0       	ldi	r25, 0x0C	; 12
     9ce:	90 93 b5 00 	sts	0x00B5, r25
     9d2:	80 93 b4 00 	sts	0x00B4, r24
	delay_ms(8);			///
     9d6:	88 e0       	ldi	r24, 0x08	; 8
     9d8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	for(i = ROTATE_CANNON_INIT; i > (ROTATE_CANNON_SPECIAL - 10); i-= 10)
	{
		Cannon_move(i);
	}
	Cannon_move(ROTATE_CANNON_SPECIAL);
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <Cannon_ready>:

	
}	

void Cannon_ready(void)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	ce ed       	ldi	r28, 0xDE	; 222
     9e8:	dd e0       	ldi	r29, 0x0D	; 13
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     9ea:	d0 93 b5 00 	sts	0x00B5, r29
     9ee:	c0 93 b4 00 	sts	0x00B4, r28
	delay_ms(8);			///
     9f2:	88 e0       	ldi	r24, 0x08	; 8
     9f4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

void Cannon_ready(void)
{

u16 i;
	for(i = ROTATE_CANNON_INIT; i > (ROTATE_CANNON_SHOOT - 10); i-= 10)
     9f8:	2a 97       	sbiw	r28, 0x0a	; 10
     9fa:	8b e0       	ldi	r24, 0x0B	; 11
     9fc:	ce 30       	cpi	r28, 0x0E	; 14
     9fe:	d8 07       	cpc	r29, r24
     a00:	a1 f7       	brne	.-24     	; 0x9ea <Cannon_ready+0x8>
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     a02:	88 e1       	ldi	r24, 0x18	; 24
     a04:	9b e0       	ldi	r25, 0x0B	; 11
     a06:	90 93 b5 00 	sts	0x00B5, r25
     a0a:	80 93 b4 00 	sts	0x00B4, r24
	delay_ms(8);			///
     a0e:	88 e0       	ldi	r24, 0x08	; 8
     a10:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	{
		Cannon_move(i);
	}
	Cannon_move(ROTATE_CANNON_SHOOT);

}
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <Cannon_down_slow>:
	Cannon_move(ROTATE_CANNON_INIT);
	delay_ms(50);
}

void Cannon_down_slow(void)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	c8 e1       	ldi	r28, 0x18	; 24
     a20:	db e0       	ldi	r29, 0x0B	; 11
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     a22:	d0 93 b5 00 	sts	0x00B5, r29
     a26:	c0 93 b4 00 	sts	0x00B4, r28
	delay_ms(8);			///
     a2a:	88 e0       	ldi	r24, 0x08	; 8
     a2c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

void Cannon_down_slow(void)
{

	u16 i;
	for(i = ROTATE_CANNON_SHOOT; i < (ROTATE_CANNON_INIT - 40); i+= 40)
     a30:	a8 96       	adiw	r28, 0x28	; 40
     a32:	8d e0       	ldi	r24, 0x0D	; 13
     a34:	c0 3c       	cpi	r28, 0xC0	; 192
     a36:	d8 07       	cpc	r29, r24
     a38:	a1 f7       	brne	.-24     	; 0xa22 <Cannon_down_slow+0x8>
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     a3a:	8e ed       	ldi	r24, 0xDE	; 222
     a3c:	9d e0       	ldi	r25, 0x0D	; 13
     a3e:	90 93 b5 00 	sts	0x00B5, r25
     a42:	80 93 b4 00 	sts	0x00B4, r24
	delay_ms(8);			///
     a46:	88 e0       	ldi	r24, 0x08	; 8
     a48:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
		Cannon_move(i);
	}
	Cannon_move(ROTATE_CANNON_INIT);

	
}	
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <Cannon_down>:
}

//control gun shooting angle
void Cannon_move(u16 position)
{
	rotate_cannon_servo_duty = position;
     a52:	8e ed       	ldi	r24, 0xDE	; 222
     a54:	9d e0       	ldi	r25, 0x0D	; 13
     a56:	90 93 b5 00 	sts	0x00B5, r25
     a5a:	80 93 b4 00 	sts	0x00B4, r24
	delay_ms(8);			///
     a5e:	88 e0       	ldi	r24, 0x08	; 8
     a60:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

void Cannon_down(void)
{

	Cannon_move(ROTATE_CANNON_INIT);
	delay_ms(50);
     a64:	82 e3       	ldi	r24, 0x32	; 50
     a66:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     a6a:	08 95       	ret

00000a6c <Hand_drop>:

}

void Hand_drop(void)
{
	rotate_hands_servo_duty = ROTATE_HANDS_DROP;
     a6c:	8e e9       	ldi	r24, 0x9E	; 158
     a6e:	97 e0       	ldi	r25, 0x07	; 7
     a70:	90 93 b3 00 	sts	0x00B3, r25
     a74:	80 93 b2 00 	sts	0x00B2, r24
  	delay_ms(DELAY_PERIOD);
     a78:	84 e6       	ldi	r24, 0x64	; 100
     a7a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     a7e:	08 95       	ret

00000a80 <Hand_down>:
}

//control the Rotate Clip Servo down
void Hand_down(void)
{
	rotate_hands_servo_duty = ROTATE_HANDS_DOWN;
     a80:	88 e1       	ldi	r24, 0x18	; 24
     a82:	90 e1       	ldi	r25, 0x10	; 16
     a84:	90 93 b3 00 	sts	0x00B3, r25
     a88:	80 93 b2 00 	sts	0x00B2, r24
	delay_ms(DELAY_PERIOD);
     a8c:	84 e6       	ldi	r24, 0x64	; 100
     a8e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(100);
     a92:	84 e6       	ldi	r24, 0x64	; 100
     a94:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

}
     a98:	08 95       	ret

00000a9a <Hand_up_2>:
	rotate_hands_servo_duty = ROTATE_HANDS_UP;
}
//control the Rotate Clip Servo up so that it can put the ball
void Hand_up_2(void)
{
  rotate_hands_servo_duty = ROTATE_HANDS_UP_2;
     a9a:	84 e8       	ldi	r24, 0x84	; 132
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	90 93 b3 00 	sts	0x00B3, r25
     aa2:	80 93 b2 00 	sts	0x00B2, r24
  	delay_ms(DELAY_PERIOD);
     aa6:	84 e6       	ldi	r24, 0x64	; 100
     aa8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(100);
     aac:	84 e6       	ldi	r24, 0x64	; 100
     aae:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     ab2:	08 95       	ret

00000ab4 <Hand_up_slow>:
	delay_ms(DELAY_PERIOD);

}

void Hand_up_slow(void)
{
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ca ec       	ldi	r28, 0xCA	; 202
     aba:	d8 e0       	ldi	r29, 0x08	; 8
	u16 i;
	for(i = ROTATE_HANDS_READY; i > (ROTATE_HANDS_UP + 20); i-= 20)
	{
		rotate_hands_servo_duty = i;
     abc:	d0 93 b3 00 	sts	0x00B3, r29
     ac0:	c0 93 b2 00 	sts	0x00B2, r28
		delay_ms(8);
     ac4:	88 e0       	ldi	r24, 0x08	; 8
     ac6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}

void Hand_up_slow(void)
{
	u16 i;
	for(i = ROTATE_HANDS_READY; i > (ROTATE_HANDS_UP + 20); i-= 20)
     aca:	64 97       	sbiw	r28, 0x14	; 20
     acc:	86 e0       	ldi	r24, 0x06	; 6
     ace:	c6 38       	cpi	r28, 0x86	; 134
     ad0:	d8 07       	cpc	r29, r24
     ad2:	a1 f7       	brne	.-24     	; 0xabc <Hand_up_slow+0x8>
	{
		rotate_hands_servo_duty = i;
		delay_ms(8);
	}
	rotate_hands_servo_duty = ROTATE_HANDS_UP;
     ad4:	82 e7       	ldi	r24, 0x72	; 114
     ad6:	96 e0       	ldi	r25, 0x06	; 6
     ad8:	90 93 b3 00 	sts	0x00B3, r25
     adc:	80 93 b2 00 	sts	0x00B2, r24
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <Hand_up>:
}

//control the Rotate Clip Servo up
void Hand_up(void)
{
	rotate_hands_servo_duty = ROTATE_HANDS_UP;
     ae6:	82 e7       	ldi	r24, 0x72	; 114
     ae8:	96 e0       	ldi	r25, 0x06	; 6
     aea:	90 93 b3 00 	sts	0x00B3, r25
     aee:	80 93 b2 00 	sts	0x00B2, r24
	delay_ms(DELAY_PERIOD);
     af2:	84 e6       	ldi	r24, 0x64	; 100
     af4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(DELAY_PERIOD);
     af8:	84 e6       	ldi	r24, 0x64	; 100
     afa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

}
     afe:	08 95       	ret

00000b00 <Hand_pre_open>:

}

void Hand_pre_open(void)
{
	right_hand_duty = HAND_RIGHT_PRE_OPEN;
     b00:	84 e5       	ldi	r24, 0x54	; 84
     b02:	9b e0       	ldi	r25, 0x0B	; 11
     b04:	90 93 b1 00 	sts	0x00B1, r25
     b08:	80 93 b0 00 	sts	0x00B0, r24
	left_hand_duty = HAND_LEFT_PRE_OPEN;
     b0c:	8c ea       	ldi	r24, 0xAC	; 172
     b0e:	9d e0       	ldi	r25, 0x0D	; 13
     b10:	90 93 af 00 	sts	0x00AF, r25
     b14:	80 93 ae 00 	sts	0x00AE, r24
	delay_ms(DELAY_PERIOD);
     b18:	84 e6       	ldi	r24, 0x64	; 100
     b1a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     b1e:	08 95       	ret

00000b20 <Hand_open>:
}

//control the Clip open
void Hand_open(void)
{
	right_hand_duty = HAND_RIGHT_OPEN;
     b20:	8c e3       	ldi	r24, 0x3C	; 60
     b22:	9f e0       	ldi	r25, 0x0F	; 15
     b24:	90 93 b1 00 	sts	0x00B1, r25
     b28:	80 93 b0 00 	sts	0x00B0, r24
	left_hand_duty = HAND_LEFT_OPEN;
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	9a e0       	ldi	r25, 0x0A	; 10
     b30:	90 93 af 00 	sts	0x00AF, r25
     b34:	80 93 ae 00 	sts	0x00AE, r24
	delay_ms(DELAY_PERIOD);
     b38:	84 e6       	ldi	r24, 0x64	; 100
     b3a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

}
     b3e:	08 95       	ret

00000b40 <Hand_close>:


//control the Clip close
void Hand_close(void)
{
	right_hand_duty = HAND_RIGHT_CLOSE;
     b40:	80 ef       	ldi	r24, 0xF0	; 240
     b42:	9a e0       	ldi	r25, 0x0A	; 10
     b44:	90 93 b1 00 	sts	0x00B1, r25
     b48:	80 93 b0 00 	sts	0x00B0, r24
	left_hand_duty = HAND_LEFT_CLOSE;
     b4c:	84 e2       	ldi	r24, 0x24	; 36
     b4e:	9e e0       	ldi	r25, 0x0E	; 14
     b50:	90 93 af 00 	sts	0x00AF, r25
     b54:	80 93 ae 00 	sts	0x00AE, r24
	delay_ms(DELAY_PERIOD);
     b58:	84 e6       	ldi	r24, 0x64	; 100
     b5a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

}
     b5e:	08 95       	ret

00000b60 <Cannon_shoot>:
}

//control gun shoot or not
void Cannon_shoot(void)
{
	cannon_servo_duty = CANNON_SHOOT;
     b60:	82 e5       	ldi	r24, 0x52	; 82
     b62:	9d e0       	ldi	r25, 0x0D	; 13
     b64:	90 93 b7 00 	sts	0x00B7, r25
     b68:	80 93 b6 00 	sts	0x00B6, r24
	delay_250ms(4);
     b6c:	84 e0       	ldi	r24, 0x04	; 4
     b6e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <delay_250ms>
	delay_ms(100);
     b72:	84 e6       	ldi	r24, 0x64	; 100
     b74:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
}
     b78:	08 95       	ret

00000b7a <__vector_5>:
volatile u08 task_schedule = 0;
volatile u08 channel = 0;

//This is the schedular of the RoboGolfer, which will be triggered for every 2ms whenever the timer1 is overflowed
ISR (TIMER1_CAPT_vect)
{
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
	TIFR |= 0x08;				
     b9c:	88 b7       	in	r24, 0x38	; 56
     b9e:	88 60       	ori	r24, 0x08	; 8
     ba0:	88 bf       	out	0x38, r24	; 56
	TCCR1A = 0x20;				// 0b00100000 Clear OC1B on compare match (Setoutput to low level)
     ba2:	80 e2       	ldi	r24, 0x20	; 32
     ba4:	8f bd       	out	0x2f, r24	; 47
	OCR1B = pwm_duty[channel];	//select channel for servo PWM
     ba6:	e0 91 62 00 	lds	r30, 0x0062
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	e2 55       	subi	r30, 0x52	; 82
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	99 bd       	out	0x29, r25	; 41
     bba:	88 bd       	out	0x28, r24	; 40
	TIMSK |= 0x08;				//enable COMPB
     bbc:	89 b7       	in	r24, 0x39	; 57
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	89 bf       	out	0x39, r24	; 57

	sei();						//enable the global interrupt for the timer1 compare match interrupt
     bc2:	78 94       	sei

	if(++channel >= 8)
     bc4:	80 91 62 00 	lds	r24, 0x0062
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 62 00 	sts	0x0062, r24
     bce:	80 91 62 00 	lds	r24, 0x0062
     bd2:	88 30       	cpi	r24, 0x08	; 8
     bd4:	10 f0       	brcs	.+4      	; 0xbda <__vector_5+0x60>
		channel = 0;
     bd6:	10 92 62 00 	sts	0x0062, r1
	Sensor_front_update();
     bda:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Sensor_front_update>
	Sensor_back_update();
     bde:	0e 94 cd 01 	call	0x39a	; 0x39a <Sensor_back_update>
	Sensor_middle_update();
     be2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Sensor_middle_update>
	switch(++task_schedule)
     be6:	80 91 61 00 	lds	r24, 0x0061
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	80 93 61 00 	sts	0x0061, r24
     bf0:	80 91 61 00 	lds	r24, 0x0061
     bf4:	84 30       	cpi	r24, 0x04	; 4
     bf6:	99 f0       	breq	.+38     	; 0xc1e <__vector_5+0xa4>
     bf8:	85 30       	cpi	r24, 0x05	; 5
     bfa:	28 f4       	brcc	.+10     	; 0xc06 <__vector_5+0x8c>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	61 f0       	breq	.+24     	; 0xc18 <__vector_5+0x9e>
     c00:	81 30       	cpi	r24, 0x01	; 1
     c02:	18 f1       	brcs	.+70     	; 0xc4a <__vector_5+0xd0>
     c04:	24 c0       	rjmp	.+72     	; 0xc4e <__vector_5+0xd4>
     c06:	86 30       	cpi	r24, 0x06	; 6
     c08:	69 f0       	breq	.+26     	; 0xc24 <__vector_5+0xaa>
     c0a:	86 30       	cpi	r24, 0x06	; 6
     c0c:	40 f0       	brcs	.+16     	; 0xc1e <__vector_5+0xa4>
     c0e:	87 30       	cpi	r24, 0x07	; 7
     c10:	99 f0       	breq	.+38     	; 0xc38 <__vector_5+0xbe>
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	d1 f4       	brne	.+52     	; 0xc4a <__vector_5+0xd0>
     c16:	17 c0       	rjmp	.+46     	; 0xc46 <__vector_5+0xcc>
	{
	case 1:					//update front floor sensor, and switch for every 16ms
		IR_update();
     c18:	0e 94 23 02 	call	0x446	; 0x446 <IR_update>
     c1c:	18 c0       	rjmp	.+48     	; 0xc4e <__vector_5+0xd4>
	case 4:
		LCD_update();		//update the first part of lcd data for every 16ms	
		break;

	case 5:					//update the remaining part of lcd data for every 16ms
		LCD_update();
     c1e:	0e 94 c8 03 	call	0x790	; 0x790 <LCD_update>
     c22:	15 c0       	rjmp	.+42     	; 0xc4e <__vector_5+0xd4>
		break;
	
	case 6:
		if(!SW_IN_2)
     c24:	b6 99       	sbic	0x16, 6	; 22
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <__vector_5+0xb8>
		{
			if(LCD_menu_update_flag == LCD_MENU_NOTUPDATE)		//check the update status of the lcd menu, so the lcd menu is updated once whenever button S5 pressed once
     c28:	80 91 a6 00 	lds	r24, 0x00A6
     c2c:	88 23       	and	r24, r24
     c2e:	79 f4       	brne	.+30     	; 0xc4e <__vector_5+0xd4>
     c30:	07 c0       	rjmp	.+14     	; 0xc40 <__vector_5+0xc6>
				LCD_menu_update();
			}
		}
		else
		{
			LCD_menu_update_flag = LCD_MENU_NOTUPDATE;			//reset the update status after the update is finished
     c32:	10 92 a6 00 	sts	0x00A6, r1
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <__vector_5+0xd4>
		}
		break;

	case 7:														//if button S3 is pressed, the lcd menu will change between two pages, this will update the first part of lcd menu
		if(LCD_menu_update_flag == LCD_MENU_UPDATING)
     c38:	80 91 a6 00 	lds	r24, 0x00A6
     c3c:	80 3f       	cpi	r24, 0xF0	; 240
     c3e:	39 f4       	brne	.+14     	; 0xc4e <__vector_5+0xd4>
		{
			LCD_menu_update();
     c40:	0e 94 45 03 	call	0x68a	; 0x68a <LCD_menu_update>
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <__vector_5+0xd4>
		}
		break;
	case 8:
		update_switch();	//update joypad switch for every 16ms
     c46:	0e 94 38 06 	call	0xc70	; 0xc70 <update_switch>

	default:
		task_schedule = 0;
     c4a:	10 92 61 00 	sts	0x0061, r1
		break;	
	}
}
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <update_switch>:
	u08 pattern_high = 0x80;
	u08 pattern_low = 0x08;

	u08 select_channel = 0;

	joypad_switch = 0;
     c70:	10 92 a2 00 	sts	0x00A2, r1
	
	Databus_clear();
     c74:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Databus_clear>
	DATA_DIR = PORT_OUTPUT;
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	84 bb       	out	0x14, r24	; 20
     c7c:	30 e8       	ldi	r19, 0x80	; 128
     c7e:	28 e0       	ldi	r18, 0x08	; 8
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	46 e0       	ldi	r20, 0x06	; 6

	while(select_channel < 4)
	{
		D_Flip_Flop &= JOYPAD_MASK;
     c84:	80 91 63 00 	lds	r24, 0x0063
     c88:	8c 7f       	andi	r24, 0xFC	; 252
     c8a:	80 93 63 00 	sts	0x0063, r24
		D_Flip_Flop |= select_channel;	//select the channel of multiplexer
     c8e:	80 91 63 00 	lds	r24, 0x0063
     c92:	89 2b       	or	r24, r25
     c94:	80 93 63 00 	sts	0x0063, r24
		
		JOYPAD_SELECT = D_Flip_Flop;
     c98:	80 91 63 00 	lds	r24, 0x0063
     c9c:	85 bb       	out	0x15, r24	; 21
		cli();							// avoid global interrupt
     c9e:	f8 94       	cli
		JOYPAD_EN = 1;
     ca0:	97 9a       	sbi	0x12, 7	; 18
		JOYPAD_EN = 0;					//trigger the flip flop (74HC574)
     ca2:	97 98       	cbi	0x12, 7	; 18
		sei();							// re-enable global interrupt
     ca4:	78 94       	sei
     ca6:	84 2f       	mov	r24, r20
     ca8:	8a 95       	dec	r24
     caa:	f1 f7       	brne	.-4      	; 0xca8 <update_switch+0x38>
		
		_delay_us(1);

		if(JOYPAD_IN_1)
     cac:	cc 9b       	sbis	0x19, 4	; 25
     cae:	05 c0       	rjmp	.+10     	; 0xcba <update_switch+0x4a>
			joypad_switch |= pattern_high;
     cb0:	80 91 a2 00 	lds	r24, 0x00A2
     cb4:	83 2b       	or	r24, r19
     cb6:	80 93 a2 00 	sts	0x00A2, r24
		pattern_high >>= 1;
		
		if(JOYPAD_IN_2)
     cba:	cd 9b       	sbis	0x19, 5	; 25
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <update_switch+0x58>
			joypad_switch |= pattern_low;
     cbe:	80 91 a2 00 	lds	r24, 0x00A2
     cc2:	82 2b       	or	r24, r18
     cc4:	80 93 a2 00 	sts	0x00A2, r24
		pattern_low >>=1;

		select_channel++;
     cc8:	9f 5f       	subi	r25, 0xFF	; 255
	joypad_switch = 0;
	
	Databus_clear();
	DATA_DIR = PORT_OUTPUT;

	while(select_channel < 4)
     cca:	94 30       	cpi	r25, 0x04	; 4
     ccc:	19 f0       	breq	.+6      	; 0xcd4 <update_switch+0x64>
		
		_delay_us(1);

		if(JOYPAD_IN_1)
			joypad_switch |= pattern_high;
		pattern_high >>= 1;
     cce:	36 95       	lsr	r19
		
		if(JOYPAD_IN_2)
			joypad_switch |= pattern_low;
		pattern_low >>=1;
     cd0:	26 95       	lsr	r18
     cd2:	d8 cf       	rjmp	.-80     	; 0xc84 <update_switch+0x14>
     cd4:	08 95       	ret

00000cd6 <get_switch>:
volatile u08 D_Flip_Flop = 0;


//update selected switches on joypad
void get_switch(u08 channel)
{
     cd6:	1f 93       	push	r17
     cd8:	18 2f       	mov	r17, r24
	u08 pattern = (0x11<<channel);
	u08 pattern_high = (0x10<<channel);
	u08 pattern_low = (0x01<<channel);

	joypad_switch &= (~pattern);
     cda:	20 91 a2 00 	lds	r18, 0x00A2
     cde:	81 e1       	ldi	r24, 0x11	; 17
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	01 2e       	mov	r0, r17
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <get_switch+0x14>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <get_switch+0x10>
     cee:	80 95       	com	r24
     cf0:	82 23       	and	r24, r18
     cf2:	80 93 a2 00 	sts	0x00A2, r24

	D_Flip_Flop &= JOYPAD_MASK;
     cf6:	80 91 63 00 	lds	r24, 0x0063
     cfa:	8c 7f       	andi	r24, 0xFC	; 252
     cfc:	80 93 63 00 	sts	0x0063, r24
	D_Flip_Flop |= channel;
     d00:	80 91 63 00 	lds	r24, 0x0063
     d04:	81 2b       	or	r24, r17
     d06:	80 93 63 00 	sts	0x0063, r24

	Databus_clear();
     d0a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Databus_clear>
	DATA_DIR = PORT_OUTPUT;
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	84 bb       	out	0x14, r24	; 20

	JOYPAD_SELECT = D_Flip_Flop;
     d12:	80 91 63 00 	lds	r24, 0x0063
     d16:	85 bb       	out	0x15, r24	; 21
	cli();
     d18:	f8 94       	cli
	JOYPAD_EN = 1;
     d1a:	97 9a       	sbi	0x12, 7	; 18
	JOYPAD_EN = 0;
     d1c:	97 98       	cbi	0x12, 7	; 18
	sei();
     d1e:	78 94       	sei

	if(JOYPAD_IN_1)
     d20:	cc 9b       	sbis	0x19, 4	; 25
     d22:	0d c0       	rjmp	.+26     	; 0xd3e <get_switch+0x68>
		joypad_switch |= pattern_high;
     d24:	20 91 a2 00 	lds	r18, 0x00A2
     d28:	80 e1       	ldi	r24, 0x10	; 16
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	01 2e       	mov	r0, r17
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <get_switch+0x5e>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <get_switch+0x5a>
     d38:	28 2b       	or	r18, r24
     d3a:	20 93 a2 00 	sts	0x00A2, r18

	if(JOYPAD_IN_2)
     d3e:	cd 9b       	sbis	0x19, 5	; 25
     d40:	0c c0       	rjmp	.+24     	; 0xd5a <get_switch+0x84>
		joypad_switch |= pattern_low;
     d42:	20 91 a2 00 	lds	r18, 0x00A2
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <get_switch+0x7a>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	1a 95       	dec	r17
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <get_switch+0x76>
     d54:	28 2b       	or	r18, r24
     d56:	20 93 a2 00 	sts	0x00A2, r18
}
     d5a:	1f 91       	pop	r17
     d5c:	08 95       	ret

00000d5e <logic_part2>:

	//over
}

void logic_part2(void)		//
{
     d5e:	1f 93       	push	r17
	
//part2
	//catch the balls in boarder.
	sequence = 180;//////////////////////
     d60:	84 eb       	ldi	r24, 0xB4	; 180
     d62:	80 93 64 00 	sts	0x0064, r24
	Golfer_turn_left_special();
     d66:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <Golfer_turn_left_special>
	direction = WEST;
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	80 93 9d 00 	sts	0x009D, r24
	Map_setgolfer(4, 4);
     d70:	84 e0       	ldi	r24, 0x04	; 4
     d72:	64 e0       	ldi	r22, 0x04	; 4
     d74:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	step = position_x - 1;
     d78:	40 91 97 00 	lds	r20, 0x0097
     d7c:	41 50       	subi	r20, 0x01	; 1
     d7e:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(SIDE_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     d82:	89 e0       	ldi	r24, 0x09	; 9
     d84:	6a e0       	ldi	r22, 0x0A	; 10
     d86:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
     d8a:	80 93 ac 00 	sts	0x00AC, r24

	if((position_x == 1 || position_x == 3) && result/10 == SIDE_OBJECT_STOP)			///with line
     d8e:	90 91 97 00 	lds	r25, 0x0097
     d92:	91 30       	cpi	r25, 0x01	; 1
     d94:	11 f0       	breq	.+4      	; 0xd9a <logic_part2+0x3c>
     d96:	93 30       	cpi	r25, 0x03	; 3
     d98:	e1 f4       	brne	.+56     	; 0xdd2 <logic_part2+0x74>
     d9a:	8e 56       	subi	r24, 0x6E	; 110
     d9c:	8a 30       	cpi	r24, 0x0A	; 10
     d9e:	c8 f4       	brcc	.+50     	; 0xdd2 <logic_part2+0x74>
	{
		sequence = 181;//////////////////////
     da0:	85 eb       	ldi	r24, 0xB5	; 181
     da2:	80 93 64 00 	sts	0x0064, r24
		Golfer_turn_right();
     da6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Golfer_turn_right>
		line_tracking(FRONT_OBJECT_MODE, SPEED_DENOMINATOR_MID, 1);
     daa:	88 e0       	ldi	r24, 0x08	; 8
     dac:	6a e0       	ldi	r22, 0x0A	; 10
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_pickup_special();
     db4:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
		line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,1);
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	6a e0       	ldi	r22, 0x0A	; 10
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
		position_x--;
     dc2:	80 91 97 00 	lds	r24, 0x0097
     dc6:	81 50       	subi	r24, 0x01	; 1
     dc8:	80 93 97 00 	sts	0x0097, r24
		direction = NORTH;
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 9d 00 	sts	0x009D, r24
	}else{											//without line
		; //keep going and do nothing
	}
	
	if(position_x == 3)
     dd2:	40 91 97 00 	lds	r20, 0x0097
     dd6:	43 30       	cpi	r20, 0x03	; 3
     dd8:	31 f4       	brne	.+12     	; 0xde6 <logic_part2+0x88>
	{
		Golfer_turnto(WEST);
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = position_x - 1;
     de0:	40 91 97 00 	lds	r20, 0x0097
     de4:	04 c0       	rjmp	.+8      	; 0xdee <logic_part2+0x90>
		result = line_tracking(SIDE_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
	}else if(direction != NORTH){
     de6:	80 91 9d 00 	lds	r24, 0x009D
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	41 f0       	breq	.+16     	; 0xdfe <logic_part2+0xa0>
		step = position_x - 1;
     dee:	41 50       	subi	r20, 0x01	; 1
     df0:	40 93 ad 00 	sts	0x00AD, r20
		result = line_tracking(SIDE_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     df4:	89 e0       	ldi	r24, 0x09	; 9
     df6:	6a e0       	ldi	r22, 0x0A	; 10
     df8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <logic_part2+0xa2>
	}else{
		result = 10*STEP_STOP;
     dfe:	88 e7       	ldi	r24, 0x78	; 120
     e00:	80 93 ac 00 	sts	0x00AC, r24
	}
	

	if(position_x == 1 && result/10 == SIDE_OBJECT_STOP)			///with line
     e04:	10 91 97 00 	lds	r17, 0x0097
     e08:	11 30       	cpi	r17, 0x01	; 1
     e0a:	f9 f4       	brne	.+62     	; 0xe4a <logic_part2+0xec>
     e0c:	80 91 ac 00 	lds	r24, 0x00AC
     e10:	8e 56       	subi	r24, 0x6E	; 110
     e12:	8a 30       	cpi	r24, 0x0A	; 10
     e14:	d0 f4       	brcc	.+52     	; 0xe4a <logic_part2+0xec>
	{
		sequence = 182;//////////////////////
     e16:	86 eb       	ldi	r24, 0xB6	; 182
     e18:	80 93 64 00 	sts	0x0064, r24
		Golfer_turn_right();
     e1c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Golfer_turn_right>
		line_tracking(FRONT_OBJECT_MODE, SPEED_DENOMINATOR_MID, 1);
     e20:	88 e0       	ldi	r24, 0x08	; 8
     e22:	6a e0       	ldi	r22, 0x0A	; 10
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_pickup_special();
     e2a:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
		step = 1;
     e2e:	10 93 ad 00 	sts	0x00AD, r17
		line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,step);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	6a e0       	ldi	r22, 0x0A	; 10
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
		position_x--;
     e3c:	80 91 97 00 	lds	r24, 0x0097
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	80 93 97 00 	sts	0x0097, r24
		direction = NORTH;
     e46:	10 93 9d 00 	sts	0x009D, r17
	}else{											//without line
		; //keep going and do nothing
	}


	step = position_x - 1;
     e4a:	40 91 97 00 	lds	r20, 0x0097
     e4e:	41 50       	subi	r20, 0x01	; 1
     e50:	40 93 ad 00 	sts	0x00AD, r20
	line_tracking(SIDE_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     e54:	89 e0       	ldi	r24, 0x09	; 9
     e56:	6a e0       	ldi	r22, 0x0A	; 10
     e58:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>


	if(direction == NORTH)
     e5c:	80 91 9d 00 	lds	r24, 0x009D
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	41 f4       	brne	.+16     	; 0xe74 <logic_part2+0x116>
	{
		step = 1;
     e64:	80 93 ad 00 	sts	0x00AD, r24
		line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,step);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	6a e0       	ldi	r22, 0x0A	; 10
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
     e72:	0b c0       	rjmp	.+22     	; 0xe8a <logic_part2+0x12c>
	}else{	
		Golfer_turnto(SOUTH);		// (1, 4)
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	80 93 ad 00 	sts	0x00AD, r24
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     e80:	88 e0       	ldi	r24, 0x08	; 8
     e82:	6a e0       	ldi	r22, 0x0A	; 10
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	}


	sequence = 183;///////////////
     e8a:	87 eb       	ldi	r24, 0xB7	; 183
     e8c:	80 93 64 00 	sts	0x0064, r24
	Map[0][5] = 2 - (Map[1][5] + Map[2][5] + Map[3][5]);
     e90:	80 91 71 00 	lds	r24, 0x0071
     e94:	81 95       	neg	r24
     e96:	90 91 78 00 	lds	r25, 0x0078
     e9a:	89 1b       	sub	r24, r25
     e9c:	8e 5f       	subi	r24, 0xFE	; 254
     e9e:	90 91 7f 00 	lds	r25, 0x007F
     ea2:	89 1b       	sub	r24, r25
     ea4:	80 93 6a 00 	sts	0x006A, r24
	Map_setgolfer(1,3);	
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	63 e0       	ldi	r22, 0x03	; 3
     eac:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>

	if(Map[2][5] > 0)
     eb0:	80 91 78 00 	lds	r24, 0x0078
     eb4:	88 23       	and	r24, r24
     eb6:	c1 f1       	breq	.+112    	; 0xf28 <logic_part2+0x1ca>
	{
		sequence = 184;
     eb8:	88 eb       	ldi	r24, 0xB8	; 184
     eba:	80 93 64 00 	sts	0x0064, r24
		Golfer_turnto(EAST);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     ec4:	11 e0       	ldi	r17, 0x01	; 1
     ec6:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     eca:	88 e0       	ldi	r24, 0x08	; 8
     ecc:	6a e0       	ldi	r22, 0x0A	; 10
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(NORTH);
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     eda:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     ede:	88 e0       	ldi	r24, 0x08	; 8
     ee0:	6a e0       	ldi	r22, 0x0A	; 10
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		no_line_forward(SPEED_DENOMINATOR_VERY_LOW);
     ee8:	89 e1       	ldi	r24, 0x19	; 25
     eea:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <no_line_forward>
		Golfer_pickup_special();
     eee:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
		no_line_backward(SPEED_DENOMINATOR_VERY_LOW);
     ef2:	89 e1       	ldi	r24, 0x19	; 25
     ef4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <no_line_backward>
		
		Golfer_turnto(WEST);
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     efe:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     f02:	88 e0       	ldi	r24, 0x08	; 8
     f04:	6a e0       	ldi	r22, 0x0A	; 10
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(SOUTH);
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     f12:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     f16:	88 e0       	ldi	r24, 0x08	; 8
     f18:	6a e0       	ldi	r22, 0x0A	; 10
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Map_setgolfer(1, 3);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	}

	if(Map[0][5] > 0)
     f28:	80 91 6a 00 	lds	r24, 0x006A
     f2c:	88 23       	and	r24, r24
     f2e:	c1 f1       	breq	.+112    	; 0xfa0 <logic_part2+0x242>
	{
		sequence = 185;
     f30:	89 eb       	ldi	r24, 0xB9	; 185
     f32:	80 93 64 00 	sts	0x0064, r24
		Golfer_turnto(WEST);
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     f3c:	11 e0       	ldi	r17, 0x01	; 1
     f3e:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     f42:	88 e0       	ldi	r24, 0x08	; 8
     f44:	6a e0       	ldi	r22, 0x0A	; 10
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(NORTH);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     f52:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     f56:	88 e0       	ldi	r24, 0x08	; 8
     f58:	6a e0       	ldi	r22, 0x0A	; 10
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		no_line_forward(SPEED_DENOMINATOR_VERY_LOW);
     f60:	89 e1       	ldi	r24, 0x19	; 25
     f62:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <no_line_forward>
		Golfer_pickup_special();
     f66:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
		no_line_backward(SPEED_DENOMINATOR_VERY_LOW);
     f6a:	89 e1       	ldi	r24, 0x19	; 25
     f6c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <no_line_backward>
		Golfer_turnto(EAST);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     f76:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	6a e0       	ldi	r22, 0x0A	; 10
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(SOUTH);
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
     f8a:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	6a e0       	ldi	r22, 0x0A	; 10
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Map_setgolfer(1, 3);
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	63 e0       	ldi	r22, 0x03	; 3
     f9c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	}
	
	sequence = 190;
     fa0:	8e eb       	ldi	r24, 0xBE	; 190
     fa2:	80 93 64 00 	sts	0x0064, r24
	if(direction != NORTH)
     fa6:	80 91 9d 00 	lds	r24, 0x009D
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	61 f0       	breq	.+24     	; 0xfc6 <logic_part2+0x268>
	{
		Golfer_turnto(SOUTH);
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = position_y - 0;
     fb4:	40 91 a9 00 	lds	r20, 0x00A9
     fb8:	40 93 ad 00 	sts	0x00AD, r20
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	6a e0       	ldi	r22, 0x0A	; 10
     fc0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
     fc4:	07 c0       	rjmp	.+14     	; 0xfd4 <logic_part2+0x276>
	}else{		// NORTH
		step = position_y - 0;
     fc6:	80 91 a9 00 	lds	r24, 0x00A9
     fca:	80 93 ad 00 	sts	0x00AD, r24
		line_backward_BACK_TO_GRID(SPEED_DENOMINATOR_LOW);
     fce:	84 e1       	ldi	r24, 0x14	; 20
     fd0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <line_backward_BACK_TO_GRID>
	}

	Golfer_turnto(WEST);
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
	step = 1;
     fda:	11 e0       	ldi	r17, 0x01	; 1
     fdc:	10 93 ad 00 	sts	0x00AD, r17
	line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
     fe0:	88 e0       	ldi	r24, 0x08	; 8
     fe2:	6a e0       	ldi	r22, 0x0A	; 10
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>

	////
	Golfer_turn_left_corner();
     fea:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <Golfer_turn_left_corner>
	line_tracking_OUT_GRID(SPEED_DENOMINATOR_MID);
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <line_tracking_OUT_GRID>
	Golfer_drop();
     ff4:	0e 94 93 13 	call	0x2726	; 0x2726 <Golfer_drop>
	line_backward_BACK_TO_GRID(SPEED_DENOMINATOR_LOW);
     ff8:	84 e1       	ldi	r24, 0x14	; 20
     ffa:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <line_backward_BACK_TO_GRID>
	Golfer_turn_left_special();	
     ffe:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <Golfer_turn_left_special>

	step = 4;
    1002:	84 e0       	ldi	r24, 0x04	; 4
    1004:	80 93 ad 00 	sts	0x00AD, r24
	direction = EAST;
    1008:	10 92 9d 00 	sts	0x009D, r1
	line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	6a e0       	ldi	r22, 0x0A	; 10
    1010:	44 e0       	ldi	r20, 0x04	; 4
    1012:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	Golfer_turnto(NORTH);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
	step = 3 - position_y;
    101c:	43 e0       	ldi	r20, 0x03	; 3
    101e:	80 91 a9 00 	lds	r24, 0x00A9
    1022:	48 1b       	sub	r20, r24
    1024:	40 93 ad 00 	sts	0x00AD, r20
	line_tracking(SIDE_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    1028:	89 e0       	ldi	r24, 0x09	; 9
    102a:	6a e0       	ldi	r22, 0x0A	; 10
    102c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>

	if(position_y == 2)
    1030:	80 91 a9 00 	lds	r24, 0x00A9
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	d1 f4       	brne	.+52     	; 0x106c <logic_part2+0x30e>
	{
		sequence = 191;
    1038:	8f eb       	ldi	r24, 0xBF	; 191
    103a:	80 93 64 00 	sts	0x0064, r24
		Golfer_turn_right();
    103e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Golfer_turn_right>
		line_tracking(FRONT_OBJECT_MODE, SPEED_DENOMINATOR_MID, 1);
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	6a e0       	ldi	r22, 0x0A	; 10
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_pickup_special();
    104c:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
		step = 1;
    1050:	10 93 ad 00 	sts	0x00AD, r17
		line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,step);
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	6a e0       	ldi	r22, 0x0A	; 10
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
		position_y++;
    105e:	80 91 a9 00 	lds	r24, 0x00A9
    1062:	8f 5f       	subi	r24, 0xFF	; 255
    1064:	80 93 a9 00 	sts	0x00A9, r24
		Golfer_turn_left();
    1068:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <Golfer_turn_left>
	}

	step = 3 - position_y;
    106c:	43 e0       	ldi	r20, 0x03	; 3
    106e:	80 91 a9 00 	lds	r24, 0x00A9
    1072:	48 1b       	sub	r20, r24
    1074:	40 93 ad 00 	sts	0x00AD, r20
	line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    1078:	88 e0       	ldi	r24, 0x08	; 8
    107a:	6a e0       	ldi	r22, 0x0A	; 10
    107c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	
	if(position_y == 2)
    1080:	80 91 a9 00 	lds	r24, 0x00A9
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	d9 f4       	brne	.+54     	; 0x10be <logic_part2+0x360>
	{
		sequence = 191;
    1088:	8f eb       	ldi	r24, 0xBF	; 191
    108a:	80 93 64 00 	sts	0x0064, r24
		Golfer_turn_right();
    108e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Golfer_turn_right>
		line_tracking(FRONT_OBJECT_MODE, SPEED_DENOMINATOR_MID, 1);
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	6a e0       	ldi	r22, 0x0A	; 10
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_pickup_special();
    109c:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
		step = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 ad 00 	sts	0x00AD, r24
		line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,step);
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	6a e0       	ldi	r22, 0x0A	; 10
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
		position_y++;
    10b0:	80 91 a9 00 	lds	r24, 0x00A9
    10b4:	8f 5f       	subi	r24, 0xFF	; 255
    10b6:	80 93 a9 00 	sts	0x00A9, r24
		Golfer_turn_left();
    10ba:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <Golfer_turn_left>
	}
	
	step = 3 - position_y;
    10be:	43 e0       	ldi	r20, 0x03	; 3
    10c0:	80 91 a9 00 	lds	r24, 0x00A9
    10c4:	48 1b       	sub	r20, r24
    10c6:	40 93 ad 00 	sts	0x00AD, r20
	line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    10ca:	88 e0       	ldi	r24, 0x08	; 8
    10cc:	6a e0       	ldi	r22, 0x0A	; 10
    10ce:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	
	step = 1;
    10d2:	11 e0       	ldi	r17, 0x01	; 1
    10d4:	10 93 ad 00 	sts	0x00AD, r17
	line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,step);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	6a e0       	ldi	r22, 0x0A	; 10
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
	Golfer_turnto(WEST);
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>

	Map_setgolfer(4, 2);
    10e8:	84 e0       	ldi	r24, 0x04	; 4
    10ea:	62 e0       	ldi	r22, 0x02	; 2
    10ec:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	
	Map[5][0] = 2 - (Map[5][1] + Map[5][2] + Map[5][3]);
    10f0:	20 91 8b 00 	lds	r18, 0x008B
    10f4:	82 2f       	mov	r24, r18
    10f6:	81 95       	neg	r24
    10f8:	90 91 8a 00 	lds	r25, 0x008A
    10fc:	89 1b       	sub	r24, r25
    10fe:	8e 5f       	subi	r24, 0xFE	; 254
    1100:	90 91 89 00 	lds	r25, 0x0089
    1104:	89 1b       	sub	r24, r25
    1106:	80 93 88 00 	sts	0x0088, r24

	if(Map[5][3] > 0)
    110a:	22 23       	and	r18, r18
    110c:	c1 f1       	breq	.+112    	; 0x117e <logic_part2+0x420>
		{
			Golfer_turnto(WEST);
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = 1;
    1114:	10 93 ad 00 	sts	0x00AD, r17
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    1118:	88 e0       	ldi	r24, 0x08	; 8
    111a:	6a e0       	ldi	r22, 0x0A	; 10
    111c:	41 e0       	ldi	r20, 0x01	; 1
    111e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
			Map_setgolfer(3 ,2);
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	62 e0       	ldi	r22, 0x02	; 2
    1126:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
			
			Golfer_turnto(NORTH);
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = 1;
    1130:	10 93 ad 00 	sts	0x00AD, r17
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    1134:	88 e0       	ldi	r24, 0x08	; 8
    1136:	6a e0       	ldi	r22, 0x0A	; 10
    1138:	41 e0       	ldi	r20, 0x01	; 1
    113a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
			Golfer_turnto(EAST);
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = 1;
    1144:	10 93 ad 00 	sts	0x00AD, r17
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    1148:	88 e0       	ldi	r24, 0x08	; 8
    114a:	6a e0       	ldi	r22, 0x0A	; 10
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
			no_line_forward(SPEED_DENOMINATOR_VERY_LOW);
    1152:	89 e1       	ldi	r24, 0x19	; 25
    1154:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <no_line_forward>
			Golfer_pickup_special();
    1158:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
			no_line_backward(SPEED_DENOMINATOR_VERY_LOW);
    115c:	89 e1       	ldi	r24, 0x19	; 25
    115e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <no_line_backward>
			Golfer_turnto(SOUTH);
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = 1;
    1168:	10 93 ad 00 	sts	0x00AD, r17
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    116c:	88 e0       	ldi	r24, 0x08	; 8
    116e:	6a e0       	ldi	r22, 0x0A	; 10
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
			Map_setgolfer(4, 2);
    1176:	84 e0       	ldi	r24, 0x04	; 4
    1178:	62 e0       	ldi	r22, 0x02	; 2
    117a:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
		}	
	
	if(Map[5][1] > 0)
    117e:	80 91 89 00 	lds	r24, 0x0089
    1182:	88 23       	and	r24, r24
    1184:	d1 f1       	breq	.+116    	; 0x11fa <logic_part2+0x49c>
	{
		
		if(position_x == 4)
    1186:	80 91 97 00 	lds	r24, 0x0097
    118a:	84 30       	cpi	r24, 0x04	; 4
    118c:	59 f4       	brne	.+22     	; 0x11a4 <logic_part2+0x446>
		{
			Golfer_turnto(WEST);
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 ad 00 	sts	0x00AD, r24
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	6a e0       	ldi	r22, 0x0A	; 10
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		}
		Golfer_turnto(SOUTH);
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    11aa:	11 e0       	ldi	r17, 0x01	; 1
    11ac:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    11b0:	88 e0       	ldi	r24, 0x08	; 8
    11b2:	6a e0       	ldi	r22, 0x0A	; 10
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(EAST);
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    11c0:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    11c4:	88 e0       	ldi	r24, 0x08	; 8
    11c6:	6a e0       	ldi	r22, 0x0A	; 10
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		no_line_forward(SPEED_DENOMINATOR_VERY_LOW);
    11ce:	89 e1       	ldi	r24, 0x19	; 25
    11d0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <no_line_forward>
		Golfer_pickup_special();
    11d4:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
		no_line_backward(SPEED_DENOMINATOR_VERY_LOW);
    11d8:	89 e1       	ldi	r24, 0x19	; 25
    11da:	0e 94 c3 0c 	call	0x1986	; 0x1986 <no_line_backward>
		Golfer_turnto(SOUTH);
    11de:	83 e0       	ldi	r24, 0x03	; 3
    11e0:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    11e4:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    11e8:	88 e0       	ldi	r24, 0x08	; 8
    11ea:	6a e0       	ldi	r22, 0x0A	; 10
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Map_setgolfer(4, 0);
    11f2:	84 e0       	ldi	r24, 0x04	; 4
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	}

	
	if(Map[5][0] > 0)
    11fa:	80 91 88 00 	lds	r24, 0x0088
    11fe:	88 23       	and	r24, r24
    1200:	51 f1       	breq	.+84     	; 0x1256 <logic_part2+0x4f8>
	{
		if(position_y == 2)  //(4,2)
    1202:	80 91 a9 00 	lds	r24, 0x00A9
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	59 f4       	brne	.+22     	; 0x1220 <logic_part2+0x4c2>
		{
			Golfer_turnto(SOUTH);
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = position_y - 0;
    1210:	40 91 a9 00 	lds	r20, 0x00A9
    1214:	40 93 ad 00 	sts	0x00AD, r20
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    1218:	88 e0       	ldi	r24, 0x08	; 8
    121a:	6a e0       	ldi	r22, 0x0A	; 10
    121c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
			line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,step);
			Golfer_turnto(NORTH);
			Map_setgolfer(4,0);
		
		}else{		//(4,0)
			Golfer_turnto(EAST);
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = 1;
    1226:	11 e0       	ldi	r17, 0x01	; 1
    1228:	10 93 ad 00 	sts	0x00AD, r17
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	6a e0       	ldi	r22, 0x0A	; 10
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
			Golfer_pickup_special();
    1236:	0e 94 76 13 	call	0x26ec	; 0x26ec <Golfer_pickup_special>
			step = 1;
    123a:	10 93 ad 00 	sts	0x00AD, r17
			line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID,step);
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	6a e0       	ldi	r22, 0x0A	; 10
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
			Golfer_turnto(NORTH);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			Map_setgolfer(4,0);
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
		}
	}

		if(position_y == 2)		//(4, 2)
    1256:	80 91 a9 00 	lds	r24, 0x00A9
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	59 f4       	brne	.+22     	; 0x1274 <logic_part2+0x516>
		{
			Golfer_turnto(SOUTH);
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
			step = position_y - 0;
    1264:	40 91 a9 00 	lds	r20, 0x00A9
    1268:	40 93 ad 00 	sts	0x00AD, r20
			line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    126c:	88 e0       	ldi	r24, 0x08	; 8
    126e:	6a e0       	ldi	r22, 0x0A	; 10
    1270:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		}
	
		Golfer_turnto(WEST);
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = position_x - 0;
    127a:	40 91 97 00 	lds	r20, 0x0097
    127e:	40 93 ad 00 	sts	0x00AD, r20
		line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID, step);
    1282:	88 e0       	ldi	r24, 0x08	; 8
    1284:	6a e0       	ldi	r22, 0x0A	; 10
    1286:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>

		Golfer_turn_left_corner();
    128a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <Golfer_turn_left_corner>
		line_tracking_OUT_GRID(SPEED_DENOMINATOR_MID);
    128e:	8a e0       	ldi	r24, 0x0A	; 10
    1290:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <line_tracking_OUT_GRID>
		Golfer_drop();
    1294:	0e 94 93 13 	call	0x2726	; 0x2726 <Golfer_drop>
		line_backward_BACK_TO_GRID(SPEED_DENOMINATOR_LOW);
    1298:	84 e1       	ldi	r24, 0x14	; 20
    129a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <line_backward_BACK_TO_GRID>
		Golfer_turn_left_special();	
    129e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <Golfer_turn_left_special>
}
    12a2:	1f 91       	pop	r17
    12a4:	08 95       	ret

000012a6 <logic_part1>:
}



void logic_part1(void)
{
    12a6:	1f 93       	push	r17
	//part1
// line1

	step = 4 - position_y;
    12a8:	14 e0       	ldi	r17, 0x04	; 4
    12aa:	80 91 a9 00 	lds	r24, 0x00A9
    12ae:	41 2f       	mov	r20, r17
    12b0:	48 1b       	sub	r20, r24
    12b2:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    12b6:	87 e0       	ldi	r24, 0x07	; 7
    12b8:	6a e0       	ldi	r22, 0x0A	; 10
    12ba:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    12be:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 ==  FRONT_OBJECT_STOP)
    12c2:	84 56       	subi	r24, 0x64	; 100
    12c4:	8a 30       	cpi	r24, 0x0A	; 10
    12c6:	60 f4       	brcc	.+24     	; 0x12e0 <logic_part1+0x3a>
	{
		Golfer_pickup_only();
    12c8:	0e 94 4d 13 	call	0x269a	; 0x269a <Golfer_pickup_only>

		step = 4 - position_y;
    12cc:	80 91 a9 00 	lds	r24, 0x00A9
    12d0:	41 2f       	mov	r20, r17
    12d2:	48 1b       	sub	r20, r24
    12d4:	40 93 ad 00 	sts	0x00AD, r20
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    12d8:	87 e0       	ldi	r24, 0x07	; 7
    12da:	6a e0       	ldi	r22, 0x0A	; 10
    12dc:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	}
	
	if(Map[1][4] > 0)
    12e0:	80 91 70 00 	lds	r24, 0x0070
    12e4:	88 23       	and	r24, r24
    12e6:	79 f1       	breq	.+94     	; 0x1346 <logic_part1+0xa0>
	{
		sequence = 11;
    12e8:	8b e0       	ldi	r24, 0x0B	; 11
    12ea:	80 93 64 00 	sts	0x0064, r24
		step = 1;
    12ee:	11 e0       	ldi	r17, 0x01	; 1
    12f0:	10 93 ad 00 	sts	0x00AD, r17
		line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID, step);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	6a e0       	ldi	r22, 0x0A	; 10
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
		Golfer_turnto(EAST);
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    1304:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1308:	87 e0       	ldi	r24, 0x07	; 7
    130a:	6a e0       	ldi	r22, 0x0A	; 10
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(NORTH);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    1318:	10 93 ad 00 	sts	0x00AD, r17
		result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    131c:	87 e0       	ldi	r24, 0x07	; 7
    131e:	6a e0       	ldi	r22, 0x0A	; 10
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    1326:	80 93 ac 00 	sts	0x00AC, r24
		if(result/10 == FRONT_OBJECT_STOP)
    132a:	84 56       	subi	r24, 0x64	; 100
    132c:	8a 30       	cpi	r24, 0x0A	; 10
    132e:	10 f4       	brcc	.+4      	; 0x1334 <logic_part1+0x8e>
			Golfer_pickup_front();
    1330:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    1334:	80 91 a4 00 	lds	r24, 0x00A4
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	08 f0       	brcs	.+2      	; 0x133e <logic_part1+0x98>
    133c:	a7 c1       	rjmp	.+846    	; 0x168c <logic_part1+0x3e6>
		{
			Golfer_sendball();
			Golfer_shoot();
			return;
		}
		Golfer_turnto(EAST);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
    1344:	04 c0       	rjmp	.+8      	; 0x134e <logic_part1+0xa8>

	}else{
		
		Golfer_turn_right_corner();
    1346:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Golfer_turn_right_corner>
		direction = EAST;
    134a:	10 92 9d 00 	sts	0x009D, r1
	}

//line2
	sequence = 20;////////////////
    134e:	84 e1       	ldi	r24, 0x14	; 20
    1350:	80 93 64 00 	sts	0x0064, r24
	step = 4 - position_x;
    1354:	14 e0       	ldi	r17, 0x04	; 4
    1356:	80 91 97 00 	lds	r24, 0x0097
    135a:	41 2f       	mov	r20, r17
    135c:	48 1b       	sub	r20, r24
    135e:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1362:	87 e0       	ldi	r24, 0x07	; 7
    1364:	6a e0       	ldi	r22, 0x0A	; 10
    1366:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    136a:	80 93 ac 00 	sts	0x00AC, r24

	if(result/10 == FRONT_OBJECT_STOP)
    136e:	84 56       	subi	r24, 0x64	; 100
    1370:	8a 30       	cpi	r24, 0x0A	; 10
    1372:	78 f4       	brcc	.+30     	; 0x1392 <logic_part1+0xec>
	{
		sequence = 21;///////////////////
    1374:	85 e1       	ldi	r24, 0x15	; 21
    1376:	80 93 64 00 	sts	0x0064, r24
		Golfer_pickup_only();
    137a:	0e 94 4d 13 	call	0x269a	; 0x269a <Golfer_pickup_only>

		step = 4 - position_x;
    137e:	80 91 97 00 	lds	r24, 0x0097
    1382:	41 2f       	mov	r20, r17
    1384:	48 1b       	sub	r20, r24
    1386:	40 93 ad 00 	sts	0x00AD, r20
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    138a:	87 e0       	ldi	r24, 0x07	; 7
    138c:	6a e0       	ldi	r22, 0x0A	; 10
    138e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	}
	if(Map[4][3] > 0)
    1392:	80 91 84 00 	lds	r24, 0x0084
    1396:	88 23       	and	r24, r24
    1398:	89 f1       	breq	.+98     	; 0x13fc <logic_part1+0x156>
	{
		sequence = 22;
    139a:	86 e1       	ldi	r24, 0x16	; 22
    139c:	80 93 64 00 	sts	0x0064, r24
		step = 1;
    13a0:	11 e0       	ldi	r17, 0x01	; 1
    13a2:	10 93 ad 00 	sts	0x00AD, r17
		line_backward(BACK_COUNTING,SPEED_DENOMINATOR_MID, step);
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	6a e0       	ldi	r22, 0x0A	; 10
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
		Golfer_turnto(SOUTH);
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    13b6:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    13ba:	87 e0       	ldi	r24, 0x07	; 7
    13bc:	6a e0       	ldi	r22, 0x0A	; 10
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(EAST);
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    13ca:	10 93 ad 00 	sts	0x00AD, r17
		result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    13ce:	87 e0       	ldi	r24, 0x07	; 7
    13d0:	6a e0       	ldi	r22, 0x0A	; 10
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    13d8:	80 93 ac 00 	sts	0x00AC, r24
		if(result/10 == FRONT_OBJECT_STOP)
    13dc:	84 56       	subi	r24, 0x64	; 100
    13de:	8a 30       	cpi	r24, 0x0A	; 10
    13e0:	10 f4       	brcc	.+4      	; 0x13e6 <logic_part1+0x140>
			Golfer_pickup_front();
    13e2:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>
				
		if(Ball >= 3)
    13e6:	80 91 a4 00 	lds	r24, 0x00A4
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <logic_part1+0x14a>
    13ee:	4e c1       	rjmp	.+668    	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}

		Golfer_turnto(SOUTH);
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		Map_setgolfer(4, 3);
    13f6:	84 e0       	ldi	r24, 0x04	; 4
    13f8:	63 e0       	ldi	r22, 0x03	; 3
    13fa:	0a c0       	rjmp	.+20     	; 0x1410 <logic_part1+0x16a>
	}else{
		sequence = 23;
    13fc:	87 e1       	ldi	r24, 0x17	; 23
    13fe:	80 93 64 00 	sts	0x0064, r24
		Golfer_turn_right_corner();
    1402:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Golfer_turn_right_corner>
		direction = SOUTH;
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	80 93 9d 00 	sts	0x009D, r24
		Map_setgolfer(4, 4);
    140c:	84 e0       	ldi	r24, 0x04	; 4
    140e:	64 e0       	ldi	r22, 0x04	; 4
    1410:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	}
	

//line3
	sequence = 30;
    1414:	8e e1       	ldi	r24, 0x1E	; 30
    1416:	80 93 64 00 	sts	0x0064, r24
	step = position_y - 0;
    141a:	40 91 a9 00 	lds	r20, 0x00A9
    141e:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1422:	87 e0       	ldi	r24, 0x07	; 7
    1424:	6a e0       	ldi	r22, 0x0A	; 10
    1426:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    142a:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 ==  FRONT_OBJECT_STOP)
    142e:	84 56       	subi	r24, 0x64	; 100
    1430:	8a 30       	cpi	r24, 0x0A	; 10
    1432:	90 f4       	brcc	.+36     	; 0x1458 <logic_part1+0x1b2>
	{
		sequence = 31;
    1434:	8f e1       	ldi	r24, 0x1F	; 31
    1436:	80 93 64 00 	sts	0x0064, r24
		Golfer_pickup_front();
    143a:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    143e:	80 91 a4 00 	lds	r24, 0x00A4
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	08 f0       	brcs	.+2      	; 0x1448 <logic_part1+0x1a2>
    1446:	22 c1       	rjmp	.+580    	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}

		step = position_y - 0;
    1448:	40 91 a9 00 	lds	r20, 0x00A9
    144c:	40 93 ad 00 	sts	0x00AD, r20
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1450:	87 e0       	ldi	r24, 0x07	; 7
    1452:	6a e0       	ldi	r22, 0x0A	; 10
    1454:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	}
	Golfer_turnto(WEST);
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
	Map_setgolfer(4, 0);
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>

//line4
	sequence = 40;////////////////////
    1466:	88 e2       	ldi	r24, 0x28	; 40
    1468:	80 93 64 00 	sts	0x0064, r24
	
	step = position_x - 1;
    146c:	40 91 97 00 	lds	r20, 0x0097
    1470:	41 50       	subi	r20, 0x01	; 1
    1472:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1476:	87 e0       	ldi	r24, 0x07	; 7
    1478:	6a e0       	ldi	r22, 0x0A	; 10
    147a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    147e:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 == FRONT_OBJECT_STOP)
    1482:	84 56       	subi	r24, 0x64	; 100
    1484:	8a 30       	cpi	r24, 0x0A	; 10
    1486:	98 f4       	brcc	.+38     	; 0x14ae <logic_part1+0x208>
	{
		sequence = 41;/////////////
    1488:	89 e2       	ldi	r24, 0x29	; 41
    148a:	80 93 64 00 	sts	0x0064, r24
		Golfer_pickup_front();
    148e:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    1492:	80 91 a4 00 	lds	r24, 0x00A4
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	08 f0       	brcs	.+2      	; 0x149c <logic_part1+0x1f6>
    149a:	f8 c0       	rjmp	.+496    	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}

		step = position_x - 1;
    149c:	40 91 97 00 	lds	r20, 0x0097
    14a0:	41 50       	subi	r20, 0x01	; 1
    14a2:	40 93 ad 00 	sts	0x00AD, r20
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    14a6:	87 e0       	ldi	r24, 0x07	; 7
    14a8:	6a e0       	ldi	r22, 0x0A	; 10
    14aa:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	}
	Map_setgolfer(1, 0);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	if(Map[1][1] > 0)
    14b6:	80 91 6d 00 	lds	r24, 0x006D
    14ba:	88 23       	and	r24, r24
    14bc:	79 f0       	breq	.+30     	; 0x14dc <logic_part1+0x236>
	{
		sequence = 42;
    14be:	8a e2       	ldi	r24, 0x2A	; 42
    14c0:	80 93 64 00 	sts	0x0064, r24
		step = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 ad 00 	sts	0x00AD, r24
		line_backward(BACK_COUNTING, SPEED_DENOMINATOR_MID, step);
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	6a e0       	ldi	r22, 0x0A	; 10
    14ce:	41 e0       	ldi	r20, 0x01	; 1
    14d0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
		Map_setgolfer(2, 0);
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Map_setgolfer>
	}
	Golfer_turnto(NORTH);
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>

//
	sequence = 50;
	if(position_x == 2)
    14e2:	80 91 97 00 	lds	r24, 0x0097
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	21 f5       	brne	.+72     	; 0x1532 <logic_part1+0x28c>
	{
		sequence = 51;
    14ea:	83 e3       	ldi	r24, 0x33	; 51
    14ec:	80 93 64 00 	sts	0x0064, r24
		step = 1;
    14f0:	11 e0       	ldi	r17, 0x01	; 1
    14f2:	10 93 ad 00 	sts	0x00AD, r17
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    14f6:	87 e0       	ldi	r24, 0x07	; 7
    14f8:	6a e0       	ldi	r22, 0x0A	; 10
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
		Golfer_turnto(WEST);
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = 1;
    1506:	10 93 ad 00 	sts	0x00AD, r17
		result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    150a:	87 e0       	ldi	r24, 0x07	; 7
    150c:	6a e0       	ldi	r22, 0x0A	; 10
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    1514:	80 93 ac 00 	sts	0x00AC, r24
		if(result/10 == FRONT_OBJECT_STOP)
    1518:	84 56       	subi	r24, 0x64	; 100
    151a:	8a 30       	cpi	r24, 0x0A	; 10
    151c:	10 f4       	brcc	.+4      	; 0x1522 <logic_part1+0x27c>
			Golfer_pickup_front();
    151e:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>
		Golfer_turnto(NORTH);
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		
		if(Ball >= 3)
    1528:	80 91 a4 00 	lds	r24, 0x00A4
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	60 f0       	brcs	.+24     	; 0x1548 <logic_part1+0x2a2>
    1530:	ad c0       	rjmp	.+346    	; 0x168c <logic_part1+0x3e6>
			Golfer_shoot();
			return;
		}

	}else{	//position_x == 1
		sequence = 52;
    1532:	84 e3       	ldi	r24, 0x34	; 52
    1534:	80 93 64 00 	sts	0x0064, r24
		step = 1;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 ad 00 	sts	0x00AD, r24
		line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    153e:	87 e0       	ldi	r24, 0x07	; 7
    1540:	6a e0       	ldi	r22, 0x0A	; 10
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	}
	//line5
	sequence = 53;
    1548:	85 e3       	ldi	r24, 0x35	; 53
    154a:	80 93 64 00 	sts	0x0064, r24
	step = 3 - position_y;
    154e:	13 e0       	ldi	r17, 0x03	; 3
    1550:	80 91 a9 00 	lds	r24, 0x00A9
    1554:	41 2f       	mov	r20, r17
    1556:	48 1b       	sub	r20, r24
    1558:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    155c:	87 e0       	ldi	r24, 0x07	; 7
    155e:	6a e0       	ldi	r22, 0x0A	; 10
    1560:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    1564:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 == FRONT_OBJECT_STOP)
    1568:	84 56       	subi	r24, 0x64	; 100
    156a:	8a 30       	cpi	r24, 0x0A	; 10
    156c:	98 f4       	brcc	.+38     	; 0x1594 <logic_part1+0x2ee>
	{
		Golfer_pickup_front();
    156e:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    1572:	80 91 a4 00 	lds	r24, 0x00A4
    1576:	83 30       	cpi	r24, 0x03	; 3
    1578:	08 f0       	brcs	.+2      	; 0x157c <logic_part1+0x2d6>
    157a:	88 c0       	rjmp	.+272    	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}

		step = 3 - position_y;
    157c:	80 91 a9 00 	lds	r24, 0x00A9
    1580:	41 2f       	mov	r20, r17
    1582:	48 1b       	sub	r20, r24
    1584:	40 93 ad 00 	sts	0x00AD, r20
		result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1588:	87 e0       	ldi	r24, 0x07	; 7
    158a:	6a e0       	ldi	r22, 0x0A	; 10
    158c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    1590:	80 93 ac 00 	sts	0x00AC, r24
	}
	Golfer_turnto(EAST);
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
	step = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	80 93 ad 00 	sts	0x00AD, r24
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    15a0:	87 e0       	ldi	r24, 0x07	; 7
    15a2:	6a e0       	ldi	r22, 0x0A	; 10
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    15aa:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 == FRONT_OBJECT_STOP)
    15ae:	84 56       	subi	r24, 0x64	; 100
    15b0:	8a 30       	cpi	r24, 0x0A	; 10
    15b2:	38 f4       	brcc	.+14     	; 0x15c2 <logic_part1+0x31c>
	{
		Golfer_pickup_front();
    15b4:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    15b8:	80 91 a4 00 	lds	r24, 0x00A4
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <logic_part1+0x31c>
    15c0:	65 c0       	rjmp	.+202    	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}
	}
	Golfer_turnto(SOUTH);
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
	
	//line6
	sequence = 60;
    15c8:	8c e3       	ldi	r24, 0x3C	; 60
    15ca:	80 93 64 00 	sts	0x0064, r24
	step = position_y - 1;
    15ce:	40 91 a9 00 	lds	r20, 0x00A9
    15d2:	41 50       	subi	r20, 0x01	; 1
    15d4:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    15d8:	87 e0       	ldi	r24, 0x07	; 7
    15da:	6a e0       	ldi	r22, 0x0A	; 10
    15dc:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    15e0:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 == FRONT_OBJECT_STOP)
    15e4:	84 56       	subi	r24, 0x64	; 100
    15e6:	8a 30       	cpi	r24, 0x0A	; 10
    15e8:	90 f4       	brcc	.+36     	; 0x160e <logic_part1+0x368>
	{
		Golfer_pickup_front();
    15ea:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    15ee:	80 91 a4 00 	lds	r24, 0x00A4
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <logic_part1+0x352>
    15f6:	4a c0       	rjmp	.+148    	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}

		step = position_y - 1;
    15f8:	40 91 a9 00 	lds	r20, 0x00A9
    15fc:	41 50       	subi	r20, 0x01	; 1
    15fe:	40 93 ad 00 	sts	0x00AD, r20
		result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1602:	87 e0       	ldi	r24, 0x07	; 7
    1604:	6a e0       	ldi	r22, 0x0A	; 10
    1606:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    160a:	80 93 ac 00 	sts	0x00AC, r24
	}
	Golfer_turnto(EAST);
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>

	step = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 ad 00 	sts	0x00AD, r24
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	6a e0       	ldi	r22, 0x0A	; 10
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    1624:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 == FRONT_OBJECT_STOP)
    1628:	84 56       	subi	r24, 0x64	; 100
    162a:	8a 30       	cpi	r24, 0x0A	; 10
    162c:	30 f4       	brcc	.+12     	; 0x163a <logic_part1+0x394>
	{
		Golfer_pickup_front();
    162e:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    1632:	80 91 a4 00 	lds	r24, 0x00A4
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	48 f5       	brcc	.+82     	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}
	}
	Golfer_turnto(NORTH);
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>

	//line7
	sequence = 70;
    1640:	86 e4       	ldi	r24, 0x46	; 70
    1642:	80 93 64 00 	sts	0x0064, r24
	step = 3 - position_y;
    1646:	43 e0       	ldi	r20, 0x03	; 3
    1648:	80 91 a9 00 	lds	r24, 0x00A9
    164c:	48 1b       	sub	r20, r24
    164e:	40 93 ad 00 	sts	0x00AD, r20
	result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    1652:	87 e0       	ldi	r24, 0x07	; 7
    1654:	6a e0       	ldi	r22, 0x0A	; 10
    1656:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    165a:	80 93 ac 00 	sts	0x00AC, r24
	if(result/10 == FRONT_OBJECT_STOP)
    165e:	84 56       	subi	r24, 0x64	; 100
    1660:	8a 30       	cpi	r24, 0x0A	; 10
    1662:	88 f4       	brcc	.+34     	; 0x1686 <logic_part1+0x3e0>
	{
		Golfer_pickup_front();
    1664:	0e 94 1a 13 	call	0x2634	; 0x2634 <Golfer_pickup_front>

		if(Ball >= 3)
    1668:	80 91 a4 00 	lds	r24, 0x00A4
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	70 f4       	brcc	.+28     	; 0x168c <logic_part1+0x3e6>
			Golfer_sendball();
			Golfer_shoot();
			return;
		}

		step = position_y - 1;
    1670:	40 91 a9 00 	lds	r20, 0x00A9
    1674:	41 50       	subi	r20, 0x01	; 1
    1676:	40 93 ad 00 	sts	0x00AD, r20
		result = line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    167a:	87 e0       	ldi	r24, 0x07	; 7
    167c:	6a e0       	ldi	r22, 0x0A	; 10
    167e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    1682:	80 93 ac 00 	sts	0x00AC, r24
	}
	sequence = 72;
    1686:	88 e4       	ldi	r24, 0x48	; 72
    1688:	80 93 64 00 	sts	0x0064, r24
	Golfer_sendball();
    168c:	0e 94 38 12 	call	0x2470	; 0x2470 <Golfer_sendball>
	Golfer_shoot();
    1690:	0e 94 62 12 	call	0x24c4	; 0x24c4 <Golfer_shoot>
	return;

	//over
}
    1694:	1f 91       	pop	r17
    1696:	08 95       	ret

00001698 <demo_3>:
//	Motor_TurnRight(TURN_RIGHT_LEFT_BASE, TURN_RIGHT_RIGHT_BASE);
 }
 

 void demo_3(void)
{
    1698:	1f 93       	push	r17
	Golfer_init();
    169a:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <Golfer_init>
	Map_init();
    169e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <Map_init>

	step = 1;
    16a2:	11 e0       	ldi	r17, 0x01	; 1
    16a4:	10 93 ad 00 	sts	0x00AD, r17
	sequence = 10;
    16a8:	8a e0       	ldi	r24, 0x0A	; 10
    16aa:	80 93 64 00 	sts	0x0064, r24
	line_backward_BACK_TO_GRID(SPEED_DENOMINATOR_LOW);
    16ae:	84 e1       	ldi	r24, 0x14	; 20
    16b0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <line_backward_BACK_TO_GRID>
	Golfer_turn_right_special();
    16b4:	0e 94 56 0d 	call	0x1aac	; 0x1aac <Golfer_turn_right_special>
	direction = NORTH;
    16b8:	10 93 9d 00 	sts	0x009D, r17

	logic_part1();
    16bc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <logic_part1>
	logic_part2();
    16c0:	0e 94 af 06 	call	0xd5e	; 0xd5e <logic_part2>

}
    16c4:	1f 91       	pop	r17
    16c6:	08 95       	ret

000016c8 <test_mode>:
	Golfer_pickup_only();
	line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,1);
	Golfer_shoot();
#endif

	demo_3();
    16c8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <demo_3>
//	line_tracking(OBJECT_MODE,SPEED_DENOMINATOR_MID,1);
//	Motor_forward(LEFT_SPEED_BASE + 18, RIGHT_SPEED_BASE + 18);
//	Motor_backward(BACK_LEFT_SPEED_BASE + 18, BACK_RIGHT_SPEED_BASE + 18);
//	Motor_TurnLeft(TURN_LEFT_LEFT_BASE, TURN_LEFT_RIGHT_BASE);
//	Motor_TurnRight(TURN_RIGHT_LEFT_BASE, TURN_RIGHT_RIGHT_BASE);
 }
    16cc:	08 95       	ret

000016ce <Map_init>:

#include "global.h"


void Map_init(void)
{
    16ce:	e5 e6       	ldi	r30, 0x65	; 101
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
	//initial array
	u08 i,j;
	for(i=0; i<MAP_X; i++)
		for(j=0; j<MAP_Y; j++)
		Map[i][j]=0;
    16d2:	10 82       	st	Z, r1
    16d4:	11 82       	std	Z+1, r1	; 0x01
    16d6:	12 82       	std	Z+2, r1	; 0x02
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	14 82       	std	Z+4, r1	; 0x04
    16dc:	15 82       	std	Z+5, r1	; 0x05
    16de:	37 96       	adiw	r30, 0x07	; 7

void Map_init(void)
{
	//initial array
	u08 i,j;
	for(i=0; i<MAP_X; i++)
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	ef 38       	cpi	r30, 0x8F	; 143
    16e4:	f8 07       	cpc	r31, r24
    16e6:	a9 f7       	brne	.-22     	; 0x16d2 <Map_init+0x4>
		for(j=0; j<MAP_Y; j++)
		Map[i][j]=0;
}
    16e8:	08 95       	ret

000016ea <Map_setpoint>:

void Map_setpoint(void)
{
	if(direction == NORTH)
    16ea:	30 91 9d 00 	lds	r19, 0x009D
    16ee:	31 30       	cpi	r19, 0x01	; 1
    16f0:	a1 f4       	brne	.+40     	; 0x171a <Map_setpoint+0x30>
		Map[position_x + 1][position_y + 1] = 1;
    16f2:	20 91 a9 00 	lds	r18, 0x00A9
    16f6:	80 91 97 00 	lds	r24, 0x0097
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	fc 01       	movw	r30, r24
    1700:	53 e0       	ldi	r21, 0x03	; 3
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	5a 95       	dec	r21
    1708:	e1 f7       	brne	.-8      	; 0x1702 <Map_setpoint+0x18>
    170a:	e8 1b       	sub	r30, r24
    170c:	f9 0b       	sbc	r31, r25
    170e:	eb 59       	subi	r30, 0x9B	; 155
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	e2 0f       	add	r30, r18
    1714:	f1 1d       	adc	r31, r1
    1716:	31 83       	std	Z+1, r19	; 0x01
    1718:	37 c0       	rjmp	.+110    	; 0x1788 <Map_setpoint+0x9e>
	
	if(direction == EAST)
    171a:	33 23       	and	r19, r19
    171c:	39 f4       	brne	.+14     	; 0x172c <Map_setpoint+0x42>
		Map[position_x + 1][position_y - 1] = 1;
    171e:	20 91 a9 00 	lds	r18, 0x00A9
    1722:	80 91 97 00 	lds	r24, 0x0097
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	01 96       	adiw	r24, 0x01	; 1
    172a:	08 c0       	rjmp	.+16     	; 0x173c <Map_setpoint+0x52>

	if(direction == SOUTH)
    172c:	33 30       	cpi	r19, 0x03	; 3
    172e:	b1 f4       	brne	.+44     	; 0x175c <Map_setpoint+0x72>
		Map[position_x - 1][position_y - 1] = 1;
    1730:	20 91 a9 00 	lds	r18, 0x00A9
    1734:	80 91 97 00 	lds	r24, 0x0097
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	fc 01       	movw	r30, r24
    173e:	43 e0       	ldi	r20, 0x03	; 3
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	4a 95       	dec	r20
    1746:	e1 f7       	brne	.-8      	; 0x1740 <Map_setpoint+0x56>
    1748:	e8 1b       	sub	r30, r24
    174a:	f9 0b       	sbc	r31, r25
    174c:	eb 59       	subi	r30, 0x9B	; 155
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	e2 0f       	add	r30, r18
    1752:	f1 1d       	adc	r31, r1
    1754:	31 97       	sbiw	r30, 0x01	; 1
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	80 83       	st	Z, r24
    175a:	16 c0       	rjmp	.+44     	; 0x1788 <Map_setpoint+0x9e>

	if(direction == WEST)
    175c:	32 30       	cpi	r19, 0x02	; 2
    175e:	a1 f4       	brne	.+40     	; 0x1788 <Map_setpoint+0x9e>
		Map[position_x - 1][position_y + 1] = 1;
    1760:	20 91 a9 00 	lds	r18, 0x00A9
    1764:	80 91 97 00 	lds	r24, 0x0097
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	fc 01       	movw	r30, r24
    176e:	33 e0       	ldi	r19, 0x03	; 3
    1770:	ee 0f       	add	r30, r30
    1772:	ff 1f       	adc	r31, r31
    1774:	3a 95       	dec	r19
    1776:	e1 f7       	brne	.-8      	; 0x1770 <Map_setpoint+0x86>
    1778:	e8 1b       	sub	r30, r24
    177a:	f9 0b       	sbc	r31, r25
    177c:	eb 59       	subi	r30, 0x9B	; 155
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	e2 0f       	add	r30, r18
    1782:	f1 1d       	adc	r31, r1
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	81 83       	std	Z+1, r24	; 0x01

	Map_set++;
    1788:	80 91 99 00 	lds	r24, 0x0099
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	80 93 99 00 	sts	0x0099, r24
}
    1792:	08 95       	ret

00001794 <Map_setposition_back>:

void Map_setposition_back(void)
{
	if(direction == NORTH)
    1794:	80 91 9d 00 	lds	r24, 0x009D
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	21 f4       	brne	.+8      	; 0x17a4 <Map_setposition_back+0x10>
		position_y--;
    179c:	80 91 a9 00 	lds	r24, 0x00A9
    17a0:	81 50       	subi	r24, 0x01	; 1
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <Map_setposition_back+0x2a>
	
	if(direction == EAST)
    17a4:	88 23       	and	r24, r24
    17a6:	31 f4       	brne	.+12     	; 0x17b4 <Map_setposition_back+0x20>
		position_x--;
    17a8:	80 91 97 00 	lds	r24, 0x0097
    17ac:	81 50       	subi	r24, 0x01	; 1
    17ae:	80 93 97 00 	sts	0x0097, r24
    17b2:	08 95       	ret

	if(direction == SOUTH)
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	31 f4       	brne	.+12     	; 0x17c4 <Map_setposition_back+0x30>
		position_y++;
    17b8:	80 91 a9 00 	lds	r24, 0x00A9
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	80 93 a9 00 	sts	0x00A9, r24
    17c2:	08 95       	ret

	if(direction == WEST)
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	29 f4       	brne	.+10     	; 0x17d2 <Map_setposition_back+0x3e>
		position_x++;
    17c8:	80 91 97 00 	lds	r24, 0x0097
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	80 93 97 00 	sts	0x0097, r24
    17d2:	08 95       	ret

000017d4 <Map_setposition_front>:
}

void Map_setposition_front(void)
{
	if(direction == NORTH)
    17d4:	80 91 9d 00 	lds	r24, 0x009D
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	21 f4       	brne	.+8      	; 0x17e4 <Map_setposition_front+0x10>
		position_y++;
    17dc:	80 91 a9 00 	lds	r24, 0x00A9
    17e0:	8f 5f       	subi	r24, 0xFF	; 255
    17e2:	0d c0       	rjmp	.+26     	; 0x17fe <Map_setposition_front+0x2a>
	
	if(direction == EAST)
    17e4:	88 23       	and	r24, r24
    17e6:	31 f4       	brne	.+12     	; 0x17f4 <Map_setposition_front+0x20>
		position_x++;
    17e8:	80 91 97 00 	lds	r24, 0x0097
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	80 93 97 00 	sts	0x0097, r24
    17f2:	08 95       	ret

	if(direction == SOUTH)
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	31 f4       	brne	.+12     	; 0x1804 <Map_setposition_front+0x30>
		position_y--;
    17f8:	80 91 a9 00 	lds	r24, 0x00A9
    17fc:	81 50       	subi	r24, 0x01	; 1
    17fe:	80 93 a9 00 	sts	0x00A9, r24
    1802:	08 95       	ret

	if(direction == WEST)
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	29 f4       	brne	.+10     	; 0x1812 <Map_setposition_front+0x3e>
		position_x--;
    1808:	80 91 97 00 	lds	r24, 0x0097
    180c:	81 50       	subi	r24, 0x01	; 1
    180e:	80 93 97 00 	sts	0x0097, r24
    1812:	08 95       	ret

00001814 <Map_setgolfer>:
}

void Map_setgolfer(u08 x, u08 y)
{
	position_x = x;
    1814:	80 93 97 00 	sts	0x0097, r24
	position_y = y;
    1818:	60 93 a9 00 	sts	0x00A9, r22
}
    181c:	08 95       	ret

0000181e <patt_ana>:

//////////////////////////////////////////////
s08 patt_ana(u08 sensor_patt)  //positive: left shift
{
	s08 shift;
	switch(sensor_patt)
    181e:	80 33       	cpi	r24, 0x30	; 48
    1820:	09 f4       	brne	.+2      	; 0x1824 <patt_ana+0x6>
    1822:	6f c0       	rjmp	.+222    	; 0x1902 <patt_ana+0xe4>
    1824:	81 33       	cpi	r24, 0x31	; 49
    1826:	f0 f5       	brcc	.+124    	; 0x18a4 <patt_ana+0x86>
    1828:	8c 30       	cpi	r24, 0x0C	; 12
    182a:	09 f4       	brne	.+2      	; 0x182e <patt_ana+0x10>
    182c:	6c c0       	rjmp	.+216    	; 0x1906 <patt_ana+0xe8>
    182e:	8d 30       	cpi	r24, 0x0D	; 13
    1830:	e0 f4       	brcc	.+56     	; 0x186a <patt_ana+0x4c>
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	09 f4       	brne	.+2      	; 0x1838 <patt_ana+0x1a>
    1836:	6f c0       	rjmp	.+222    	; 0x1916 <patt_ana+0xf8>
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	38 f4       	brcc	.+14     	; 0x184a <patt_ana+0x2c>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	09 f4       	brne	.+2      	; 0x1842 <patt_ana+0x24>
    1840:	6a c0       	rjmp	.+212    	; 0x1916 <patt_ana+0xf8>
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	08 f0       	brcs	.+2      	; 0x1848 <patt_ana+0x2a>
    1846:	63 c0       	rjmp	.+198    	; 0x190e <patt_ana+0xf0>
    1848:	5a c0       	rjmp	.+180    	; 0x18fe <patt_ana+0xe0>
    184a:	86 30       	cpi	r24, 0x06	; 6
    184c:	09 f4       	brne	.+2      	; 0x1850 <patt_ana+0x32>
    184e:	5f c0       	rjmp	.+190    	; 0x190e <patt_ana+0xf0>
    1850:	87 30       	cpi	r24, 0x07	; 7
    1852:	20 f4       	brcc	.+8      	; 0x185c <patt_ana+0x3e>
    1854:	84 30       	cpi	r24, 0x04	; 4
    1856:	09 f0       	breq	.+2      	; 0x185a <patt_ana+0x3c>
    1858:	66 c0       	rjmp	.+204    	; 0x1926 <patt_ana+0x108>
    185a:	55 c0       	rjmp	.+170    	; 0x1906 <patt_ana+0xe8>
    185c:	87 30       	cpi	r24, 0x07	; 7
    185e:	09 f4       	brne	.+2      	; 0x1862 <patt_ana+0x44>
    1860:	5a c0       	rjmp	.+180    	; 0x1916 <patt_ana+0xf8>
    1862:	88 30       	cpi	r24, 0x08	; 8
    1864:	09 f0       	breq	.+2      	; 0x1868 <patt_ana+0x4a>
    1866:	5f c0       	rjmp	.+190    	; 0x1926 <patt_ana+0x108>
    1868:	48 c0       	rjmp	.+144    	; 0x18fa <patt_ana+0xdc>
    186a:	88 31       	cpi	r24, 0x18	; 24
    186c:	09 f4       	brne	.+2      	; 0x1870 <patt_ana+0x52>
    186e:	45 c0       	rjmp	.+138    	; 0x18fa <patt_ana+0xdc>
    1870:	89 31       	cpi	r24, 0x19	; 25
    1872:	48 f4       	brcc	.+18     	; 0x1886 <patt_ana+0x68>
    1874:	8f 30       	cpi	r24, 0x0F	; 15
    1876:	09 f4       	brne	.+2      	; 0x187a <patt_ana+0x5c>
    1878:	54 c0       	rjmp	.+168    	; 0x1922 <patt_ana+0x104>
    187a:	80 31       	cpi	r24, 0x10	; 16
    187c:	f1 f1       	breq	.+124    	; 0x18fa <patt_ana+0xdc>
    187e:	8e 30       	cpi	r24, 0x0E	; 14
    1880:	09 f0       	breq	.+2      	; 0x1884 <patt_ana+0x66>
    1882:	51 c0       	rjmp	.+162    	; 0x1926 <patt_ana+0x108>
    1884:	44 c0       	rjmp	.+136    	; 0x190e <patt_ana+0xf0>
    1886:	8e 31       	cpi	r24, 0x1E	; 30
    1888:	f1 f1       	breq	.+124    	; 0x1906 <patt_ana+0xe8>
    188a:	8f 31       	cpi	r24, 0x1F	; 31
    188c:	20 f4       	brcc	.+8      	; 0x1896 <patt_ana+0x78>
    188e:	8c 31       	cpi	r24, 0x1C	; 28
    1890:	09 f0       	breq	.+2      	; 0x1894 <patt_ana+0x76>
    1892:	49 c0       	rjmp	.+146    	; 0x1926 <patt_ana+0x108>
    1894:	38 c0       	rjmp	.+112    	; 0x1906 <patt_ana+0xe8>
    1896:	8f 31       	cpi	r24, 0x1F	; 31
    1898:	09 f4       	brne	.+2      	; 0x189c <patt_ana+0x7e>
    189a:	43 c0       	rjmp	.+134    	; 0x1922 <patt_ana+0x104>
    189c:	80 32       	cpi	r24, 0x20	; 32
    189e:	09 f0       	breq	.+2      	; 0x18a2 <patt_ana+0x84>
    18a0:	42 c0       	rjmp	.+132    	; 0x1926 <patt_ana+0x108>
    18a2:	2f c0       	rjmp	.+94     	; 0x1902 <patt_ana+0xe4>
    18a4:	80 38       	cpi	r24, 0x80	; 128
    18a6:	a0 f4       	brcc	.+40     	; 0x18d0 <patt_ana+0xb2>
    18a8:	8e 37       	cpi	r24, 0x7E	; 126
    18aa:	b8 f5       	brcc	.+110    	; 0x191a <patt_ana+0xfc>
    18ac:	80 34       	cpi	r24, 0x40	; 64
    18ae:	69 f1       	breq	.+90     	; 0x190a <patt_ana+0xec>
    18b0:	81 34       	cpi	r24, 0x41	; 65
    18b2:	38 f4       	brcc	.+14     	; 0x18c2 <patt_ana+0xa4>
    18b4:	8c 33       	cpi	r24, 0x3C	; 60
    18b6:	09 f1       	breq	.+66     	; 0x18fa <patt_ana+0xdc>
    18b8:	8f 33       	cpi	r24, 0x3F	; 63
    18ba:	99 f1       	breq	.+102    	; 0x1922 <patt_ana+0x104>
    18bc:	88 33       	cpi	r24, 0x38	; 56
    18be:	99 f5       	brne	.+102    	; 0x1926 <patt_ana+0x108>
    18c0:	20 c0       	rjmp	.+64     	; 0x1902 <patt_ana+0xe4>
    18c2:	80 37       	cpi	r24, 0x70	; 112
    18c4:	11 f1       	breq	.+68     	; 0x190a <patt_ana+0xec>
    18c6:	88 37       	cpi	r24, 0x78	; 120
    18c8:	e1 f0       	breq	.+56     	; 0x1902 <patt_ana+0xe4>
    18ca:	80 36       	cpi	r24, 0x60	; 96
    18cc:	61 f5       	brne	.+88     	; 0x1926 <patt_ana+0x108>
    18ce:	1d c0       	rjmp	.+58     	; 0x190a <patt_ana+0xec>
    18d0:	80 3f       	cpi	r24, 0xF0	; 240
    18d2:	29 f1       	breq	.+74     	; 0x191e <patt_ana+0x100>
    18d4:	81 3f       	cpi	r24, 0xF1	; 241
    18d6:	38 f4       	brcc	.+14     	; 0x18e6 <patt_ana+0xc8>
    18d8:	80 3c       	cpi	r24, 0xC0	; 192
    18da:	d9 f0       	breq	.+54     	; 0x1912 <patt_ana+0xf4>
    18dc:	80 3e       	cpi	r24, 0xE0	; 224
    18de:	c9 f0       	breq	.+50     	; 0x1912 <patt_ana+0xf4>
    18e0:	80 38       	cpi	r24, 0x80	; 128
    18e2:	09 f5       	brne	.+66     	; 0x1926 <patt_ana+0x108>
    18e4:	16 c0       	rjmp	.+44     	; 0x1912 <patt_ana+0xf4>
    18e6:	8c 3f       	cpi	r24, 0xFC	; 252
    18e8:	d1 f0       	breq	.+52     	; 0x191e <patt_ana+0x100>
    18ea:	8d 3f       	cpi	r24, 0xFD	; 253
    18ec:	18 f4       	brcc	.+6      	; 0x18f4 <patt_ana+0xd6>
    18ee:	88 3f       	cpi	r24, 0xF8	; 248
    18f0:	d1 f4       	brne	.+52     	; 0x1926 <patt_ana+0x108>
    18f2:	15 c0       	rjmp	.+42     	; 0x191e <patt_ana+0x100>
    18f4:	8e 3f       	cpi	r24, 0xFE	; 254
    18f6:	b8 f0       	brcs	.+46     	; 0x1926 <patt_ana+0x108>
    18f8:	10 c0       	rjmp	.+32     	; 0x191a <patt_ana+0xfc>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	08 95       	ret
    18fe:	89 e0       	ldi	r24, 0x09	; 9
    1900:	08 95       	ret
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	08 95       	ret
	case 0b01111000:
	case 0b00111000:
	case 0b00110000:
	case 0b00100000:
		shift = SMALL_SHIFT_RIGHT;
		break;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	08 95       	ret
	case 0b00011110:
	case 0b00011100:
	case 0b00001100:
	case 0b00000100:				
		shift = SMALL_SHIFT_LEFT;
		break;
    190a:	8e ef       	ldi	r24, 0xFE	; 254
    190c:	08 95       	ret

	case 0b01110000:		
	case 0b01100000:
	case 0b01000000:
		shift = MEDIUM_SHIFT_RIGHT;
		break;
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	08 95       	ret

	case 0b00001110:
	case 0b00000110:
	case 0b00000010:
		shift = MEDIUM_SHIFT_LEFT;
		break;
    1912:	8d ef       	ldi	r24, 0xFD	; 253
    1914:	08 95       	ret

	case 0b10000000:
	case 0b11000000:
	case 0b11100000:
		shift = LARGE_SHIFT_RIGHT;
		break;
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	08 95       	ret

	case 0b00000111:
	case 0b00000011:
	case 0b00000001:
		shift = LARGE_SHIFT_LEFT;
		break;
    191a:	8b e0       	ldi	r24, 0x0B	; 11
    191c:	08 95       	ret
	case 0b01111110:
	case 0b11111111:
	case 0b01111111:
	case 0b11111110:
		shift = CROSS_ENCOUNTER;
		break;
    191e:	8d e0       	ldi	r24, 0x0D	; 13
    1920:	08 95       	ret
	
	case 0b11110000:	
	case 0b11111000:
	case 0b11111100:
		shift = LEFT_T_ENCOUNTER;
		break;
    1922:	8c e0       	ldi	r24, 0x0C	; 12
    1924:	08 95       	ret

	case 0b00001111:	
	case 0b00011111:
	case 0b00111111:
		shift = RIGHT_T_ENCOUNTER;
		break;
    1926:	8a e0       	ldi	r24, 0x0A	; 10
		shift = INVALID_SHIFT;
		break;
	} // end of switch
	
	return shift;			
}
    1928:	08 95       	ret

0000192a <Golfer_backward_p2>:
	return;
}


void Golfer_backward_p2(u08 t)	//for drop
{
    192a:	1f 93       	push	r17
    192c:	18 2f       	mov	r17, r24
	u08 L_speed, R_speed, VR_DETERMINED_speed;
	ADC_update();		//check the VR value
    192e:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1932:	84 e1       	ldi	r24, 0x14	; 20
    1934:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	VR_DETERMINED_speed = VR[0]/SPEED_DENOMINATOR_LOW;
    1938:	80 91 9a 00 	lds	r24, 0x009A
    193c:	64 e1       	ldi	r22, 0x14	; 20
    193e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1942:	68 2f       	mov	r22, r24
		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed;
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;

	Motor_backward(L_speed, R_speed);
    1944:	8e 5e       	subi	r24, 0xEE	; 238
    1946:	6b 5e       	subi	r22, 0xEB	; 235
    1948:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>
	delay_ms(t);
    194c:	81 2f       	mov	r24, r17
    194e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Motor_stop();
    1952:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1956:	1f 91       	pop	r17
    1958:	08 95       	ret

0000195a <Golfer_backward_p>:
}

void Golfer_backward_p(void)
{
	u08 L_speed, R_speed, VR_DETERMINED_speed;
	ADC_update();		//check the VR value
    195a:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    195e:	84 e1       	ldi	r24, 0x14	; 20
    1960:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	VR_DETERMINED_speed = VR[0]/SPEED_DENOMINATOR_LOW;
    1964:	80 91 9a 00 	lds	r24, 0x009A
    1968:	64 e1       	ldi	r22, 0x14	; 20
    196a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    196e:	68 2f       	mov	r22, r24
		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed;
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;
		Motor_backward(L_speed, R_speed);		//motor.c
    1970:	8e 5e       	subi	r24, 0xEE	; 238
    1972:	6b 5e       	subi	r22, 0xEB	; 235
    1974:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>
		while((middle_sensor & 0b00101100) != 0b00000000)
    1978:	80 91 98 00 	lds	r24, 0x0098
    197c:	8c 72       	andi	r24, 0x2C	; 44
    197e:	e1 f7       	brne	.-8      	; 0x1978 <Golfer_backward_p+0x1e>
		{
			;
		}
	Motor_stop();
    1980:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	return;
}
    1984:	08 95       	ret

00001986 <no_line_backward>:
	}
	Motor_stop();
}

void no_line_backward(u08 speed_den)
{
    1986:	1f 93       	push	r17
    1988:	18 2f       	mov	r17, r24
	u08 L_speed, R_speed, VR_DETERMINED_speed;
	ADC_update();		//check the VR value
    198a:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    198e:	84 e1       	ldi	r24, 0x14	; 20
    1990:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	VR_DETERMINED_speed = VR[0] / speed_den;
    1994:	80 91 9a 00 	lds	r24, 0x009A
    1998:	61 2f       	mov	r22, r17
    199a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    199e:	68 2f       	mov	r22, r24

	L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed;
	R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;

	Motor_backward(L_speed,  R_speed);
    19a0:	8e 5e       	subi	r24, 0xEE	; 238
    19a2:	6b 5e       	subi	r22, 0xEB	; 235
    19a4:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>

	while((middle_sensor & 0b00000011) == 0);
    19a8:	80 91 98 00 	lds	r24, 0x0098
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	83 70       	andi	r24, 0x03	; 3
    19b0:	90 70       	andi	r25, 0x00	; 0
    19b2:	89 2b       	or	r24, r25
    19b4:	c9 f3       	breq	.-14     	; 0x19a8 <no_line_backward+0x22>
	Motor_stop();
    19b6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	Motor_forward(VR[0] / ADJUST_SPEED_DENOMINATOR , VR[0] / ADJUST_SPEED_DENOMINATOR);
    19ba:	80 91 9a 00 	lds	r24, 0x009A
    19be:	60 91 9a 00 	lds	r22, 0x009A
    19c2:	66 95       	lsr	r22
    19c4:	66 95       	lsr	r22
    19c6:	66 95       	lsr	r22
    19c8:	86 95       	lsr	r24
    19ca:	86 95       	lsr	r24
    19cc:	86 95       	lsr	r24
    19ce:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
	while((middle_sensor & 0b00000011) == 0b00000000)
    19d2:	80 91 98 00 	lds	r24, 0x0098
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	83 70       	andi	r24, 0x03	; 3
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	89 2b       	or	r24, r25
    19de:	c9 f3       	breq	.-14     	; 0x19d2 <no_line_backward+0x4c>
	{
		;
	}
	while((middle_sensor & 0b00000011) != 0b00000000)
    19e0:	80 91 98 00 	lds	r24, 0x0098
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	83 70       	andi	r24, 0x03	; 3
    19e8:	90 70       	andi	r25, 0x00	; 0
    19ea:	89 2b       	or	r24, r25
    19ec:	c9 f7       	brne	.-14     	; 0x19e0 <no_line_backward+0x5a>
	{
		;
	}
	Motor_stop();
    19ee:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    19f2:	1f 91       	pop	r17
    19f4:	08 95       	ret

000019f6 <no_line_forward>:
	Golfer_turn_right();
	defl_adjust();
}

void no_line_forward(u08 speed_den)
{
    19f6:	1f 93       	push	r17
    19f8:	18 2f       	mov	r17, r24
	u08 L_speed, R_speed, VR_DETERMINED_speed, local_counter = 0;
	ADC_update();		//check the VR value
    19fa:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    19fe:	84 e1       	ldi	r24, 0x14	; 20
    1a00:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	VR_DETERMINED_speed = VR[0] / speed_den;
    1a04:	80 91 9a 00 	lds	r24, 0x009A
    1a08:	61 2f       	mov	r22, r17
    1a0a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1a0e:	68 2f       	mov	r22, r24

	L_speed = LEFT_SPEED_BASE + VR_DETERMINED_speed - 1;
	R_speed = RIGHT_SPEED_BASE + VR_DETERMINED_speed + 1;

	Motor_forward(L_speed, R_speed);
    1a10:	8d 5e       	subi	r24, 0xED	; 237
    1a12:	6c 5e       	subi	r22, 0xEC	; 236
    1a14:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <no_line_forward+0x2e>

	while((middle_sensor & 0b00101100) == 0 && local_counter < 100)
	{
		local_counter++;
    1a1c:	1f 5f       	subi	r17, 0xFF	; 255
		delay_ms(5);
    1a1e:	85 e0       	ldi	r24, 0x05	; 5
    1a20:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	L_speed = LEFT_SPEED_BASE + VR_DETERMINED_speed - 1;
	R_speed = RIGHT_SPEED_BASE + VR_DETERMINED_speed + 1;

	Motor_forward(L_speed, R_speed);

	while((middle_sensor & 0b00101100) == 0 && local_counter < 100)
    1a24:	80 91 98 00 	lds	r24, 0x0098
    1a28:	8c 72       	andi	r24, 0x2C	; 44
    1a2a:	11 f4       	brne	.+4      	; 0x1a30 <no_line_forward+0x3a>
    1a2c:	14 36       	cpi	r17, 0x64	; 100
    1a2e:	b1 f7       	brne	.-20     	; 0x1a1c <no_line_forward+0x26>
	{
		local_counter++;
		delay_ms(5);
	}
	Motor_stop();
    1a30:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1a34:	1f 91       	pop	r17
    1a36:	08 95       	ret

00001a38 <Golfer_forward_p>:
	delay_ms(t);
	Motor_stop();
}

void Golfer_forward_p(u08 t)
{
    1a38:	1f 93       	push	r17
    1a3a:	18 2f       	mov	r17, r24
	u08 L_speed, R_speed, VR_DETERMINED_speed;
	ADC_update();		//check the VR value
    1a3c:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1a40:	84 e1       	ldi	r24, 0x14	; 20
    1a42:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	VR_DETERMINED_speed = VR[0]/SPEED_DENOMINATOR_LOW;
    1a46:	80 91 9a 00 	lds	r24, 0x009A
    1a4a:	64 e1       	ldi	r22, 0x14	; 20
    1a4c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1a50:	68 2f       	mov	r22, r24
		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed;
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;

	Motor_forward(L_speed, R_speed);
    1a52:	8e 5e       	subi	r24, 0xEE	; 238
    1a54:	6b 5e       	subi	r22, 0xEB	; 235
    1a56:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
	delay_ms(t);
    1a5a:	81 2f       	mov	r24, r17
    1a5c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Motor_stop();
    1a60:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1a64:	1f 91       	pop	r17
    1a66:	08 95       	ret

00001a68 <Golfer_turn_right_edge>:
}

void Golfer_turn_right_edge()
{
	u08 L_speed, R_speed, tracking_speed;
	ADC_update();		//check the VR value
    1a68:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1a6c:	84 e1       	ldi	r24, 0x14	; 20
    1a6e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	tracking_speed = VR[0]/SPEED_TURNING_DENOMINATOR;
    1a72:	80 91 9a 00 	lds	r24, 0x009A
    1a76:	67 e0       	ldi	r22, 0x07	; 7
    1a78:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1a7c:	68 2f       	mov	r22, r24
	L_speed = tracking_speed;
	R_speed = tracking_speed;
	Motor_TurnRight(L_speed, R_speed);		//motor.c
    1a7e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>
	while(1)
	{
		if(patt_ana(front_sensor) == NO_LINE)
    1a82:	80 91 aa 00 	lds	r24, 0x00AA
    1a86:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1a8a:	89 30       	cpi	r24, 0x09	; 9
    1a8c:	d1 f7       	brne	.-12     	; 0x1a82 <Golfer_turn_right_edge+0x1a>
			break;
	}
	while(1)
	{
		if(back_sensor==0b00111000 || back_sensor==0b00011100 || back_sensor==0b00011000)
    1a8e:	80 91 a5 00 	lds	r24, 0x00A5
    1a92:	88 33       	cpi	r24, 0x38	; 56
    1a94:	41 f0       	breq	.+16     	; 0x1aa6 <Golfer_turn_right_edge+0x3e>
    1a96:	80 91 a5 00 	lds	r24, 0x00A5
    1a9a:	8c 31       	cpi	r24, 0x1C	; 28
    1a9c:	21 f0       	breq	.+8      	; 0x1aa6 <Golfer_turn_right_edge+0x3e>
    1a9e:	80 91 a5 00 	lds	r24, 0x00A5
    1aa2:	88 31       	cpi	r24, 0x18	; 24
    1aa4:	a1 f7       	brne	.-24     	; 0x1a8e <Golfer_turn_right_edge+0x26>
		break;
	}
	Motor_stop();
    1aa6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1aaa:	08 95       	ret

00001aac <Golfer_turn_right_special>:
}

void Golfer_turn_right_special()
{
	u08 L_speed, R_speed;
	ADC_update();		//check the VR value
    1aac:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1ab0:	84 e1       	ldi	r24, 0x14	; 20
    1ab2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	L_speed = TURN_RIGHT_LEFT_BASE ;
	R_speed = TURN_RIGHT_RIGHT_BASE;
	Motor_TurnRight(L_speed, R_speed + 2);		//motor.c
    1ab6:	8b e1       	ldi	r24, 0x1B	; 27
    1ab8:	6b e1       	ldi	r22, 0x1B	; 27
    1aba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>

	while(1)
	{
		if(back_sensor==0b000111000 || back_sensor==0b00111000 || back_sensor==0b00011000)
    1abe:	80 91 a5 00 	lds	r24, 0x00A5
    1ac2:	88 33       	cpi	r24, 0x38	; 56
    1ac4:	41 f0       	breq	.+16     	; 0x1ad6 <Golfer_turn_right_special+0x2a>
    1ac6:	80 91 a5 00 	lds	r24, 0x00A5
    1aca:	88 33       	cpi	r24, 0x38	; 56
    1acc:	21 f0       	breq	.+8      	; 0x1ad6 <Golfer_turn_right_special+0x2a>
    1ace:	80 91 a5 00 	lds	r24, 0x00A5
    1ad2:	88 31       	cpi	r24, 0x18	; 24
    1ad4:	a1 f7       	brne	.-24     	; 0x1abe <Golfer_turn_right_special+0x12>
		break;
	}
	Motor_stop();
    1ad6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	{
		;
	}
//	Motor_stop();

	Motor_TurnRight(L_speed + 0, R_speed + 3);
    1ada:	8b e1       	ldi	r24, 0x1B	; 27
    1adc:	6c e1       	ldi	r22, 0x1C	; 28
    1ade:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>
	while(1)
	{
		if(front_sensor==0b00000000 || front_sensor==0b00000001 || front_sensor==0b10000001)
    1ae2:	80 91 aa 00 	lds	r24, 0x00AA
    1ae6:	88 23       	and	r24, r24
    1ae8:	41 f0       	breq	.+16     	; 0x1afa <Golfer_turn_right_special+0x4e>
    1aea:	80 91 aa 00 	lds	r24, 0x00AA
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	21 f0       	breq	.+8      	; 0x1afa <Golfer_turn_right_special+0x4e>
    1af2:	80 91 aa 00 	lds	r24, 0x00AA
    1af6:	81 38       	cpi	r24, 0x81	; 129
    1af8:	a1 f7       	brne	.-24     	; 0x1ae2 <Golfer_turn_right_special+0x36>
		break;
	}
	while(1)
	{
		if(front_sensor == 0b00011100 || front_sensor == 0b00011000)
    1afa:	80 91 aa 00 	lds	r24, 0x00AA
    1afe:	8c 31       	cpi	r24, 0x1C	; 28
    1b00:	21 f0       	breq	.+8      	; 0x1b0a <Golfer_turn_right_special+0x5e>
    1b02:	80 91 aa 00 	lds	r24, 0x00AA
    1b06:	88 31       	cpi	r24, 0x18	; 24
    1b08:	c1 f7       	brne	.-16     	; 0x1afa <Golfer_turn_right_special+0x4e>
		{
			break;
		}
	}
	Motor_stop();
    1b0a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1b0e:	08 95       	ret

00001b10 <Golfer_turn_right_inverse>:
}

void Golfer_turn_right_inverse()
{
	u08 L_speed, R_speed;
	ADC_update();		//check the VR value
    1b10:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1b14:	84 e1       	ldi	r24, 0x14	; 20
    1b16:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	L_speed = TURN_RIGHT_LEFT_BASE - 5;
	R_speed = TURN_RIGHT_RIGHT_BASE + 5;
	Motor_TurnRight(L_speed, R_speed);		//motor.c
    1b1a:	86 e1       	ldi	r24, 0x16	; 22
    1b1c:	6e e1       	ldi	r22, 0x1E	; 30
    1b1e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>

	while(1)
	{
		if(back_sensor==0b00111000 || back_sensor==0b00011100 || back_sensor==0b00011000)
    1b22:	80 91 a5 00 	lds	r24, 0x00A5
    1b26:	88 33       	cpi	r24, 0x38	; 56
    1b28:	41 f0       	breq	.+16     	; 0x1b3a <Golfer_turn_right_inverse+0x2a>
    1b2a:	80 91 a5 00 	lds	r24, 0x00A5
    1b2e:	8c 31       	cpi	r24, 0x1C	; 28
    1b30:	21 f0       	breq	.+8      	; 0x1b3a <Golfer_turn_right_inverse+0x2a>
    1b32:	80 91 a5 00 	lds	r24, 0x00A5
    1b36:	88 31       	cpi	r24, 0x18	; 24
    1b38:	a1 f7       	brne	.-24     	; 0x1b22 <Golfer_turn_right_inverse+0x12>
		break;
	}
	Motor_stop();
    1b3a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1b3e:	08 95       	ret

00001b40 <Golfer_turn_right_corner>:
}

void Golfer_turn_right_corner()
{
	u08 L_speed, R_speed;
	ADC_update();		//check the VR value
    1b40:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1b44:	84 e1       	ldi	r24, 0x14	; 20
    1b46:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	L_speed = TURN_RIGHT_LEFT_BASE;
	R_speed = TURN_RIGHT_RIGHT_BASE;
	Motor_TurnRight(L_speed, R_speed);		//motor.c
    1b4a:	8b e1       	ldi	r24, 0x1B	; 27
    1b4c:	69 e1       	ldi	r22, 0x19	; 25
    1b4e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>
	while(1)
	{
		if((front_sensor & 0b00011000) == 0)
    1b52:	80 91 aa 00 	lds	r24, 0x00AA
    1b56:	88 71       	andi	r24, 0x18	; 24
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <Golfer_turn_right_corner+0x12>
		break;
	}
	while(1)
	{
		if(front_sensor == 0b00011100 || front_sensor == 0b00011000)
    1b5a:	80 91 aa 00 	lds	r24, 0x00AA
    1b5e:	8c 31       	cpi	r24, 0x1C	; 28
    1b60:	21 f0       	breq	.+8      	; 0x1b6a <Golfer_turn_right_corner+0x2a>
    1b62:	80 91 aa 00 	lds	r24, 0x00AA
    1b66:	88 31       	cpi	r24, 0x18	; 24
    1b68:	c1 f7       	brne	.-16     	; 0x1b5a <Golfer_turn_right_corner+0x1a>
		{
			break;
		}
	}

	Motor_stop();
    1b6a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
//	{
//		if(front_sensor == 0b00111000 || front_sensor == 0b00011000)
//		break;
//	}	
//	Motor_stop();
}
    1b6e:	08 95       	ret

00001b70 <Golfer_turn_left_special>:
}

void Golfer_turn_left_special()
{
	u08 L_speed, R_speed;
	ADC_update();		//check the VR value
    1b70:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1b74:	84 e1       	ldi	r24, 0x14	; 20
    1b76:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	L_speed = TURN_LEFT_LEFT_BASE - 2;
	R_speed = TURN_LEFT_RIGHT_BASE + 2;
	Motor_TurnLeft(L_speed, R_speed);		//motor.c
    1b7a:	8c e1       	ldi	r24, 0x1C	; 28
    1b7c:	6c e1       	ldi	r22, 0x1C	; 28
    1b7e:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_TurnLeft>

	while(1)
	{
		if(back_sensor==0b00111000 || back_sensor==0b00011100 || back_sensor==0b00011000)
    1b82:	80 91 a5 00 	lds	r24, 0x00A5
    1b86:	88 33       	cpi	r24, 0x38	; 56
    1b88:	41 f0       	breq	.+16     	; 0x1b9a <Golfer_turn_left_special+0x2a>
    1b8a:	80 91 a5 00 	lds	r24, 0x00A5
    1b8e:	8c 31       	cpi	r24, 0x1C	; 28
    1b90:	21 f0       	breq	.+8      	; 0x1b9a <Golfer_turn_left_special+0x2a>
    1b92:	80 91 a5 00 	lds	r24, 0x00A5
    1b96:	88 31       	cpi	r24, 0x18	; 24
    1b98:	a1 f7       	brne	.-24     	; 0x1b82 <Golfer_turn_left_special+0x12>
		break;
	}
	Motor_stop();
    1b9a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	{
		;
	}
//	Motor_stop();

	Motor_TurnLeft(L_speed - 1, R_speed + 1);
    1b9e:	8b e1       	ldi	r24, 0x1B	; 27
    1ba0:	6d e1       	ldi	r22, 0x1D	; 29
    1ba2:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_TurnLeft>
	while(1)
	{
		if((front_sensor & 0b00011000) == 0)
    1ba6:	80 91 aa 00 	lds	r24, 0x00AA
    1baa:	88 71       	andi	r24, 0x18	; 24
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <Golfer_turn_left_special+0x36>
		break;
	}
	while(1)
	{
		if(front_sensor == 0b00111000 || front_sensor == 0b00011000)
    1bae:	80 91 aa 00 	lds	r24, 0x00AA
    1bb2:	88 33       	cpi	r24, 0x38	; 56
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <Golfer_turn_left_special+0x4e>
    1bb6:	80 91 aa 00 	lds	r24, 0x00AA
    1bba:	88 31       	cpi	r24, 0x18	; 24
    1bbc:	c1 f7       	brne	.-16     	; 0x1bae <Golfer_turn_left_special+0x3e>
		{
			break;
		}
	}
	Motor_stop();
    1bbe:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1bc2:	08 95       	ret

00001bc4 <Golfer_turn_left_corner>:
}

void Golfer_turn_left_corner()
{
	u08 L_speed, R_speed;
	ADC_update();		//check the VR value
    1bc4:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1bc8:	84 e1       	ldi	r24, 0x14	; 20
    1bca:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	L_speed = TURN_LEFT_LEFT_BASE - 1;
	R_speed = TURN_LEFT_RIGHT_BASE + 0;
	Motor_TurnLeft(L_speed, R_speed);		//motor.c
    1bce:	8d e1       	ldi	r24, 0x1D	; 29
    1bd0:	6a e1       	ldi	r22, 0x1A	; 26
    1bd2:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_TurnLeft>
	while(1)
	{
		if((front_sensor & 0b00011000) == 0)
    1bd6:	80 91 aa 00 	lds	r24, 0x00AA
    1bda:	88 71       	andi	r24, 0x18	; 24
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <Golfer_turn_left_corner+0x12>
		break;
	}
	while(1)
	{
		if(front_sensor == 0b00111000 || front_sensor == 0b00011000 || front_sensor == 0b00011100)
    1bde:	80 91 aa 00 	lds	r24, 0x00AA
    1be2:	88 33       	cpi	r24, 0x38	; 56
    1be4:	41 f0       	breq	.+16     	; 0x1bf6 <Golfer_turn_left_corner+0x32>
    1be6:	80 91 aa 00 	lds	r24, 0x00AA
    1bea:	88 31       	cpi	r24, 0x18	; 24
    1bec:	21 f0       	breq	.+8      	; 0x1bf6 <Golfer_turn_left_corner+0x32>
    1bee:	80 91 aa 00 	lds	r24, 0x00AA
    1bf2:	8c 31       	cpi	r24, 0x1C	; 28
    1bf4:	a1 f7       	brne	.-24     	; 0x1bde <Golfer_turn_left_corner+0x1a>
		{
			break;
		}
	}
	Motor_stop();
    1bf6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1bfa:	08 95       	ret

00001bfc <defl_adjust>:
	return shift;			
}

//////////////////////////////////////////////
void defl_adjust()
{
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
	u08 L_speed, R_speed, tracking_speed;
	s08 fro_patt, back_patt, defl;

//first phase
	tracking_speed = VR[0] / SPEED_TURNING_DENOMINATOR;
    1c00:	80 91 9a 00 	lds	r24, 0x009A
    1c04:	67 e0       	ldi	r22, 0x07	; 7
    1c06:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1c0a:	08 2f       	mov	r16, r24
	L_speed = tracking_speed;
	R_speed = tracking_speed;
	
	fro_patt = patt_ana(front_sensor);
    1c0c:	80 91 aa 00 	lds	r24, 0x00AA
    1c10:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1c14:	18 2f       	mov	r17, r24
	back_patt = patt_ana(back_sensor);
    1c16:	80 91 a5 00 	lds	r24, 0x00A5
    1c1a:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1c1e:	98 2f       	mov	r25, r24

	if(fro_patt < 4 &&  fro_patt > -4)   //front sensor value valid
    1c20:	81 2f       	mov	r24, r17
    1c22:	8d 5f       	subi	r24, 0xFD	; 253
    1c24:	87 30       	cpi	r24, 0x07	; 7
    1c26:	08 f0       	brcs	.+2      	; 0x1c2a <defl_adjust+0x2e>
    1c28:	10 e0       	ldi	r17, 0x00	; 0
	else  //front sensor invalid
	{
		fro_patt = 0;	
	}
	
	if(back_patt < 4 &&  back_patt > -4)   //back sensor value valid
    1c2a:	89 2f       	mov	r24, r25
    1c2c:	8d 5f       	subi	r24, 0xFD	; 253
    1c2e:	87 30       	cpi	r24, 0x07	; 7
    1c30:	08 f0       	brcs	.+2      	; 0x1c34 <defl_adjust+0x38>
    1c32:	90 e0       	ldi	r25, 0x00	; 0
	else  //front sensor invalid
	{
		back_patt = 0;	
	}

	defl = fro_patt - back_patt;
    1c34:	19 1b       	sub	r17, r25

	if(defl < 0) // left deflection
    1c36:	17 ff       	sbrs	r17, 7
    1c38:	04 c0       	rjmp	.+8      	; 0x1c42 <defl_adjust+0x46>
	{
		Motor_TurnLeft(L_speed, R_speed);
    1c3a:	80 2f       	mov	r24, r16
    1c3c:	60 2f       	mov	r22, r16
    1c3e:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_TurnLeft>
	}

	if(defl > 0) //right deflection
    1c42:	11 16       	cp	r1, r17
    1c44:	24 f4       	brge	.+8      	; 0x1c4e <defl_adjust+0x52>
	{
		Motor_TurnRight(L_speed, R_speed);
    1c46:	80 2f       	mov	r24, r16
    1c48:	60 2f       	mov	r22, r16
    1c4a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>
	}

	while(1)
	{
		fro_patt = patt_ana(front_sensor);
    1c4e:	80 91 aa 00 	lds	r24, 0x00AA
    1c52:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1c56:	18 2f       	mov	r17, r24
		back_patt = patt_ana(back_sensor);
    1c58:	90 91 a5 00 	lds	r25, 0x00A5


		if(fro_patt < 4 &&  fro_patt > -4)   //front sensor value valid
    1c5c:	8d 5f       	subi	r24, 0xFD	; 253
    1c5e:	87 30       	cpi	r24, 0x07	; 7
    1c60:	08 f0       	brcs	.+2      	; 0x1c64 <defl_adjust+0x68>
    1c62:	41 c0       	rjmp	.+130    	; 0x1ce6 <defl_adjust+0xea>
	}

	while(1)
	{
		fro_patt = patt_ana(front_sensor);
		back_patt = patt_ana(back_sensor);
    1c64:	89 2f       	mov	r24, r25
    1c66:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1c6a:	98 2f       	mov	r25, r24
		{
			Motor_stop();
			return;
		}
	
		if(back_patt < 4 &&  back_patt > -4)   //back sensor value valid
    1c6c:	8d 5f       	subi	r24, 0xFD	; 253
    1c6e:	87 30       	cpi	r24, 0x07	; 7
    1c70:	d0 f5       	brcc	.+116    	; 0x1ce6 <defl_adjust+0xea>
			return;
		}

		defl = fro_patt - back_patt;
		
		if (defl == 0)
    1c72:	19 17       	cp	r17, r25
    1c74:	61 f7       	brne	.-40     	; 0x1c4e <defl_adjust+0x52>
			break;
	}
	Motor_stop();
    1c76:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>

/////////////////////////////////////////////////////////////
///second phase
	tracking_speed = VR[0] / ADJUST_SPEED_DENOMINATOR;
    1c7a:	10 91 9a 00 	lds	r17, 0x009A
	L_speed = tracking_speed;
	R_speed = tracking_speed;

	fro_patt = patt_ana(front_sensor);
    1c7e:	80 91 aa 00 	lds	r24, 0x00AA
    1c82:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1c86:	08 2f       	mov	r16, r24
	back_patt = patt_ana(back_sensor);
    1c88:	90 91 a5 00 	lds	r25, 0x00A5


	if(fro_patt < 4 &&  fro_patt > -4)   //front sensor value valid
    1c8c:	8d 5f       	subi	r24, 0xFD	; 253
    1c8e:	87 30       	cpi	r24, 0x07	; 7
    1c90:	50 f5       	brcc	.+84     	; 0x1ce6 <defl_adjust+0xea>
	tracking_speed = VR[0] / ADJUST_SPEED_DENOMINATOR;
	L_speed = tracking_speed;
	R_speed = tracking_speed;

	fro_patt = patt_ana(front_sensor);
	back_patt = patt_ana(back_sensor);
    1c92:	89 2f       	mov	r24, r25
    1c94:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1c98:	98 2f       	mov	r25, r24
	{
		Motor_stop();
		return;	
	}
	
	if(back_patt < 4 &&  back_patt > -4)   //back sensor value valid
    1c9a:	8d 5f       	subi	r24, 0xFD	; 253
    1c9c:	87 30       	cpi	r24, 0x07	; 7
    1c9e:	18 f5       	brcc	.+70     	; 0x1ce6 <defl_adjust+0xea>
	}
	Motor_stop();

/////////////////////////////////////////////////////////////
///second phase
	tracking_speed = VR[0] / ADJUST_SPEED_DENOMINATOR;
    1ca0:	16 95       	lsr	r17
    1ca2:	16 95       	lsr	r17
    1ca4:	16 95       	lsr	r17
//		Motor_stop();
		Motor_stop();
		return;	
	}

	defl = fro_patt - back_patt;
    1ca6:	09 1b       	sub	r16, r25

	if(defl < 0) // left deflection
    1ca8:	07 ff       	sbrs	r16, 7
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <defl_adjust+0xb8>
	{
		Motor_TurnLeft(L_speed, R_speed);
    1cac:	81 2f       	mov	r24, r17
    1cae:	61 2f       	mov	r22, r17
    1cb0:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_TurnLeft>
	}

	if(defl > 0) //right deflection
    1cb4:	10 16       	cp	r1, r16
    1cb6:	24 f4       	brge	.+8      	; 0x1cc0 <defl_adjust+0xc4>
	{
		Motor_TurnRight(L_speed, R_speed);
    1cb8:	81 2f       	mov	r24, r17
    1cba:	61 2f       	mov	r22, r17
    1cbc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>
	}

	while(1)
	{
		fro_patt = patt_ana(front_sensor);
    1cc0:	80 91 aa 00 	lds	r24, 0x00AA
    1cc4:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1cc8:	18 2f       	mov	r17, r24
		back_patt = patt_ana(back_sensor);
    1cca:	90 91 a5 00 	lds	r25, 0x00A5


		if(fro_patt < 4 &&  fro_patt > -4)   //front sensor value valid
    1cce:	8d 5f       	subi	r24, 0xFD	; 253
    1cd0:	87 30       	cpi	r24, 0x07	; 7
    1cd2:	48 f4       	brcc	.+18     	; 0x1ce6 <defl_adjust+0xea>
	}

	while(1)
	{
		fro_patt = patt_ana(front_sensor);
		back_patt = patt_ana(back_sensor);
    1cd4:	89 2f       	mov	r24, r25
    1cd6:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1cda:	98 2f       	mov	r25, r24
		{
			Motor_stop();
			return;
		}
	
		if(back_patt < 4 &&  back_patt > -4)   //back sensor value valid
    1cdc:	8d 5f       	subi	r24, 0xFD	; 253
    1cde:	87 30       	cpi	r24, 0x07	; 7
    1ce0:	10 f4       	brcc	.+4      	; 0x1ce6 <defl_adjust+0xea>
			return;
		}

		defl = fro_patt - back_patt;
		
		if (defl == 0)
    1ce2:	19 17       	cp	r17, r25
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <defl_adjust+0xc4>
			break;
	}
	Motor_stop();
    1ce6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <Golfer_turn_right>:
}

void Golfer_turn_right()
{
	u08 L_speed, R_speed;
	ADC_update();		//check the VR value
    1cf0:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1cf4:	84 e1       	ldi	r24, 0x14	; 20
    1cf6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	L_speed = TURN_RIGHT_LEFT_BASE;
	R_speed = TURN_RIGHT_RIGHT_BASE;
	Motor_TurnRight(L_speed, R_speed);		//motor.c
    1cfa:	8b e1       	ldi	r24, 0x1B	; 27
    1cfc:	69 e1       	ldi	r22, 0x19	; 25
    1cfe:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>
	while(1)
	{
		if((front_sensor & 0b00111100) == 0)
    1d02:	80 91 aa 00 	lds	r24, 0x00AA
    1d06:	8c 73       	andi	r24, 0x3C	; 60
    1d08:	e1 f7       	brne	.-8      	; 0x1d02 <Golfer_turn_right+0x12>
		break;
	}
	while(1)
	{
		if(front_sensor == 0b00011100 || front_sensor == 0b00011000)
    1d0a:	80 91 aa 00 	lds	r24, 0x00AA
    1d0e:	8c 31       	cpi	r24, 0x1C	; 28
    1d10:	21 f0       	breq	.+8      	; 0x1d1a <Golfer_turn_right+0x2a>
    1d12:	80 91 aa 00 	lds	r24, 0x00AA
    1d16:	88 31       	cpi	r24, 0x18	; 24
    1d18:	c1 f7       	brne	.-16     	; 0x1d0a <Golfer_turn_right+0x1a>
		{
			break;
		}
	}
	Motor_stop();
    1d1a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	defl_adjust();
    1d1e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <defl_adjust>
}
    1d22:	08 95       	ret

00001d24 <Golfer_turn_back>:
	Motor_stop();
}

void Golfer_turn_back()
{
	Golfer_turn_right();
    1d24:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Golfer_turn_right>
	defl_adjust();
    1d28:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <defl_adjust>
	Motor_backward(VR[0] / ADJUST_SPEED_DENOMINATOR, VR[0] / ADJUST_SPEED_DENOMINATOR);
    1d2c:	80 91 9a 00 	lds	r24, 0x009A
    1d30:	60 91 9a 00 	lds	r22, 0x009A
    1d34:	66 95       	lsr	r22
    1d36:	66 95       	lsr	r22
    1d38:	66 95       	lsr	r22
    1d3a:	86 95       	lsr	r24
    1d3c:	86 95       	lsr	r24
    1d3e:	86 95       	lsr	r24
    1d40:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>
	while((middle_sensor & 0b00000011) == 0b0000000)
    1d44:	80 91 98 00 	lds	r24, 0x0098
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	83 70       	andi	r24, 0x03	; 3
    1d4c:	90 70       	andi	r25, 0x00	; 0
    1d4e:	89 2b       	or	r24, r25
    1d50:	c9 f3       	breq	.-14     	; 0x1d44 <Golfer_turn_back+0x20>
	{
		;
	}
	Golfer_turn_right();
    1d52:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Golfer_turn_right>
	defl_adjust();
    1d56:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <defl_adjust>
}
    1d5a:	08 95       	ret

00001d5c <Golfer_turn_left>:
}

void Golfer_turn_left()
{
	u08 L_speed, R_speed;
	ADC_update();		//check the VR value
    1d5c:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1d60:	84 e1       	ldi	r24, 0x14	; 20
    1d62:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	L_speed = TURN_LEFT_LEFT_BASE - 2;
	R_speed = TURN_LEFT_RIGHT_BASE + 2;
	Motor_TurnLeft(L_speed, R_speed);		//motor.c
    1d66:	8c e1       	ldi	r24, 0x1C	; 28
    1d68:	6c e1       	ldi	r22, 0x1C	; 28
    1d6a:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_TurnLeft>
	while(1)
	{
		if((front_sensor & 0b00111100) == 0)
    1d6e:	80 91 aa 00 	lds	r24, 0x00AA
    1d72:	8c 73       	andi	r24, 0x3C	; 60
    1d74:	e1 f7       	brne	.-8      	; 0x1d6e <Golfer_turn_left+0x12>
		break;
	}
	while(1)
	{
		if(front_sensor == 0b00111000 || front_sensor == 0b00011000)
    1d76:	80 91 aa 00 	lds	r24, 0x00AA
    1d7a:	88 33       	cpi	r24, 0x38	; 56
    1d7c:	21 f0       	breq	.+8      	; 0x1d86 <Golfer_turn_left+0x2a>
    1d7e:	80 91 aa 00 	lds	r24, 0x00AA
    1d82:	88 31       	cpi	r24, 0x18	; 24
    1d84:	c1 f7       	brne	.-16     	; 0x1d76 <Golfer_turn_left+0x1a>
		{
			break;
		}
	}
	Motor_stop();
    1d86:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	defl_adjust();
    1d8a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <defl_adjust>

}
    1d8e:	08 95       	ret

00001d90 <line_backward_BACK_TO_GRID>:
	}
	Motor_stop();
}

void line_backward_BACK_TO_GRID(u08 speed_den)
{
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	18 2f       	mov	r17, r24
	u08 L_speed, R_speed, VR_DETERMINED_speed;
	s08 back_patt = 0;

	ADC_update();	
    1d98:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1d9c:	84 e1       	ldi	r24, 0x14	; 20
    1d9e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	VR_DETERMINED_speed = VR[0] / speed_den;
    1da2:	80 91 9a 00 	lds	r24, 0x009A
    1da6:	61 2f       	mov	r22, r17
    1da8:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1dac:	08 2f       	mov	r16, r24
	{
		back_patt = patt_ana(back_sensor);
		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed + back_patt;
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed - back_patt;
		
		Motor_backward(L_speed, R_speed);
    1dae:	85 e1       	ldi	r24, 0x15	; 21
    1db0:	f8 2e       	mov	r15, r24

	VR_DETERMINED_speed = VR[0] / speed_den;
	
	while(1)
	{
		back_patt = patt_ana(back_sensor);
    1db2:	80 91 a5 00 	lds	r24, 0x00A5
    1db6:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1dba:	18 2f       	mov	r17, r24
		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed + back_patt;
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed - back_patt;
		
		Motor_backward(L_speed, R_speed);
    1dbc:	8e 5e       	subi	r24, 0xEE	; 238
    1dbe:	6f 2d       	mov	r22, r15
    1dc0:	61 1b       	sub	r22, r17
    1dc2:	60 0f       	add	r22, r16
    1dc4:	80 0f       	add	r24, r16
    1dc6:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>
		delay_us(100);
    1dca:	84 e6       	ldi	r24, 0x64	; 100
    1dcc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <delay_us>

		if(back_patt > 4)
    1dd0:	15 30       	cpi	r17, 0x05	; 5
    1dd2:	7c f3       	brlt	.-34     	; 0x1db2 <line_backward_BACK_TO_GRID+0x22>
		{
			Motor_stop();
    1dd4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
				
	}
	
	L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed;
	R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;
	Motor_backward(L_speed, R_speed);
    1dd8:	80 2f       	mov	r24, r16
    1dda:	8e 5e       	subi	r24, 0xEE	; 238
    1ddc:	0b 5e       	subi	r16, 0xEB	; 235
    1dde:	60 2f       	mov	r22, r16
    1de0:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>

	while(1)
	{
		if((back_sensor & 0b00111100) ==0 )
    1de4:	80 91 a5 00 	lds	r24, 0x00A5
    1de8:	8c 73       	andi	r24, 0x3C	; 60
    1dea:	e1 f7       	brne	.-8      	; 0x1de4 <line_backward_BACK_TO_GRID+0x54>
		{
			Motor_stop();
    1dec:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
			break;
		}
	}
	Motor_stop();
    1df0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	08 95       	ret

00001dfc <line_tracking_OUT_GRID>:
	}
	Motor_stop();
}

void line_tracking_OUT_GRID(u08 speed_den)
{
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	18 2f       	mov	r17, r24
	u08 L_speed, R_speed, VR_DETERMINED_speed;
	s08 fro_patt = 0;

	ADC_update();	
    1e02:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1e06:	84 e1       	ldi	r24, 0x14	; 20
    1e08:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	VR_DETERMINED_speed = VR[0] / speed_den;
    1e0c:	80 91 9a 00 	lds	r24, 0x009A
    1e10:	61 2f       	mov	r22, r17
    1e12:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
			fro_patt = 0;
		}
		L_speed = LEFT_SPEED_BASE + VR_DETERMINED_speed + fro_patt;
		R_speed = RIGHT_SPEED_BASE + VR_DETERMINED_speed - fro_patt;
		
		Motor_forward(L_speed, R_speed);
    1e16:	08 2f       	mov	r16, r24
    1e18:	0c 5e       	subi	r16, 0xEC	; 236
    1e1a:	18 2f       	mov	r17, r24
    1e1c:	1d 5e       	subi	r17, 0xED	; 237

	VR_DETERMINED_speed = VR[0] / speed_den;
	
	while(1)
	{
		fro_patt = patt_ana(front_sensor);
    1e1e:	80 91 aa 00 	lds	r24, 0x00AA
    1e22:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
		if(fro_patt > 4)
    1e26:	85 30       	cpi	r24, 0x05	; 5
    1e28:	0c f0       	brlt	.+2      	; 0x1e2c <line_tracking_OUT_GRID+0x30>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
			fro_patt = 0;
		}
		L_speed = LEFT_SPEED_BASE + VR_DETERMINED_speed + fro_patt;
		R_speed = RIGHT_SPEED_BASE + VR_DETERMINED_speed - fro_patt;
		
		Motor_forward(L_speed, R_speed);
    1e2c:	61 2f       	mov	r22, r17
    1e2e:	68 1b       	sub	r22, r24
    1e30:	80 0f       	add	r24, r16
    1e32:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
		delay_us(100);
    1e36:	84 e6       	ldi	r24, 0x64	; 100
    1e38:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <delay_us>

		if((middle_sensor & 0b00101100) != 0)
    1e3c:	80 91 98 00 	lds	r24, 0x0098
    1e40:	8c 72       	andi	r24, 0x2C	; 44
    1e42:	69 f3       	breq	.-38     	; 0x1e1e <line_tracking_OUT_GRID+0x22>
		{
			Motor_stop();
    1e44:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
			return;
		}
	}

}
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <line_tracking_INTO_GRID>:

	return 0;
}

void line_tracking_INTO_GRID(u08 speed_den)
{
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	18 2f       	mov	r17, r24
	u08 L_speed, R_speed, tracking_speed;
	s08 fro_patt = 0;

	ADC_update();	
    1e54:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    1e58:	84 e1       	ldi	r24, 0x14	; 20
    1e5a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	tracking_speed = VR[0] / speed_den;
    1e5e:	80 91 9a 00 	lds	r24, 0x009A
    1e62:	61 2f       	mov	r22, r17
    1e64:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1e68:	08 2f       	mov	r16, r24
	
	while(1)
	{
		fro_patt = patt_ana(front_sensor);
    1e6a:	80 91 aa 00 	lds	r24, 0x00AA
    1e6e:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1e72:	18 2f       	mov	r17, r24
		L_speed = tracking_speed + fro_patt;
		R_speed = tracking_speed - fro_patt;
		
		Motor_forward(R_speed, L_speed);
    1e74:	60 2f       	mov	r22, r16
    1e76:	68 0f       	add	r22, r24
    1e78:	80 2f       	mov	r24, r16
    1e7a:	81 1b       	sub	r24, r17
    1e7c:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
		delay_us(100);
    1e80:	84 e6       	ldi	r24, 0x64	; 100
    1e82:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <delay_us>

		if(fro_patt > 4)
    1e86:	15 30       	cpi	r17, 0x05	; 5
    1e88:	84 f3       	brlt	.-32     	; 0x1e6a <line_tracking_INTO_GRID+0x1c>
		{
			Motor_stop();
    1e8a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
			break;
		}
				
	}
	Motor_forward(tracking_speed, tracking_speed);
    1e8e:	80 2f       	mov	r24, r16
    1e90:	60 2f       	mov	r22, r16
    1e92:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
	while((front_sensor & 0b00111100) != 0);
    1e96:	80 91 aa 00 	lds	r24, 0x00AA
    1e9a:	8c 73       	andi	r24, 0x3C	; 60
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <line_tracking_INTO_GRID+0x48>
	Motor_stop();
    1e9e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
	}
//	while((middle_sensor & 0b00000011) != 0b00000000)
	{
		;
	}
	Motor_stop();
    1ea2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	08 95       	ret

00001eac <line_backward>:
	}

}
///////////////////////////////////////////////
void line_backward(u08 mode_no, u08 speed_den, u08 step_local)
{
    1eac:	7f 92       	push	r7
    1eae:	8f 92       	push	r8
    1eb0:	9f 92       	push	r9
    1eb2:	af 92       	push	r10
    1eb4:	bf 92       	push	r11
    1eb6:	cf 92       	push	r12
    1eb8:	df 92       	push	r13
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	d4 2e       	mov	r13, r20
	u08 L_speed, R_speed, VR_DETERMINED_speed;
	s08 fro_patt, back_patt, drift, defl;
	s16 diff = 0;
	u08 STEP = 0, STEP_flag = 0, flag_local = 0;

	if(step_local == 0)
    1ec8:	44 23       	and	r20, r20
    1eca:	09 f4       	brne	.+2      	; 0x1ece <line_backward+0x22>
    1ecc:	f9 c0       	rjmp	.+498    	; 0x20c0 <line_backward+0x214>
	{
		return;
	}
	
	fro_patt = patt_ana(front_sensor);
    1ece:	80 91 aa 00 	lds	r24, 0x00AA
	back_patt = patt_ana(back_sensor);	
    1ed2:	80 91 a5 00 	lds	r24, 0x00A5
	past_defl = 0;
    1ed6:	10 92 a3 00 	sts	0x00A3, r1
	past_front = 0;
    1eda:	10 92 9e 00 	sts	0x009E, r1
	past_back = 0;
    1ede:	10 92 be 00 	sts	0x00BE, r1

	VR_DETERMINED_speed = VR[0] / speed_den;
    1ee2:	80 91 9a 00 	lds	r24, 0x009A
    1ee6:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    1eea:	28 2f       	mov	r18, r24

		drift = fro_patt + back_patt;  
		defl = back_patt - fro_patt;	


		diff = VR_DETERMINED_speed * (- 15 * drift - 35 * defl - 380 / VR_DETERMINED_speed * (defl - past_defl));
    1eec:	a8 2e       	mov	r10, r24
    1eee:	bb 24       	eor	r11, r11
    1ef0:	8c e7       	ldi	r24, 0x7C	; 124
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	b5 01       	movw	r22, r10
    1ef6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__divmodhi4>
    1efa:	eb 01       	movw	r28, r22
    1efc:	ee 24       	eor	r14, r14
    1efe:	00 e0       	ldi	r16, 0x00	; 0

		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed - diff / 210; 
    1f00:	42 e1       	ldi	r20, 0x12	; 18
    1f02:	74 2e       	mov	r7, r20
    1f04:	72 0e       	add	r7, r18
    1f06:	3d ed       	ldi	r19, 0xDD	; 221
    1f08:	83 2e       	mov	r8, r19
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	93 2e       	mov	r9, r19
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;
		
		if(L_speed > 100)
			L_speed = 100;

		Motor_backward(L_speed, R_speed);
    1f0e:	95 e1       	ldi	r25, 0x15	; 21
    1f10:	c9 2e       	mov	r12, r25
    1f12:	c2 0e       	add	r12, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <line_backward+0x6e>

		drift = fro_patt + back_patt;  
		defl = back_patt - fro_patt;	


		diff = VR_DETERMINED_speed * (- 15 * drift - 35 * defl - 380 / VR_DETERMINED_speed * (defl - past_defl));
    1f16:	ed 2c       	mov	r14, r13
    1f18:	03 e0       	ldi	r16, 0x03	; 3
	while (1)
	{
		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed;
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;

		fro_patt = patt_ana(front_sensor);
    1f1a:	80 91 aa 00 	lds	r24, 0x00AA
    1f1e:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1f22:	18 2f       	mov	r17, r24
		back_patt = patt_ana(back_sensor);
    1f24:	80 91 a5 00 	lds	r24, 0x00A5
    1f28:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    1f2c:	98 2f       	mov	r25, r24
		

		if(fro_patt < 4 &&  fro_patt > -4)   //front sensor value valid
    1f2e:	81 2f       	mov	r24, r17
    1f30:	8d 5f       	subi	r24, 0xFD	; 253
    1f32:	87 30       	cpi	r24, 0x07	; 7
    1f34:	18 f4       	brcc	.+6      	; 0x1f3c <line_backward+0x90>
		{
			past_front = fro_patt;
    1f36:	10 93 9e 00 	sts	0x009E, r17
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <line_backward+0x94>
		}
		else  //front sensor invalid
		{
			fro_patt = past_front;	
    1f3c:	10 91 9e 00 	lds	r17, 0x009E
		}

		if(back_patt < 4 &&  back_patt > -4)   //back sensor value valid
    1f40:	89 2f       	mov	r24, r25
    1f42:	8d 5f       	subi	r24, 0xFD	; 253
    1f44:	87 30       	cpi	r24, 0x07	; 7
    1f46:	18 f4       	brcc	.+6      	; 0x1f4e <line_backward+0xa2>
		{
			past_back = back_patt;
    1f48:	90 93 be 00 	sts	0x00BE, r25
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <line_backward+0xa6>
		}
		else  //front sensor invalid
		{
			back_patt = past_back;	
    1f4e:	90 91 be 00 	lds	r25, 0x00BE
		}


		drift = fro_patt + back_patt;  
		defl = back_patt - fro_patt;	
    1f52:	f9 2e       	mov	r15, r25
    1f54:	f1 1a       	sub	r15, r17


		diff = VR_DETERMINED_speed * (- 15 * drift - 35 * defl - 380 / VR_DETERMINED_speed * (defl - past_defl));
    1f56:	4f 2d       	mov	r20, r15
    1f58:	55 27       	eor	r21, r21
    1f5a:	47 fd       	sbrc	r20, 7
    1f5c:	50 95       	com	r21

		L_speed = BACK_LEFT_SPEED_BASE + VR_DETERMINED_speed - diff / 210; 
    1f5e:	48 9d       	mul	r20, r8
    1f60:	90 01       	movw	r18, r0
    1f62:	49 9d       	mul	r20, r9
    1f64:	30 0d       	add	r19, r0
    1f66:	58 9d       	mul	r21, r8
    1f68:	30 0d       	add	r19, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	91 0f       	add	r25, r17
    1f6e:	61 ef       	ldi	r22, 0xF1	; 241
    1f70:	96 02       	muls	r25, r22
    1f72:	c0 01       	movw	r24, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	28 0f       	add	r18, r24
    1f78:	39 1f       	adc	r19, r25
    1f7a:	80 91 a3 00 	lds	r24, 0x00A3
    1f7e:	99 27       	eor	r25, r25
    1f80:	87 fd       	sbrc	r24, 7
    1f82:	90 95       	com	r25
    1f84:	84 1b       	sub	r24, r20
    1f86:	95 0b       	sbc	r25, r21
    1f88:	ac 01       	movw	r20, r24
    1f8a:	4c 9f       	mul	r20, r28
    1f8c:	c0 01       	movw	r24, r0
    1f8e:	4d 9f       	mul	r20, r29
    1f90:	90 0d       	add	r25, r0
    1f92:	5c 9f       	mul	r21, r28
    1f94:	90 0d       	add	r25, r0
    1f96:	11 24       	eor	r1, r1
    1f98:	28 0f       	add	r18, r24
    1f9a:	39 1f       	adc	r19, r25
    1f9c:	2a 9d       	mul	r18, r10
    1f9e:	c0 01       	movw	r24, r0
    1fa0:	2b 9d       	mul	r18, r11
    1fa2:	90 0d       	add	r25, r0
    1fa4:	3a 9d       	mul	r19, r10
    1fa6:	90 0d       	add	r25, r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	6e e2       	ldi	r22, 0x2E	; 46
    1fac:	7f ef       	ldi	r23, 0xFF	; 255
    1fae:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__divmodhi4>
    1fb2:	67 0d       	add	r22, r7
		R_speed = BACK_RIGHT_SPEED_BASE + VR_DETERMINED_speed;
		
		if(L_speed > 100)
			L_speed = 100;

		Motor_backward(L_speed, R_speed);
    1fb4:	65 36       	cpi	r22, 0x65	; 101
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <line_backward+0x10e>
    1fb8:	64 e6       	ldi	r22, 0x64	; 100
    1fba:	86 2f       	mov	r24, r22
    1fbc:	6c 2d       	mov	r22, r12
    1fbe:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>
		past_defl = defl;
    1fc2:	f0 92 a3 00 	sts	0x00A3, r15
		delay_us(100); // make a little delay  
    1fc6:	84 e6       	ldi	r24, 0x64	; 100
    1fc8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <delay_us>

		if(((back_sensor & 0b10010000) == 0b10010000 || (back_sensor & 0b00001001) == 0b00001001) && STEP_flag == 0)
    1fcc:	80 91 a5 00 	lds	r24, 0x00A5
    1fd0:	80 79       	andi	r24, 0x90	; 144
    1fd2:	80 39       	cpi	r24, 0x90	; 144
    1fd4:	29 f0       	breq	.+10     	; 0x1fe0 <line_backward+0x134>
    1fd6:	80 91 a5 00 	lds	r24, 0x00A5
    1fda:	89 70       	andi	r24, 0x09	; 9
    1fdc:	89 30       	cpi	r24, 0x09	; 9
    1fde:	81 f4       	brne	.+32     	; 0x2000 <line_backward+0x154>
    1fe0:	00 23       	and	r16, r16
    1fe2:	71 f4       	brne	.+28     	; 0x2000 <line_backward+0x154>
		{
			delay_ms(5);
    1fe4:	85 e0       	ldi	r24, 0x05	; 5
    1fe6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
			if((back_sensor & 0b10010000) == 0b10010000 || (back_sensor & 0b00001001) == 0b00001001)
    1fea:	80 91 a5 00 	lds	r24, 0x00A5
    1fee:	80 79       	andi	r24, 0x90	; 144
    1ff0:	80 39       	cpi	r24, 0x90	; 144
    1ff2:	29 f0       	breq	.+10     	; 0x1ffe <line_backward+0x152>
    1ff4:	80 91 a5 00 	lds	r24, 0x00A5
    1ff8:	89 70       	andi	r24, 0x09	; 9
    1ffa:	89 30       	cpi	r24, 0x09	; 9
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <line_backward+0x154>
    1ffe:	01 e0       	ldi	r16, 0x01	; 1
				STEP_flag = 1;
			}
		
		}

		if(((back_sensor & 0b10010000) != 0b10010000 && (back_sensor & 0b00001001) != 0b00001001) && STEP_flag == 1)
    2000:	80 91 a5 00 	lds	r24, 0x00A5
    2004:	80 79       	andi	r24, 0x90	; 144
    2006:	80 39       	cpi	r24, 0x90	; 144
    2008:	41 f0       	breq	.+16     	; 0x201a <line_backward+0x16e>
    200a:	80 91 a5 00 	lds	r24, 0x00A5
    200e:	89 70       	andi	r24, 0x09	; 9
    2010:	89 30       	cpi	r24, 0x09	; 9
    2012:	19 f0       	breq	.+6      	; 0x201a <line_backward+0x16e>
    2014:	01 30       	cpi	r16, 0x01	; 1
    2016:	09 f4       	brne	.+2      	; 0x201a <line_backward+0x16e>
    2018:	02 e0       	ldi	r16, 0x02	; 2
		{
			STEP_flag = 2;
		}

		if((middle_sensor & 0b00000011) != 0 && STEP_flag == 2)
    201a:	80 91 98 00 	lds	r24, 0x0098
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	83 70       	andi	r24, 0x03	; 3
    2022:	90 70       	andi	r25, 0x00	; 0
    2024:	89 2b       	or	r24, r25
    2026:	81 f0       	breq	.+32     	; 0x2048 <line_backward+0x19c>
    2028:	02 30       	cpi	r16, 0x02	; 2
    202a:	71 f4       	brne	.+28     	; 0x2048 <line_backward+0x19c>
		{
			delay_ms(5);
    202c:	85 e0       	ldi	r24, 0x05	; 5
    202e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
			if((middle_sensor & 0b00000011) != 0)
    2032:	80 91 98 00 	lds	r24, 0x0098
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	83 70       	andi	r24, 0x03	; 3
    203a:	90 70       	andi	r25, 0x00	; 0
    203c:	89 2b       	or	r24, r25
    203e:	21 f0       	breq	.+8      	; 0x2048 <line_backward+0x19c>
			{
				STEP_flag = 0;
				STEP++;
    2040:	e3 94       	inc	r14
				Map_setposition_back();	
    2042:	0e 94 ca 0b 	call	0x1794	; 0x1794 <Map_setposition_back>
    2046:	00 e0       	ldi	r16, 0x00	; 0
			}
		}

		if (step_local == STEP)
    2048:	de 14       	cp	r13, r14
    204a:	09 f0       	breq	.+2      	; 0x204e <line_backward+0x1a2>
    204c:	66 cf       	rjmp	.-308    	; 0x1f1a <line_backward+0x6e>
		{
			STEP_flag = 3;

			if(flag_local == 0 && (middle_sensor & 0b00000011) != 0b00000000)
    204e:	80 91 98 00 	lds	r24, 0x0098
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	83 70       	andi	r24, 0x03	; 3
    2056:	90 70       	andi	r25, 0x00	; 0
    2058:	89 2b       	or	r24, r25
    205a:	09 f4       	brne	.+2      	; 0x205e <line_backward+0x1b2>
    205c:	5c cf       	rjmp	.-328    	; 0x1f16 <line_backward+0x6a>
			{
				Motor_stop();
    205e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
				Motor_forward(VR[0] / ADJUST_SPEED_DENOMINATOR, VR[0] / ADJUST_SPEED_DENOMINATOR);
    2062:	80 91 9a 00 	lds	r24, 0x009A
    2066:	60 91 9a 00 	lds	r22, 0x009A
    206a:	66 95       	lsr	r22
    206c:	66 95       	lsr	r22
    206e:	66 95       	lsr	r22
    2070:	86 95       	lsr	r24
    2072:	86 95       	lsr	r24
    2074:	86 95       	lsr	r24
    2076:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
				while((middle_sensor & 0b00000011) == 0b0000000)
    207a:	80 91 98 00 	lds	r24, 0x0098
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	83 70       	andi	r24, 0x03	; 3
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	89 2b       	or	r24, r25
    2086:	c9 f3       	breq	.-14     	; 0x207a <line_backward+0x1ce>
				{
					;
				}
				while((middle_sensor & 0b00000011) != 0b0000000)
    2088:	80 91 98 00 	lds	r24, 0x0098
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	83 70       	andi	r24, 0x03	; 3
    2090:	90 70       	andi	r25, 0x00	; 0
    2092:	89 2b       	or	r24, r25
    2094:	c9 f7       	brne	.-14     	; 0x2088 <line_backward+0x1dc>
				{
					;
				}
				Motor_backward(VR[0] / ADJUST_SPEED_DENOMINATOR, VR[0] / ADJUST_SPEED_DENOMINATOR);
    2096:	80 91 9a 00 	lds	r24, 0x009A
    209a:	60 91 9a 00 	lds	r22, 0x009A
    209e:	66 95       	lsr	r22
    20a0:	66 95       	lsr	r22
    20a2:	66 95       	lsr	r22
    20a4:	86 95       	lsr	r24
    20a6:	86 95       	lsr	r24
    20a8:	86 95       	lsr	r24
    20aa:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>
				while((middle_sensor & 0b00000011) == 0b0000000)
    20ae:	80 91 98 00 	lds	r24, 0x0098
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	83 70       	andi	r24, 0x03	; 3
    20b6:	90 70       	andi	r25, 0x00	; 0
    20b8:	89 2b       	or	r24, r25
    20ba:	c9 f3       	breq	.-14     	; 0x20ae <line_backward+0x202>
				{
					;
				}
				Motor_stop();
    20bc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
			}

		}		
	}
	Motor_stop();
}
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	bf 90       	pop	r11
    20d2:	af 90       	pop	r10
    20d4:	9f 90       	pop	r9
    20d6:	8f 90       	pop	r8
    20d8:	7f 90       	pop	r7
    20da:	08 95       	ret

000020dc <line_tracking>:
#include "global.h"

u08 line_tracking(u08 mode_no, u08 speed_den, u08 step_local)
{
    20dc:	6f 92       	push	r6
    20de:	7f 92       	push	r7
    20e0:	9f 92       	push	r9
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <line_tracking+0x1c>
    20f8:	0f 92       	push	r0
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	a8 2e       	mov	r10, r24
    2100:	96 2e       	mov	r9, r22
    2102:	b4 2e       	mov	r11, r20
	s16 diff = 0;
	u08 STEP_flag = 0, flag_local = 0, low_speed_flag = 0;
	u08 side_ball_detected = 0;
	u08 STEP = 0;

	if(step_local == 0)
    2104:	44 23       	and	r20, r20
    2106:	11 f4       	brne	.+4      	; 0x210c <line_tracking+0x30>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	3c c1       	rjmp	.+632    	; 0x2384 <line_tracking+0x2a8>
	{
		return 0;
	}

	ADC_update();	
    210c:	0e 94 0a 02 	call	0x414	; 0x414 <ADC_update>
	delay_ms(20);
    2110:	84 e1       	ldi	r24, 0x14	; 20
    2112:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	fro_patt = patt_ana(front_sensor);
    2116:	80 91 aa 00 	lds	r24, 0x00AA
	back_patt = patt_ana(back_sensor);	
    211a:	80 91 a5 00 	lds	r24, 0x00A5
    211e:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
	past_defl = 0;
    2122:	10 92 a3 00 	sts	0x00A3, r1
	past_front = 0;
    2126:	10 92 9e 00 	sts	0x009E, r1
	past_back = 0;
    212a:	10 92 be 00 	sts	0x00BE, r1

	VR_DETERMINED_speed = VR[0] / speed_den;
    212e:	90 91 9a 00 	lds	r25, 0x009A

	if (back_patt == NO_LINE && low_speed_flag == 0)
    2132:	89 30       	cpi	r24, 0x09	; 9
    2134:	39 f0       	breq	.+14     	; 0x2144 <line_tracking+0x68>
	back_patt = patt_ana(back_sensor);	
	past_defl = 0;
	past_front = 0;
	past_back = 0;

	VR_DETERMINED_speed = VR[0] / speed_den;
    2136:	89 2f       	mov	r24, r25
    2138:	69 2d       	mov	r22, r9
    213a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    213e:	18 2f       	mov	r17, r24
    2140:	19 82       	std	Y+1, r1	; 0x01
    2142:	08 c0       	rjmp	.+16     	; 0x2154 <line_tracking+0x78>

	if (back_patt == NO_LINE && low_speed_flag == 0)
	{
		low_speed_flag = 1;
		VR_DETERMINED_speed = VR[0] / SPEED_DENOMINATOR_VERY_LOW;
    2144:	80 91 9a 00 	lds	r24, 0x009A
    2148:	69 e1       	ldi	r22, 0x19	; 25
    214a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    214e:	18 2f       	mov	r17, r24
    2150:	21 e0       	ldi	r18, 0x01	; 1
    2152:	29 83       	std	Y+1, r18	; 0x01
    2154:	ff 24       	eor	r15, r15
    2156:	cc 24       	eor	r12, r12
    2158:	ee 24       	eor	r14, r14
										//another: fro = 1, back = 0
										//drift = 1, defl = 1

		diff = VR_DETERMINED_speed * (- 15 * drift - 35 * defl - 550 / VR_DETERMINED_speed * (defl - past_defl));

		L_speed = LEFT_SPEED_BASE + VR_DETERMINED_speed - diff / 230; 
    215a:	fd ed       	ldi	r31, 0xDD	; 221
    215c:	6f 2e       	mov	r6, r31
    215e:	ff ef       	ldi	r31, 0xFF	; 255
    2160:	7f 2e       	mov	r7, r31
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <line_tracking+0x8c>
	VR_DETERMINED_speed = VR[0] / speed_den;

	if (back_patt == NO_LINE && low_speed_flag == 0)
	{
		low_speed_flag = 1;
		VR_DETERMINED_speed = VR[0] / SPEED_DENOMINATOR_VERY_LOW;
    2164:	e3 e0       	ldi	r30, 0x03	; 3
    2166:	fe 2e       	mov	r15, r30
	while (1)
	{
		L_speed = LEFT_SPEED_BASE + VR_DETERMINED_speed;
		R_speed = RIGHT_SPEED_BASE + VR_DETERMINED_speed;

		fro_patt = patt_ana(front_sensor);
    2168:	80 91 aa 00 	lds	r24, 0x00AA
    216c:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    2170:	08 2f       	mov	r16, r24
		back_patt = patt_ana(back_sensor);
    2172:	80 91 a5 00 	lds	r24, 0x00A5
    2176:	0e 94 0f 0c 	call	0x181e	; 0x181e <patt_ana>
    217a:	28 2f       	mov	r18, r24
		{
//			Motor_stop();
//			break;  
		}

		if (back_patt != NO_LINE && low_speed_flag == 1)
    217c:	89 30       	cpi	r24, 0x09	; 9
    217e:	51 f0       	breq	.+20     	; 0x2194 <line_tracking+0xb8>
    2180:	39 81       	ldd	r19, Y+1	; 0x01
    2182:	31 30       	cpi	r19, 0x01	; 1
    2184:	31 f4       	brne	.+12     	; 0x2192 <line_tracking+0xb6>
		{
			low_speed_flag = 0;
			VR_DETERMINED_speed = VR[0] / speed_den;
    2186:	80 91 9a 00 	lds	r24, 0x009A
    218a:	69 2d       	mov	r22, r9
    218c:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <__udivmodqi4>
    2190:	18 2f       	mov	r17, r24
    2192:	19 82       	std	Y+1, r1	; 0x01
		}

		if(fro_patt < 4 &&  fro_patt > -4)   //front sensor value valid
    2194:	80 2f       	mov	r24, r16
    2196:	8d 5f       	subi	r24, 0xFD	; 253
    2198:	87 30       	cpi	r24, 0x07	; 7
    219a:	18 f4       	brcc	.+6      	; 0x21a2 <line_tracking+0xc6>
		{
			past_front = fro_patt;
    219c:	00 93 9e 00 	sts	0x009E, r16
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <line_tracking+0xca>
		}
		else  //front sensor invalid
		{
			fro_patt = past_front;	
    21a2:	00 91 9e 00 	lds	r16, 0x009E
		}

		if(back_patt < 4 &&  back_patt > -4)   //back sensor value valid
    21a6:	82 2f       	mov	r24, r18
    21a8:	8d 5f       	subi	r24, 0xFD	; 253
    21aa:	87 30       	cpi	r24, 0x07	; 7
    21ac:	18 f4       	brcc	.+6      	; 0x21b4 <line_tracking+0xd8>
		{
			past_back = back_patt;
    21ae:	20 93 be 00 	sts	0x00BE, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <line_tracking+0xdc>
		}
		else  //front sensor invalid
		{
			back_patt = past_back;	
    21b4:	20 91 be 00 	lds	r18, 0x00BE
		}


		drift = fro_patt + back_patt;  //for example, when fro = 1, back = -1 (left)
		defl = fro_patt - back_patt;	//drift = 0, defl = 2.`
    21b8:	d0 2e       	mov	r13, r16
    21ba:	d2 1a       	sub	r13, r18
										//another: fro = 1, back = 0
										//drift = 1, defl = 1

		diff = VR_DETERMINED_speed * (- 15 * drift - 35 * defl - 550 / VR_DETERMINED_speed * (defl - past_defl));
    21bc:	4d 2d       	mov	r20, r13
    21be:	55 27       	eor	r21, r21
    21c0:	47 fd       	sbrc	r20, 7
    21c2:	50 95       	com	r21
    21c4:	81 2f       	mov	r24, r17
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9b 83       	std	Y+3, r25	; 0x03
    21ca:	8a 83       	std	Y+2, r24	; 0x02

		L_speed = LEFT_SPEED_BASE + VR_DETERMINED_speed - diff / 230; 
    21cc:	1c 5e       	subi	r17, 0xEC	; 236
    21ce:	46 9d       	mul	r20, r6
    21d0:	f0 01       	movw	r30, r0
    21d2:	47 9d       	mul	r20, r7
    21d4:	f0 0d       	add	r31, r0
    21d6:	56 9d       	mul	r21, r6
    21d8:	f0 0d       	add	r31, r0
    21da:	11 24       	eor	r1, r1
    21dc:	20 0f       	add	r18, r16
    21de:	a1 ef       	ldi	r26, 0xF1	; 241
    21e0:	2a 02       	muls	r18, r26
    21e2:	c0 01       	movw	r24, r0
    21e4:	11 24       	eor	r1, r1
    21e6:	e8 0f       	add	r30, r24
    21e8:	f9 1f       	adc	r31, r25
    21ea:	20 91 a3 00 	lds	r18, 0x00A3
    21ee:	33 27       	eor	r19, r19
    21f0:	27 fd       	sbrc	r18, 7
    21f2:	30 95       	com	r19
    21f4:	24 1b       	sub	r18, r20
    21f6:	35 0b       	sbc	r19, r21
    21f8:	86 e2       	ldi	r24, 0x26	; 38
    21fa:	92 e0       	ldi	r25, 0x02	; 2
    21fc:	6a 81       	ldd	r22, Y+2	; 0x02
    21fe:	7b 81       	ldd	r23, Y+3	; 0x03
    2200:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__divmodhi4>
    2204:	26 9f       	mul	r18, r22
    2206:	c0 01       	movw	r24, r0
    2208:	27 9f       	mul	r18, r23
    220a:	90 0d       	add	r25, r0
    220c:	36 9f       	mul	r19, r22
    220e:	90 0d       	add	r25, r0
    2210:	11 24       	eor	r1, r1
    2212:	e8 0f       	add	r30, r24
    2214:	f9 1f       	adc	r31, r25
    2216:	2a 81       	ldd	r18, Y+2	; 0x02
    2218:	3b 81       	ldd	r19, Y+3	; 0x03
    221a:	e2 9f       	mul	r30, r18
    221c:	c0 01       	movw	r24, r0
    221e:	e3 9f       	mul	r30, r19
    2220:	90 0d       	add	r25, r0
    2222:	f2 9f       	mul	r31, r18
    2224:	90 0d       	add	r25, r0
    2226:	11 24       	eor	r1, r1
    2228:	6a e1       	ldi	r22, 0x1A	; 26
    222a:	7f ef       	ldi	r23, 0xFF	; 255
    222c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__divmodhi4>
    2230:	86 2f       	mov	r24, r22
    2232:	81 0f       	add	r24, r17
    2234:	14 51       	subi	r17, 0x14	; 20
		R_speed = RIGHT_SPEED_BASE + VR_DETERMINED_speed;

		if(L_speed > 100)
			L_speed = 100;
		Motor_forward(L_speed, R_speed);
    2236:	85 36       	cpi	r24, 0x65	; 101
    2238:	08 f0       	brcs	.+2      	; 0x223c <line_tracking+0x160>
    223a:	84 e6       	ldi	r24, 0x64	; 100
    223c:	61 2f       	mov	r22, r17
    223e:	6d 5e       	subi	r22, 0xED	; 237
    2240:	0e 94 a3 00 	call	0x146	; 0x146 <Motor_forward>
		past_defl = defl;
    2244:	d0 92 a3 00 	sts	0x00A3, r13
		
		delay_us(100); // make a little delay 
    2248:	84 e6       	ldi	r24, 0x64	; 100
    224a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <delay_us>
		
		fro_patt = patt_ana(front_sensor);
    224e:	80 91 aa 00 	lds	r24, 0x00AA
		
		if((middle_sensor & 0b00101100) != 0b00000000)
    2252:	80 91 98 00 	lds	r24, 0x0098
    2256:	8c 72       	andi	r24, 0x2C	; 44
    2258:	29 f0       	breq	.+10     	; 0x2264 <line_tracking+0x188>
		{
			Motor_stop();
    225a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
			return FRONT_OBJECT_STOP * 10 + STEP;
    225e:	8e 2d       	mov	r24, r14
    2260:	8c 59       	subi	r24, 0x9C	; 156
    2262:	90 c0       	rjmp	.+288    	; 0x2384 <line_tracking+0x2a8>
		}
		
		if(((front_sensor & 0b10010000) == 0b10010000 || (front_sensor & 0b00001001) == 0b00001001) && STEP_flag == 0) // cross encounter
    2264:	80 91 aa 00 	lds	r24, 0x00AA
    2268:	80 79       	andi	r24, 0x90	; 144
    226a:	80 39       	cpi	r24, 0x90	; 144
    226c:	29 f0       	breq	.+10     	; 0x2278 <line_tracking+0x19c>
    226e:	80 91 aa 00 	lds	r24, 0x00AA
    2272:	89 70       	andi	r24, 0x09	; 9
    2274:	89 30       	cpi	r24, 0x09	; 9
    2276:	89 f4       	brne	.+34     	; 0x229a <line_tracking+0x1be>
    2278:	ff 20       	and	r15, r15
    227a:	79 f4       	brne	.+30     	; 0x229a <line_tracking+0x1be>
		{
			delay_ms(5);
    227c:	85 e0       	ldi	r24, 0x05	; 5
    227e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
			if ((front_sensor & 0b10010000) == 0b10010000 || (front_sensor & 0b00001001) == 0b00001001)
    2282:	80 91 aa 00 	lds	r24, 0x00AA
    2286:	80 79       	andi	r24, 0x90	; 144
    2288:	80 39       	cpi	r24, 0x90	; 144
    228a:	29 f0       	breq	.+10     	; 0x2296 <line_tracking+0x1ba>
    228c:	80 91 aa 00 	lds	r24, 0x00AA
    2290:	89 70       	andi	r24, 0x09	; 9
    2292:	89 30       	cpi	r24, 0x09	; 9
    2294:	11 f4       	brne	.+4      	; 0x229a <line_tracking+0x1be>
    2296:	ff 24       	eor	r15, r15
    2298:	f3 94       	inc	r15
			{
				STEP_flag = 1;
			}
		}

		if(((front_sensor & 0b10010000) != 0b10010000 && (front_sensor & 0b00001001) != 0b00001001) && STEP_flag == 1)
    229a:	80 91 aa 00 	lds	r24, 0x00AA
    229e:	80 79       	andi	r24, 0x90	; 144
    22a0:	80 39       	cpi	r24, 0x90	; 144
    22a2:	51 f0       	breq	.+20     	; 0x22b8 <line_tracking+0x1dc>
    22a4:	80 91 aa 00 	lds	r24, 0x00AA
    22a8:	89 70       	andi	r24, 0x09	; 9
    22aa:	89 30       	cpi	r24, 0x09	; 9
    22ac:	29 f0       	breq	.+10     	; 0x22b8 <line_tracking+0x1dc>
    22ae:	31 e0       	ldi	r19, 0x01	; 1
    22b0:	f3 16       	cp	r15, r19
    22b2:	11 f4       	brne	.+4      	; 0x22b8 <line_tracking+0x1dc>
    22b4:	72 e0       	ldi	r23, 0x02	; 2
    22b6:	f7 2e       	mov	r15, r23
		{
			STEP_flag = 2;
		}

		if((middle_sensor & 0b00000011) != 0 && STEP_flag == 2)
    22b8:	80 91 98 00 	lds	r24, 0x0098
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	83 70       	andi	r24, 0x03	; 3
    22c0:	90 70       	andi	r25, 0x00	; 0
    22c2:	89 2b       	or	r24, r25
    22c4:	89 f0       	breq	.+34     	; 0x22e8 <line_tracking+0x20c>
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	f8 16       	cp	r15, r24
    22ca:	71 f4       	brne	.+28     	; 0x22e8 <line_tracking+0x20c>
		{
			delay_ms(5);
    22cc:	85 e0       	ldi	r24, 0x05	; 5
    22ce:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
			if((middle_sensor & 0b00000011) != 0)
    22d2:	80 91 98 00 	lds	r24, 0x0098
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	83 70       	andi	r24, 0x03	; 3
    22da:	90 70       	andi	r25, 0x00	; 0
    22dc:	89 2b       	or	r24, r25
    22de:	21 f0       	breq	.+8      	; 0x22e8 <line_tracking+0x20c>
			{
				STEP_flag = 0;
				STEP++;
    22e0:	e3 94       	inc	r14
				Map_setposition_front();
    22e2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Map_setposition_front>
    22e6:	ff 24       	eor	r15, r15
			}
		}

		
		if(mode_no == OBJECT_MODE || mode_no == SIDE_OBJECT_MODE)
    22e8:	97 e0       	ldi	r25, 0x07	; 7
    22ea:	a9 16       	cp	r10, r25
    22ec:	19 f0       	breq	.+6      	; 0x22f4 <line_tracking+0x218>
    22ee:	a9 e0       	ldi	r26, 0x09	; 9
    22f0:	aa 16       	cp	r10, r26
    22f2:	59 f4       	brne	.+22     	; 0x230a <line_tracking+0x22e>
		{
			if((front_sensor & 0b10000001) != 0 && side_ball_detected == 0)
    22f4:	80 91 aa 00 	lds	r24, 0x00AA
    22f8:	81 78       	andi	r24, 0x81	; 129
    22fa:	39 f0       	breq	.+14     	; 0x230a <line_tracking+0x22e>
    22fc:	cc 20       	and	r12, r12
    22fe:	29 f4       	brne	.+10     	; 0x230a <line_tracking+0x22e>
			{
				if(1 == Golfer_detection())
    2300:	0e 94 c8 13 	call	0x2790	; 0x2790 <Golfer_detection>
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	89 f4       	brne	.+34     	; 0x232a <line_tracking+0x24e>
    2308:	03 c0       	rjmp	.+6      	; 0x2310 <line_tracking+0x234>
					side_ball_detected = 1;
				}
			}
		}
		
		if(side_ball_detected == 1)
    230a:	b1 e0       	ldi	r27, 0x01	; 1
    230c:	cb 16       	cp	r12, r27
    230e:	69 f4       	brne	.+26     	; 0x232a <line_tracking+0x24e>
		{
			Map_setpoint();
    2310:	0e 94 75 0b 	call	0x16ea	; 0x16ea <Map_setpoint>
			side_ball_detected = 2;
			if(mode_no == SIDE_OBJECT_MODE)
    2314:	e9 e0       	ldi	r30, 0x09	; 9
    2316:	ae 16       	cp	r10, r30
    2318:	31 f4       	brne	.+12     	; 0x2326 <line_tracking+0x24a>
			{
				STEP = step_local;
				Map_setposition_front();
    231a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <Map_setposition_front>
    231e:	eb 2c       	mov	r14, r11
    2320:	62 e0       	ldi	r22, 0x02	; 2
    2322:	c6 2e       	mov	r12, r22
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <line_tracking+0x254>
    2326:	52 e0       	ldi	r21, 0x02	; 2
    2328:	c5 2e       	mov	r12, r21
			}
		}						

		////////////////////////////////////////////////
		//step check
		if (step_local == STEP)
    232a:	be 14       	cp	r11, r14
    232c:	09 f0       	breq	.+2      	; 0x2330 <line_tracking+0x254>
    232e:	1c cf       	rjmp	.-456    	; 0x2168 <line_tracking+0x8c>
		{
			STEP_flag = 3;

			if(flag_local == 0 && (middle_sensor & 0b00000011) != 0b00000000)
    2330:	80 91 98 00 	lds	r24, 0x0098
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	83 70       	andi	r24, 0x03	; 3
    2338:	90 70       	andi	r25, 0x00	; 0
    233a:	89 2b       	or	r24, r25
    233c:	09 f4       	brne	.+2      	; 0x2340 <line_tracking+0x264>
    233e:	12 cf       	rjmp	.-476    	; 0x2164 <line_tracking+0x88>
			{
				delay_ms(10);
    2340:	8a e0       	ldi	r24, 0x0A	; 10
    2342:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
				Motor_stop();
    2346:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
				Motor_backward(VR[0] / ADJUST_SPEED_DENOMINATOR, VR[0] / ADJUST_SPEED_DENOMINATOR);
    234a:	80 91 9a 00 	lds	r24, 0x009A
    234e:	60 91 9a 00 	lds	r22, 0x009A
    2352:	66 95       	lsr	r22
    2354:	66 95       	lsr	r22
    2356:	66 95       	lsr	r22
    2358:	86 95       	lsr	r24
    235a:	86 95       	lsr	r24
    235c:	86 95       	lsr	r24
    235e:	0e 94 b2 00 	call	0x164	; 0x164 <Motor_backward>
				while((middle_sensor & 0b00000011) == 0b0000000)
    2362:	80 91 98 00 	lds	r24, 0x0098
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	83 70       	andi	r24, 0x03	; 3
    236a:	90 70       	andi	r25, 0x00	; 0
    236c:	89 2b       	or	r24, r25
    236e:	c9 f3       	breq	.-14     	; 0x2362 <line_tracking+0x286>
				{
					;
				}
				Motor_stop();
    2370:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
				if(side_ball_detected == 2)
    2374:	f2 e0       	ldi	r31, 0x02	; 2
    2376:	cf 16       	cp	r12, r31
    2378:	19 f4       	brne	.+6      	; 0x2380 <line_tracking+0x2a4>
				{
					return SIDE_OBJECT_STOP * 10 + STEP;
    237a:	8e 2d       	mov	r24, r14
    237c:	82 59       	subi	r24, 0x92	; 146
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <line_tracking+0x2a8>
				}
				else
				{
					return STEP_STOP * 10 + STEP;
    2380:	8e 2d       	mov	r24, r14
    2382:	88 58       	subi	r24, 0x88	; 136
	Motor_stop();	
	


	return 0;
}
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	ef 90       	pop	r14
    2396:	df 90       	pop	r13
    2398:	cf 90       	pop	r12
    239a:	bf 90       	pop	r11
    239c:	af 90       	pop	r10
    239e:	9f 90       	pop	r9
    23a0:	7f 90       	pop	r7
    23a2:	6f 90       	pop	r6
    23a4:	08 95       	ret

000023a6 <Golfer_init>:
	return 0;
}

void Golfer_init(void)
{
	direction = EAST;
    23a6:	10 92 9d 00 	sts	0x009D, r1
	position_x = 0;
    23aa:	10 92 97 00 	sts	0x0097, r1
	position_y = 0;
    23ae:	10 92 a9 00 	sts	0x00A9, r1
	Ball = 0;
    23b2:	10 92 a4 00 	sts	0x00A4, r1
	shooted_ball = 0;
    23b6:	10 92 ab 00 	sts	0x00AB, r1
	Map_set = 0;
    23ba:	10 92 99 00 	sts	0x0099, r1
//	Cannon_move(4000);
}
    23be:	08 95       	ret

000023c0 <Golfer_adjust_left>:


void Golfer_adjust_left(void)
{
	u08 delay_time;
	Motor_TurnLeft((VR[0] / ADJUST_SPEED_DENOMINATOR), (VR[0] / ADJUST_SPEED_DENOMINATOR));
    23c0:	80 91 9a 00 	lds	r24, 0x009A
    23c4:	60 91 9a 00 	lds	r22, 0x009A
    23c8:	66 95       	lsr	r22
    23ca:	66 95       	lsr	r22
    23cc:	66 95       	lsr	r22
    23ce:	86 95       	lsr	r24
    23d0:	86 95       	lsr	r24
    23d2:	86 95       	lsr	r24
    23d4:	0e 94 c1 00 	call	0x182	; 0x182 <Motor_TurnLeft>
	delay_time = 180;
	delay_ms(delay_time);
    23d8:	84 eb       	ldi	r24, 0xB4	; 180
    23da:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Motor_stop();
    23de:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    23e2:	08 95       	ret

000023e4 <Golfer_adjust_right>:
}

void Golfer_adjust_right(void)
{
	 u08 delay_time;
	 Motor_TurnRight((VR[0] / ADJUST_SPEED_DENOMINATOR), (VR[0] / ADJUST_SPEED_DENOMINATOR));
    23e4:	80 91 9a 00 	lds	r24, 0x009A
    23e8:	60 91 9a 00 	lds	r22, 0x009A
    23ec:	66 95       	lsr	r22
    23ee:	66 95       	lsr	r22
    23f0:	66 95       	lsr	r22
    23f2:	86 95       	lsr	r24
    23f4:	86 95       	lsr	r24
    23f6:	86 95       	lsr	r24
    23f8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Motor_TurnRight>
	 
	 	delay_time = 100;			//150
	 
	 
	 delay_ms(delay_time);
    23fc:	84 e6       	ldi	r24, 0x64	; 100
    23fe:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	 Motor_stop();
    2402:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Motor_stop>
}
    2406:	08 95       	ret

00002408 <Golfer_turnto>:
	line_tracking(FRONT_OBJECT_MODE, SPEED_DENOMINATOR_MID, step);
	//not finish yet!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}

void Golfer_turnto(u08 d)
{
    2408:	1f 93       	push	r17
    240a:	18 2f       	mov	r17, r24
	switch (d-direction)
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	80 91 9d 00 	lds	r24, 0x009D
    2414:	28 1b       	sub	r18, r24
    2416:	31 09       	sbc	r19, r1
    2418:	21 15       	cp	r18, r1
    241a:	31 05       	cpc	r19, r1
    241c:	39 f1       	breq	.+78     	; 0x246c <Golfer_turnto+0x64>
    241e:	12 16       	cp	r1, r18
    2420:	13 06       	cpc	r1, r19
    2422:	64 f0       	brlt	.+24     	; 0x243c <Golfer_turnto+0x34>
    2424:	8f ef       	ldi	r24, 0xFF	; 255
    2426:	2e 3f       	cpi	r18, 0xFE	; 254
    2428:	38 07       	cpc	r19, r24
    242a:	b9 f0       	breq	.+46     	; 0x245a <Golfer_turnto+0x52>
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	2f 3f       	cpi	r18, 0xFF	; 255
    2430:	38 07       	cpc	r19, r24
    2432:	b4 f4       	brge	.+44     	; 0x2460 <Golfer_turnto+0x58>
    2434:	2d 5f       	subi	r18, 0xFD	; 253
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	b9 f4       	brne	.+46     	; 0x2468 <Golfer_turnto+0x60>
    243a:	0a c0       	rjmp	.+20     	; 0x2450 <Golfer_turnto+0x48>
    243c:	22 30       	cpi	r18, 0x02	; 2
    243e:	31 05       	cpc	r19, r1
    2440:	61 f0       	breq	.+24     	; 0x245a <Golfer_turnto+0x52>
    2442:	22 30       	cpi	r18, 0x02	; 2
    2444:	31 05       	cpc	r19, r1
    2446:	24 f0       	brlt	.+8      	; 0x2450 <Golfer_turnto+0x48>
    2448:	23 30       	cpi	r18, 0x03	; 3
    244a:	31 05       	cpc	r19, r1
    244c:	69 f4       	brne	.+26     	; 0x2468 <Golfer_turnto+0x60>
    244e:	08 c0       	rjmp	.+16     	; 0x2460 <Golfer_turnto+0x58>
	default:	break;
	case 0:	
			return; break; 
	case 1:
	case -3:
			Golfer_turn_left(0);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <Golfer_turn_left>
    2458:	07 c0       	rjmp	.+14     	; 0x2468 <Golfer_turnto+0x60>
			break;
	case -2:
	case 2: 
			Golfer_turn_back();
    245a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <Golfer_turn_back>
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <Golfer_turnto+0x60>
			break;
	case 3:
	case -1: 
			Golfer_turn_right(0);
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Golfer_turn_right>
			break;
	}
	direction = d;
    2468:	10 93 9d 00 	sts	0x009D, r17
}
    246c:	1f 91       	pop	r17
    246e:	08 95       	ret

00002470 <Golfer_sendball>:
	line_backward_BACK_TO_GRID(SPEED_DENOMINATOR_LOW);//go back
}

void Golfer_sendball(void)
{
	if(direction != SOUTH)
    2470:	80 91 9d 00 	lds	r24, 0x009D
    2474:	83 30       	cpi	r24, 0x03	; 3
    2476:	71 f0       	breq	.+28     	; 0x2494 <Golfer_sendball+0x24>
	{
		Golfer_turnto(NORTH);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
		step = (4 - position_y);
    247e:	44 e0       	ldi	r20, 0x04	; 4
    2480:	80 91 a9 00 	lds	r24, 0x00A9
    2484:	48 1b       	sub	r20, r24
    2486:	40 93 ad 00 	sts	0x00AD, r20
		line_tracking(FRONT_OBJECT_MODE, SPEED_DENOMINATOR_MID, step);
    248a:	88 e0       	ldi	r24, 0x08	; 8
    248c:	6a e0       	ldi	r22, 0x0A	; 10
    248e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
    2492:	0a c0       	rjmp	.+20     	; 0x24a8 <Golfer_sendball+0x38>
	}else{
		step = (4 - position_y);
    2494:	44 e0       	ldi	r20, 0x04	; 4
    2496:	80 91 a9 00 	lds	r24, 0x00A9
    249a:	48 1b       	sub	r20, r24
    249c:	40 93 ad 00 	sts	0x00AD, r20
		line_backward(BACK_COUNTING, SPEED_DENOMINATOR_MID, step);
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	6a e0       	ldi	r22, 0x0A	; 10
    24a4:	0e 94 56 0f 	call	0x1eac	; 0x1eac <line_backward>
	}
	
	Golfer_turnto(EAST);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	0e 94 04 12 	call	0x2408	; 0x2408 <Golfer_turnto>
	step = (4 - position_x);
    24ae:	44 e0       	ldi	r20, 0x04	; 4
    24b0:	80 91 97 00 	lds	r24, 0x0097
    24b4:	48 1b       	sub	r20, r24
    24b6:	40 93 ad 00 	sts	0x00AD, r20
	line_tracking(FRONT_OBJECT_MODE, SPEED_DENOMINATOR_MID, step);
    24ba:	88 e0       	ldi	r24, 0x08	; 8
    24bc:	6a e0       	ldi	r22, 0x0A	; 10
    24be:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
	//not finish yet!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
    24c2:	08 95       	ret

000024c4 <Golfer_shoot>:


void Golfer_shoot(void)
{
	
	if(direction == SOUTH || direction == EAST)
    24c4:	80 91 9d 00 	lds	r24, 0x009D
    24c8:	83 30       	cpi	r24, 0x03	; 3
    24ca:	11 f0       	breq	.+4      	; 0x24d0 <Golfer_shoot+0xc>
    24cc:	88 23       	and	r24, r24
    24ce:	11 f4       	brne	.+4      	; 0x24d4 <Golfer_shoot+0x10>
		Golfer_turn_left_corner();
    24d0:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <Golfer_turn_left_corner>
	if(direction == NORTH || direction == WEST)
    24d4:	80 91 9d 00 	lds	r24, 0x009D
    24d8:	81 50       	subi	r24, 0x01	; 1
    24da:	82 30       	cpi	r24, 0x02	; 2
    24dc:	10 f4       	brcc	.+4      	; 0x24e2 <Golfer_shoot+0x1e>
		Golfer_turn_right_corner();
    24de:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Golfer_turn_right_corner>

	line_tracking_OUT_GRID(SPEED_DENOMINATOR_LOW);
    24e2:	84 e1       	ldi	r24, 0x14	; 20
    24e4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <line_tracking_OUT_GRID>
	Golfer_backward_p();	///////
    24e8:	0e 94 ad 0c 	call	0x195a	; 0x195a <Golfer_backward_p>
	defl_adjust();
    24ec:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <defl_adjust>
	Golfer_adjust_right();
    24f0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <Golfer_adjust_right>

	Hand_ready1();
    24f4:	0e 94 b9 04 	call	0x972	; 0x972 <Hand_ready1>

	Cannon_ready();
    24f8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Cannon_ready>
	Cannon_move(ROTATE_CANNON_SHOOT_I);
    24fc:	80 e4       	ldi	r24, 0x40	; 64
    24fe:	9b e0       	ldi	r25, 0x0B	; 11
    2500:	0e 94 cd 04 	call	0x99a	; 0x99a <Cannon_move>
	delay_ms(250);
    2504:	8a ef       	ldi	r24, 0xFA	; 250
    2506:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(250);
    250a:	8a ef       	ldi	r24, 0xFA	; 250
    250c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Cannon_shoot();					//shoot the 1st ball
    2510:	0e 94 b0 05 	call	0xb60	; 0xb60 <Cannon_shoot>
	Cannon_stop();
    2514:	0e 94 c3 04 	call	0x986	; 0x986 <Cannon_stop>
	Ball--;
    2518:	80 91 a4 00 	lds	r24, 0x00A4
    251c:	81 50       	subi	r24, 0x01	; 1
    251e:	80 93 a4 00 	sts	0x00A4, r24
	shooted_ball++;
    2522:	80 91 ab 00 	lds	r24, 0x00AB
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	80 93 ab 00 	sts	0x00AB, r24
			//shoot the 2nd ball
	Hand_up_slow();
    252c:	0e 94 5a 05 	call	0xab4	; 0xab4 <Hand_up_slow>
	Cannon_down_slow();
    2530:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Cannon_down_slow>
	delay_ms(50);
    2534:	82 e3       	ldi	r24, 0x32	; 50
    2536:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Cannon_ready();
    253a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Cannon_ready>
	Hand_ready1();
    253e:	0e 94 b9 04 	call	0x972	; 0x972 <Hand_ready1>


	delay_ms(250);
    2542:	8a ef       	ldi	r24, 0xFA	; 250
    2544:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(250);
    2548:	8a ef       	ldi	r24, 0xFA	; 250
    254a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Cannon_shoot();					//shoot the 2nd ball
    254e:	0e 94 b0 05 	call	0xb60	; 0xb60 <Cannon_shoot>
	Cannon_stop();
    2552:	0e 94 c3 04 	call	0x986	; 0x986 <Cannon_stop>
	Ball--;
    2556:	80 91 a4 00 	lds	r24, 0x00A4
    255a:	81 50       	subi	r24, 0x01	; 1
    255c:	80 93 a4 00 	sts	0x00A4, r24
	shooted_ball++;
    2560:	80 91 ab 00 	lds	r24, 0x00AB
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	80 93 ab 00 	sts	0x00AB, r24
			//shoot the 3rd ball
	Hand_ready1();
    256a:	0e 94 b9 04 	call	0x972	; 0x972 <Hand_ready1>
	Cannon_down();
    256e:	0e 94 29 05 	call	0xa52	; 0xa52 <Cannon_down>
	delay_ms(50);
    2572:	82 e3       	ldi	r24, 0x32	; 50
    2574:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	Hand_up_2();
    2578:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Hand_up_2>
	delay_ms(50);
    257c:	82 e3       	ldi	r24, 0x32	; 50
    257e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Hand_pre_open();
    2582:	0e 94 80 05 	call	0xb00	; 0xb00 <Hand_pre_open>
	delay_ms(50);	
    2586:	82 e3       	ldi	r24, 0x32	; 50
    2588:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Hand_up();
    258c:	0e 94 73 05 	call	0xae6	; 0xae6 <Hand_up>
	Hand_open();
    2590:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>
	Hand_ready1();
    2594:	0e 94 b9 04 	call	0x972	; 0x972 <Hand_ready1>
	Cannon_ready();
    2598:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Cannon_ready>
//special
	Hand_pre_open();
    259c:	0e 94 80 05 	call	0xb00	; 0xb00 <Hand_pre_open>
	Hand_up_slow();
    25a0:	0e 94 5a 05 	call	0xab4	; 0xab4 <Hand_up_slow>
	Cannon_down_slow();
    25a4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Cannon_down_slow>
	delay_ms(50);
    25a8:	82 e3       	ldi	r24, 0x32	; 50
    25aa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	
	Cannon_ready();	
    25ae:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Cannon_ready>
	Hand_ready1();
    25b2:	0e 94 b9 04 	call	0x972	; 0x972 <Hand_ready1>
	Hand_open();
    25b6:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>


	delay_ms(250);
    25ba:	8a ef       	ldi	r24, 0xFA	; 250
    25bc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	delay_ms(250);
    25c0:	8a ef       	ldi	r24, 0xFA	; 250
    25c2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Cannon_shoot();
    25c6:	0e 94 b0 05 	call	0xb60	; 0xb60 <Cannon_shoot>
	Cannon_stop();
    25ca:	0e 94 c3 04 	call	0x986	; 0x986 <Cannon_stop>
	Cannon_move(ROTATE_CANNON_INIT);
    25ce:	8e ed       	ldi	r24, 0xDE	; 222
    25d0:	9d e0       	ldi	r25, 0x0D	; 13
    25d2:	0e 94 cd 04 	call	0x99a	; 0x99a <Cannon_move>
	Ball--;	
	shooted_ball++;	
    25d6:	80 91 ab 00 	lds	r24, 0x00AB
    25da:	8f 5f       	subi	r24, 0xFF	; 255
    25dc:	80 93 ab 00 	sts	0x00AB, r24
	Ball = 0;	
    25e0:	10 92 a4 00 	sts	0x00A4, r1
//	Golfer_adjust_left();
	defl_adjust();
    25e4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <defl_adjust>
	step = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 ad 00 	sts	0x00AD, r24
	line_backward_BACK_TO_GRID(SPEED_DENOMINATOR_LOW);//go back
    25ee:	84 e1       	ldi	r24, 0x14	; 20
    25f0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <line_backward_BACK_TO_GRID>
}
    25f4:	08 95       	ret

000025f6 <Golfer_pickup_fast>:
//	Cannon_move(4000);
}

void Golfer_pickup_fast(void)
{
	Hand_close();
    25f6:	0e 94 a0 05 	call	0xb40	; 0xb40 <Hand_close>
	if(Ball == 0)
    25fa:	80 91 a4 00 	lds	r24, 0x00A4
    25fe:	88 23       	and	r24, r24
    2600:	89 f4       	brne	.+34     	; 0x2624 <Golfer_pickup_fast+0x2e>
	{
		Hand_up_2();
    2602:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Hand_up_2>
		delay_ms(50);
    2606:	82 e3       	ldi	r24, 0x32	; 50
    2608:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
		Hand_pre_open();
    260c:	0e 94 80 05 	call	0xb00	; 0xb00 <Hand_pre_open>
		delay_ms(50);	
    2610:	82 e3       	ldi	r24, 0x32	; 50
    2612:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
		Hand_up();
    2616:	0e 94 73 05 	call	0xae6	; 0xae6 <Hand_up>
		Hand_open();
    261a:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>
		Cannon_ready();
    261e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <Cannon_ready>
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <Golfer_pickup_fast+0x32>
		Ball++;
	}else{
		Hand_up();
    2624:	0e 94 73 05 	call	0xae6	; 0xae6 <Hand_up>
		Ball++;
    2628:	80 91 a4 00 	lds	r24, 0x00A4
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	80 93 a4 00 	sts	0x00A4, r24
    2632:	08 95       	ret

00002634 <Golfer_pickup_front>:
}

void Golfer_pickup_front(void)
{

	Golfer_backward_p();
    2634:	0e 94 ad 0c 	call	0x195a	; 0x195a <Golfer_backward_p>
	Golfer_forward_p(70);
    2638:	86 e4       	ldi	r24, 0x46	; 70
    263a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Golfer_forward_p>
//	defl_adjust();

	Hand_down();
    263e:	0e 94 40 05 	call	0xa80	; 0xa80 <Hand_down>
	Hand_close();
    2642:	0e 94 a0 05 	call	0xb40	; 0xb40 <Hand_close>
	if(Ball == 0)
    2646:	80 91 a4 00 	lds	r24, 0x00A4
    264a:	88 23       	and	r24, r24
    264c:	69 f4       	brne	.+26     	; 0x2668 <Golfer_pickup_front+0x34>
	{
		Hand_up_2();
    264e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Hand_up_2>
		delay_ms(50);
    2652:	82 e3       	ldi	r24, 0x32	; 50
    2654:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
		Hand_pre_open();
    2658:	0e 94 80 05 	call	0xb00	; 0xb00 <Hand_pre_open>
		delay_ms(50);	
    265c:	82 e3       	ldi	r24, 0x32	; 50
    265e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
		Hand_up();
    2662:	0e 94 73 05 	call	0xae6	; 0xae6 <Hand_up>
    2666:	07 c0       	rjmp	.+14     	; 0x2676 <Golfer_pickup_front+0x42>
		Hand_open();
	//	Cannon_ready();
		Ball++;
	}else if(Ball == 2){
    2668:	82 30       	cpi	r24, 0x02	; 2
    266a:	19 f4       	brne	.+6      	; 0x2672 <Golfer_pickup_front+0x3e>
		Hand_up();
    266c:	0e 94 73 05 	call	0xae6	; 0xae6 <Hand_up>
    2670:	04 c0       	rjmp	.+8      	; 0x267a <Golfer_pickup_front+0x46>
		Ball++;
	}else{	//ball == 1
		Hand_up_special();
    2672:	0e 94 a9 04 	call	0x952	; 0x952 <Hand_up_special>
		Hand_open(); 
    2676:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>
		Ball++;
    267a:	80 91 a4 00 	lds	r24, 0x00A4
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	80 93 a4 00 	sts	0x00A4, r24
	}
	defl_adjust();
    2684:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <defl_adjust>
	step = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	80 93 ad 00 	sts	0x00AD, r24
	line_tracking(FRONT_OBJECT_MODE,SPEED_DENOMINATOR_MID,step);
    268e:	88 e0       	ldi	r24, 0x08	; 8
    2690:	6a e0       	ldi	r22, 0x0A	; 10
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 6e 10 	call	0x20dc	; 0x20dc <line_tracking>
}
    2698:	08 95       	ret

0000269a <Golfer_pickup_only>:
}


void Golfer_pickup_only(void)
{
	Golfer_backward_p();
    269a:	0e 94 ad 0c 	call	0x195a	; 0x195a <Golfer_backward_p>
	Golfer_forward_p(70);
    269e:	86 e4       	ldi	r24, 0x46	; 70
    26a0:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Golfer_forward_p>
//	defl_adjust();
	Hand_down();
    26a4:	0e 94 40 05 	call	0xa80	; 0xa80 <Hand_down>
	Hand_close();
    26a8:	0e 94 a0 05 	call	0xb40	; 0xb40 <Hand_close>
	if(Ball == 0)
    26ac:	80 91 a4 00 	lds	r24, 0x00A4
    26b0:	88 23       	and	r24, r24
    26b2:	69 f4       	brne	.+26     	; 0x26ce <Golfer_pickup_only+0x34>
	{
		Hand_up_2();
    26b4:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Hand_up_2>
		delay_ms(50);
    26b8:	82 e3       	ldi	r24, 0x32	; 50
    26ba:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
		Hand_pre_open();
    26be:	0e 94 80 05 	call	0xb00	; 0xb00 <Hand_pre_open>
		delay_ms(50);	
    26c2:	82 e3       	ldi	r24, 0x32	; 50
    26c4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
		Hand_up();
    26c8:	0e 94 73 05 	call	0xae6	; 0xae6 <Hand_up>
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <Golfer_pickup_only+0x42>
		Hand_open();
		//Cannon_ready();
		Ball++;
	}else if(Ball == 2){
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	19 f4       	brne	.+6      	; 0x26d8 <Golfer_pickup_only+0x3e>
		Hand_up();
    26d2:	0e 94 73 05 	call	0xae6	; 0xae6 <Hand_up>
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <Golfer_pickup_only+0x46>
		Ball++;
	}else{	//ball == 1
		Hand_up_special();
    26d8:	0e 94 a9 04 	call	0x952	; 0x952 <Hand_up_special>
		Hand_open(); 
    26dc:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>
		Ball++;
    26e0:	80 91 a4 00 	lds	r24, 0x00A4
    26e4:	8f 5f       	subi	r24, 0xFF	; 255
    26e6:	80 93 a4 00 	sts	0x00A4, r24
    26ea:	08 95       	ret

000026ec <Golfer_pickup_special>:

}

void Golfer_pickup_special(void)
{
	Golfer_backward_p();
    26ec:	0e 94 ad 0c 	call	0x195a	; 0x195a <Golfer_backward_p>
	Golfer_forward_p(70);
    26f0:	86 e4       	ldi	r24, 0x46	; 70
    26f2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Golfer_forward_p>
	Hand_down();
    26f6:	0e 94 40 05 	call	0xa80	; 0xa80 <Hand_down>
	Hand_close();
    26fa:	0e 94 a0 05 	call	0xb40	; 0xb40 <Hand_close>
	delay_ms(100);
    26fe:	84 e6       	ldi	r24, 0x64	; 100
    2700:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	if(Ball == 0)
    2704:	80 91 a4 00 	lds	r24, 0x00A4
    2708:	88 23       	and	r24, r24
    270a:	29 f4       	brne	.+10     	; 0x2716 <Golfer_pickup_special+0x2a>
	{
		Hand_up_special();
    270c:	0e 94 a9 04 	call	0x952	; 0x952 <Hand_up_special>
		Hand_open(); 
    2710:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>
    2714:	02 c0       	rjmp	.+4      	; 0x271a <Golfer_pickup_special+0x2e>
		Ball++;
	}else{
		Hand_up_special();
    2716:	0e 94 a9 04 	call	0x952	; 0x952 <Hand_up_special>
		Ball++;
    271a:	80 91 a4 00 	lds	r24, 0x00A4
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	80 93 a4 00 	sts	0x00A4, r24
    2724:	08 95       	ret

00002726 <Golfer_drop>:
	}
}
void Golfer_drop(void)
{
	Golfer_forward_p(250);
    2726:	8a ef       	ldi	r24, 0xFA	; 250
    2728:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Golfer_forward_p>
	//Golfer_forward_p(250);
	Hand_drop();
    272c:	0e 94 36 05 	call	0xa6c	; 0xa6c <Hand_drop>
	delay_ms(20);
    2730:	84 e1       	ldi	r24, 0x14	; 20
    2732:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Hand_open();
    2736:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>
	delay_ms(250);
    273a:	8a ef       	ldi	r24, 0xFA	; 250
    273c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Ball--;
    2740:	80 91 a4 00 	lds	r24, 0x00A4
    2744:	81 50       	subi	r24, 0x01	; 1
    2746:	80 93 a4 00 	sts	0x00A4, r24
	///////////
	Golfer_backward_p2(150);
    274a:	86 e9       	ldi	r24, 0x96	; 150
    274c:	0e 94 95 0c 	call	0x192a	; 0x192a <Golfer_backward_p2>
	Cannon_up_special();
    2750:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Cannon_up_special>
	Hand_up_special2();
    2754:	0e 94 9f 04 	call	0x93e	; 0x93e <Hand_up_special2>
	delay_ms(250);
    2758:	8a ef       	ldi	r24, 0xFA	; 250
    275a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>

	
	Hand_pre_open();	
    275e:	0e 94 80 05 	call	0xb00	; 0xb00 <Hand_pre_open>
	delay_ms(250);
    2762:	8a ef       	ldi	r24, 0xFA	; 250
    2764:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Cannon_down();
    2768:	0e 94 29 05 	call	0xa52	; 0xa52 <Cannon_down>
	Hand_close();
    276c:	0e 94 a0 05 	call	0xb40	; 0xb40 <Hand_close>
	Golfer_forward_p(180);
    2770:	84 eb       	ldi	r24, 0xB4	; 180
    2772:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Golfer_forward_p>
	Hand_drop();
    2776:	0e 94 36 05 	call	0xa6c	; 0xa6c <Hand_drop>
	delay_ms(20);
    277a:	84 e1       	ldi	r24, 0x14	; 20
    277c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <delay_ms>
	Hand_open();
    2780:	0e 94 90 05 	call	0xb20	; 0xb20 <Hand_open>
	Ball--;
    2784:	80 91 a4 00 	lds	r24, 0x00A4
    2788:	81 50       	subi	r24, 0x01	; 1
    278a:	80 93 a4 00 	sts	0x00A4, r24

}
    278e:	08 95       	ret

00002790 <Golfer_detection>:



u08 Golfer_detection(void)
{
	IR_update();
    2790:	0e 94 23 02 	call	0x446	; 0x446 <IR_update>
	if(IR > DISTANCE_1)
    2794:	80 91 c3 00 	lds	r24, 0x00C3
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	85 36       	cpi	r24, 0x65	; 101
    279c:	08 f0       	brcs	.+2      	; 0x27a0 <Golfer_detection+0x10>
    279e:	91 e0       	ldi	r25, 0x01	; 1
		return 1;
	return 0;
}
    27a0:	89 2f       	mov	r24, r25
    27a2:	08 95       	ret

000027a4 <__udivmodqi4>:
    27a4:	99 1b       	sub	r25, r25
    27a6:	79 e0       	ldi	r23, 0x09	; 9
    27a8:	04 c0       	rjmp	.+8      	; 0x27b2 <__udivmodqi4_ep>

000027aa <__udivmodqi4_loop>:
    27aa:	99 1f       	adc	r25, r25
    27ac:	96 17       	cp	r25, r22
    27ae:	08 f0       	brcs	.+2      	; 0x27b2 <__udivmodqi4_ep>
    27b0:	96 1b       	sub	r25, r22

000027b2 <__udivmodqi4_ep>:
    27b2:	88 1f       	adc	r24, r24
    27b4:	7a 95       	dec	r23
    27b6:	c9 f7       	brne	.-14     	; 0x27aa <__udivmodqi4_loop>
    27b8:	80 95       	com	r24
    27ba:	08 95       	ret

000027bc <__udivmodhi4>:
    27bc:	aa 1b       	sub	r26, r26
    27be:	bb 1b       	sub	r27, r27
    27c0:	51 e1       	ldi	r21, 0x11	; 17
    27c2:	07 c0       	rjmp	.+14     	; 0x27d2 <__udivmodhi4_ep>

000027c4 <__udivmodhi4_loop>:
    27c4:	aa 1f       	adc	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	a6 17       	cp	r26, r22
    27ca:	b7 07       	cpc	r27, r23
    27cc:	10 f0       	brcs	.+4      	; 0x27d2 <__udivmodhi4_ep>
    27ce:	a6 1b       	sub	r26, r22
    27d0:	b7 0b       	sbc	r27, r23

000027d2 <__udivmodhi4_ep>:
    27d2:	88 1f       	adc	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	5a 95       	dec	r21
    27d8:	a9 f7       	brne	.-22     	; 0x27c4 <__udivmodhi4_loop>
    27da:	80 95       	com	r24
    27dc:	90 95       	com	r25
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	08 95       	ret

000027e4 <__divmodhi4>:
    27e4:	97 fb       	bst	r25, 7
    27e6:	09 2e       	mov	r0, r25
    27e8:	07 26       	eor	r0, r23
    27ea:	0a d0       	rcall	.+20     	; 0x2800 <__divmodhi4_neg1>
    27ec:	77 fd       	sbrc	r23, 7
    27ee:	04 d0       	rcall	.+8      	; 0x27f8 <__divmodhi4_neg2>
    27f0:	e5 df       	rcall	.-54     	; 0x27bc <__udivmodhi4>
    27f2:	06 d0       	rcall	.+12     	; 0x2800 <__divmodhi4_neg1>
    27f4:	00 20       	and	r0, r0
    27f6:	1a f4       	brpl	.+6      	; 0x27fe <__divmodhi4_exit>

000027f8 <__divmodhi4_neg2>:
    27f8:	70 95       	com	r23
    27fa:	61 95       	neg	r22
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255

000027fe <__divmodhi4_exit>:
    27fe:	08 95       	ret

00002800 <__divmodhi4_neg1>:
    2800:	f6 f7       	brtc	.-4      	; 0x27fe <__divmodhi4_exit>
    2802:	90 95       	com	r25
    2804:	81 95       	neg	r24
    2806:	9f 4f       	sbci	r25, 0xFF	; 255
    2808:	08 95       	ret

0000280a <_exit>:
    280a:	f8 94       	cli

0000280c <__stop_program>:
    280c:	ff cf       	rjmp	.-2      	; 0x280c <__stop_program>
